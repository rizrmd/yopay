
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model author
 * 
 */
export type author = $Result.DefaultSelection<Prisma.$authorPayload>
/**
 * Model banner
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type banner = $Result.DefaultSelection<Prisma.$bannerPayload>
/**
 * Model bundle
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type bundle = $Result.DefaultSelection<Prisma.$bundlePayload>
/**
 * Model bundle_category
 * 
 */
export type bundle_category = $Result.DefaultSelection<Prisma.$bundle_categoryPayload>
/**
 * Model bundle_product
 * 
 */
export type bundle_product = $Result.DefaultSelection<Prisma.$bundle_productPayload>
/**
 * Model category
 * 
 */
export type category = $Result.DefaultSelection<Prisma.$categoryPayload>
/**
 * Model customer
 * 
 */
export type customer = $Result.DefaultSelection<Prisma.$customerPayload>
/**
 * Model customer_reader
 * 
 */
export type customer_reader = $Result.DefaultSelection<Prisma.$customer_readerPayload>
/**
 * Model customer_track
 * 
 */
export type customer_track = $Result.DefaultSelection<Prisma.$customer_trackPayload>
/**
 * Model landing
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type landing = $Result.DefaultSelection<Prisma.$landingPayload>
/**
 * Model landing_items
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type landing_items = $Result.DefaultSelection<Prisma.$landing_itemsPayload>
/**
 * Model midtrx
 * 
 */
export type midtrx = $Result.DefaultSelection<Prisma.$midtrxPayload>
/**
 * Model product
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model product_category
 * 
 */
export type product_category = $Result.DefaultSelection<Prisma.$product_categoryPayload>
/**
 * Model t_sales
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type t_sales = $Result.DefaultSelection<Prisma.$t_salesPayload>
/**
 * Model t_sales_download
 * 
 */
export type t_sales_download = $Result.DefaultSelection<Prisma.$t_sales_downloadPayload>
/**
 * Model t_sales_line
 * 
 */
export type t_sales_line = $Result.DefaultSelection<Prisma.$t_sales_linePayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Authors
 * const authors = await prisma.author.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Authors
   * const authors = await prisma.author.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.author`: Exposes CRUD operations for the **author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.authorDelegate<ExtArgs>;

  /**
   * `prisma.banner`: Exposes CRUD operations for the **banner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banner.findMany()
    * ```
    */
  get banner(): Prisma.bannerDelegate<ExtArgs>;

  /**
   * `prisma.bundle`: Exposes CRUD operations for the **bundle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bundles
    * const bundles = await prisma.bundle.findMany()
    * ```
    */
  get bundle(): Prisma.bundleDelegate<ExtArgs>;

  /**
   * `prisma.bundle_category`: Exposes CRUD operations for the **bundle_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bundle_categories
    * const bundle_categories = await prisma.bundle_category.findMany()
    * ```
    */
  get bundle_category(): Prisma.bundle_categoryDelegate<ExtArgs>;

  /**
   * `prisma.bundle_product`: Exposes CRUD operations for the **bundle_product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bundle_products
    * const bundle_products = await prisma.bundle_product.findMany()
    * ```
    */
  get bundle_product(): Prisma.bundle_productDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.customerDelegate<ExtArgs>;

  /**
   * `prisma.customer_reader`: Exposes CRUD operations for the **customer_reader** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customer_readers
    * const customer_readers = await prisma.customer_reader.findMany()
    * ```
    */
  get customer_reader(): Prisma.customer_readerDelegate<ExtArgs>;

  /**
   * `prisma.customer_track`: Exposes CRUD operations for the **customer_track** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customer_tracks
    * const customer_tracks = await prisma.customer_track.findMany()
    * ```
    */
  get customer_track(): Prisma.customer_trackDelegate<ExtArgs>;

  /**
   * `prisma.landing`: Exposes CRUD operations for the **landing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Landings
    * const landings = await prisma.landing.findMany()
    * ```
    */
  get landing(): Prisma.landingDelegate<ExtArgs>;

  /**
   * `prisma.landing_items`: Exposes CRUD operations for the **landing_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Landing_items
    * const landing_items = await prisma.landing_items.findMany()
    * ```
    */
  get landing_items(): Prisma.landing_itemsDelegate<ExtArgs>;

  /**
   * `prisma.midtrx`: Exposes CRUD operations for the **midtrx** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Midtrxes
    * const midtrxes = await prisma.midtrx.findMany()
    * ```
    */
  get midtrx(): Prisma.midtrxDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs>;

  /**
   * `prisma.product_category`: Exposes CRUD operations for the **product_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_categories
    * const product_categories = await prisma.product_category.findMany()
    * ```
    */
  get product_category(): Prisma.product_categoryDelegate<ExtArgs>;

  /**
   * `prisma.t_sales`: Exposes CRUD operations for the **t_sales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more T_sales
    * const t_sales = await prisma.t_sales.findMany()
    * ```
    */
  get t_sales(): Prisma.t_salesDelegate<ExtArgs>;

  /**
   * `prisma.t_sales_download`: Exposes CRUD operations for the **t_sales_download** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more T_sales_downloads
    * const t_sales_downloads = await prisma.t_sales_download.findMany()
    * ```
    */
  get t_sales_download(): Prisma.t_sales_downloadDelegate<ExtArgs>;

  /**
   * `prisma.t_sales_line`: Exposes CRUD operations for the **t_sales_line** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more T_sales_lines
    * const t_sales_lines = await prisma.t_sales_line.findMany()
    * ```
    */
  get t_sales_line(): Prisma.t_sales_lineDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    author: 'author',
    banner: 'banner',
    bundle: 'bundle',
    bundle_category: 'bundle_category',
    bundle_product: 'bundle_product',
    category: 'category',
    customer: 'customer',
    customer_reader: 'customer_reader',
    customer_track: 'customer_track',
    landing: 'landing',
    landing_items: 'landing_items',
    midtrx: 'midtrx',
    product: 'product',
    product_category: 'product_category',
    t_sales: 't_sales',
    t_sales_download: 't_sales_download',
    t_sales_line: 't_sales_line',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "author" | "banner" | "bundle" | "bundle_category" | "bundle_product" | "category" | "customer" | "customer_reader" | "customer_track" | "landing" | "landing_items" | "midtrx" | "product" | "product_category" | "t_sales" | "t_sales_download" | "t_sales_line" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      author: {
        payload: Prisma.$authorPayload<ExtArgs>
        fields: Prisma.authorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.authorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.authorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          findFirst: {
            args: Prisma.authorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.authorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          findMany: {
            args: Prisma.authorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>[]
          }
          create: {
            args: Prisma.authorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          createMany: {
            args: Prisma.authorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.authorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>[]
          }
          delete: {
            args: Prisma.authorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          update: {
            args: Prisma.authorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          deleteMany: {
            args: Prisma.authorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.authorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.authorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authorPayload>
          }
          aggregate: {
            args: Prisma.AuthorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthor>
          }
          groupBy: {
            args: Prisma.authorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthorGroupByOutputType>[]
          }
          count: {
            args: Prisma.authorCountArgs<ExtArgs>
            result: $Utils.Optional<AuthorCountAggregateOutputType> | number
          }
        }
      }
      banner: {
        payload: Prisma.$bannerPayload<ExtArgs>
        fields: Prisma.bannerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bannerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bannerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          findFirst: {
            args: Prisma.bannerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bannerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          findMany: {
            args: Prisma.bannerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>[]
          }
          create: {
            args: Prisma.bannerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          createMany: {
            args: Prisma.bannerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bannerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>[]
          }
          delete: {
            args: Prisma.bannerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          update: {
            args: Prisma.bannerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          deleteMany: {
            args: Prisma.bannerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bannerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bannerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannerPayload>
          }
          aggregate: {
            args: Prisma.BannerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanner>
          }
          groupBy: {
            args: Prisma.bannerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BannerGroupByOutputType>[]
          }
          count: {
            args: Prisma.bannerCountArgs<ExtArgs>
            result: $Utils.Optional<BannerCountAggregateOutputType> | number
          }
        }
      }
      bundle: {
        payload: Prisma.$bundlePayload<ExtArgs>
        fields: Prisma.bundleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bundleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bundleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          findFirst: {
            args: Prisma.bundleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bundleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          findMany: {
            args: Prisma.bundleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>[]
          }
          create: {
            args: Prisma.bundleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          createMany: {
            args: Prisma.bundleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bundleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>[]
          }
          delete: {
            args: Prisma.bundleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          update: {
            args: Prisma.bundleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          deleteMany: {
            args: Prisma.bundleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bundleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bundleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundlePayload>
          }
          aggregate: {
            args: Prisma.BundleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBundle>
          }
          groupBy: {
            args: Prisma.bundleGroupByArgs<ExtArgs>
            result: $Utils.Optional<BundleGroupByOutputType>[]
          }
          count: {
            args: Prisma.bundleCountArgs<ExtArgs>
            result: $Utils.Optional<BundleCountAggregateOutputType> | number
          }
        }
      }
      bundle_category: {
        payload: Prisma.$bundle_categoryPayload<ExtArgs>
        fields: Prisma.bundle_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bundle_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bundle_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          findFirst: {
            args: Prisma.bundle_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bundle_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          findMany: {
            args: Prisma.bundle_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>[]
          }
          create: {
            args: Prisma.bundle_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          createMany: {
            args: Prisma.bundle_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bundle_categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>[]
          }
          delete: {
            args: Prisma.bundle_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          update: {
            args: Prisma.bundle_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          deleteMany: {
            args: Prisma.bundle_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bundle_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bundle_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_categoryPayload>
          }
          aggregate: {
            args: Prisma.Bundle_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBundle_category>
          }
          groupBy: {
            args: Prisma.bundle_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Bundle_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.bundle_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Bundle_categoryCountAggregateOutputType> | number
          }
        }
      }
      bundle_product: {
        payload: Prisma.$bundle_productPayload<ExtArgs>
        fields: Prisma.bundle_productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bundle_productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bundle_productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          findFirst: {
            args: Prisma.bundle_productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bundle_productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          findMany: {
            args: Prisma.bundle_productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>[]
          }
          create: {
            args: Prisma.bundle_productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          createMany: {
            args: Prisma.bundle_productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bundle_productCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>[]
          }
          delete: {
            args: Prisma.bundle_productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          update: {
            args: Prisma.bundle_productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          deleteMany: {
            args: Prisma.bundle_productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bundle_productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bundle_productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bundle_productPayload>
          }
          aggregate: {
            args: Prisma.Bundle_productAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBundle_product>
          }
          groupBy: {
            args: Prisma.bundle_productGroupByArgs<ExtArgs>
            result: $Utils.Optional<Bundle_productGroupByOutputType>[]
          }
          count: {
            args: Prisma.bundle_productCountArgs<ExtArgs>
            result: $Utils.Optional<Bundle_productCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: Prisma.$categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      customer: {
        payload: Prisma.$customerPayload<ExtArgs>
        fields: Prisma.customerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findFirst: {
            args: Prisma.customerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findMany: {
            args: Prisma.customerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          create: {
            args: Prisma.customerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          createMany: {
            args: Prisma.customerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.customerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          delete: {
            args: Prisma.customerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          update: {
            args: Prisma.customerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          deleteMany: {
            args: Prisma.customerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.customerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.customerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.customerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      customer_reader: {
        payload: Prisma.$customer_readerPayload<ExtArgs>
        fields: Prisma.customer_readerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customer_readerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customer_readerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          findFirst: {
            args: Prisma.customer_readerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customer_readerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          findMany: {
            args: Prisma.customer_readerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>[]
          }
          create: {
            args: Prisma.customer_readerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          createMany: {
            args: Prisma.customer_readerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.customer_readerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>[]
          }
          delete: {
            args: Prisma.customer_readerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          update: {
            args: Prisma.customer_readerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          deleteMany: {
            args: Prisma.customer_readerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customer_readerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.customer_readerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_readerPayload>
          }
          aggregate: {
            args: Prisma.Customer_readerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer_reader>
          }
          groupBy: {
            args: Prisma.customer_readerGroupByArgs<ExtArgs>
            result: $Utils.Optional<Customer_readerGroupByOutputType>[]
          }
          count: {
            args: Prisma.customer_readerCountArgs<ExtArgs>
            result: $Utils.Optional<Customer_readerCountAggregateOutputType> | number
          }
        }
      }
      customer_track: {
        payload: Prisma.$customer_trackPayload<ExtArgs>
        fields: Prisma.customer_trackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customer_trackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customer_trackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          findFirst: {
            args: Prisma.customer_trackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customer_trackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          findMany: {
            args: Prisma.customer_trackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>[]
          }
          create: {
            args: Prisma.customer_trackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          createMany: {
            args: Prisma.customer_trackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.customer_trackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>[]
          }
          delete: {
            args: Prisma.customer_trackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          update: {
            args: Prisma.customer_trackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          deleteMany: {
            args: Prisma.customer_trackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customer_trackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.customer_trackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customer_trackPayload>
          }
          aggregate: {
            args: Prisma.Customer_trackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer_track>
          }
          groupBy: {
            args: Prisma.customer_trackGroupByArgs<ExtArgs>
            result: $Utils.Optional<Customer_trackGroupByOutputType>[]
          }
          count: {
            args: Prisma.customer_trackCountArgs<ExtArgs>
            result: $Utils.Optional<Customer_trackCountAggregateOutputType> | number
          }
        }
      }
      landing: {
        payload: Prisma.$landingPayload<ExtArgs>
        fields: Prisma.landingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.landingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.landingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          findFirst: {
            args: Prisma.landingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.landingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          findMany: {
            args: Prisma.landingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>[]
          }
          create: {
            args: Prisma.landingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          createMany: {
            args: Prisma.landingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.landingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>[]
          }
          delete: {
            args: Prisma.landingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          update: {
            args: Prisma.landingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          deleteMany: {
            args: Prisma.landingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.landingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.landingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landingPayload>
          }
          aggregate: {
            args: Prisma.LandingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanding>
          }
          groupBy: {
            args: Prisma.landingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LandingGroupByOutputType>[]
          }
          count: {
            args: Prisma.landingCountArgs<ExtArgs>
            result: $Utils.Optional<LandingCountAggregateOutputType> | number
          }
        }
      }
      landing_items: {
        payload: Prisma.$landing_itemsPayload<ExtArgs>
        fields: Prisma.landing_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.landing_itemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.landing_itemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          findFirst: {
            args: Prisma.landing_itemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.landing_itemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          findMany: {
            args: Prisma.landing_itemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>[]
          }
          create: {
            args: Prisma.landing_itemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          createMany: {
            args: Prisma.landing_itemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.landing_itemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>[]
          }
          delete: {
            args: Prisma.landing_itemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          update: {
            args: Prisma.landing_itemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          deleteMany: {
            args: Prisma.landing_itemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.landing_itemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.landing_itemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$landing_itemsPayload>
          }
          aggregate: {
            args: Prisma.Landing_itemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanding_items>
          }
          groupBy: {
            args: Prisma.landing_itemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Landing_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.landing_itemsCountArgs<ExtArgs>
            result: $Utils.Optional<Landing_itemsCountAggregateOutputType> | number
          }
        }
      }
      midtrx: {
        payload: Prisma.$midtrxPayload<ExtArgs>
        fields: Prisma.midtrxFieldRefs
        operations: {
          findUnique: {
            args: Prisma.midtrxFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.midtrxFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          findFirst: {
            args: Prisma.midtrxFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.midtrxFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          findMany: {
            args: Prisma.midtrxFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>[]
          }
          create: {
            args: Prisma.midtrxCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          createMany: {
            args: Prisma.midtrxCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.midtrxCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>[]
          }
          delete: {
            args: Prisma.midtrxDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          update: {
            args: Prisma.midtrxUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          deleteMany: {
            args: Prisma.midtrxDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.midtrxUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.midtrxUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$midtrxPayload>
          }
          aggregate: {
            args: Prisma.MidtrxAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMidtrx>
          }
          groupBy: {
            args: Prisma.midtrxGroupByArgs<ExtArgs>
            result: $Utils.Optional<MidtrxGroupByOutputType>[]
          }
          count: {
            args: Prisma.midtrxCountArgs<ExtArgs>
            result: $Utils.Optional<MidtrxCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.productCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      product_category: {
        payload: Prisma.$product_categoryPayload<ExtArgs>
        fields: Prisma.product_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          findFirst: {
            args: Prisma.product_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          findMany: {
            args: Prisma.product_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>[]
          }
          create: {
            args: Prisma.product_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          createMany: {
            args: Prisma.product_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.product_categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>[]
          }
          delete: {
            args: Prisma.product_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          update: {
            args: Prisma.product_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          deleteMany: {
            args: Prisma.product_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.product_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.product_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_categoryPayload>
          }
          aggregate: {
            args: Prisma.Product_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct_category>
          }
          groupBy: {
            args: Prisma.product_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Product_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Product_categoryCountAggregateOutputType> | number
          }
        }
      }
      t_sales: {
        payload: Prisma.$t_salesPayload<ExtArgs>
        fields: Prisma.t_salesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.t_salesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.t_salesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          findFirst: {
            args: Prisma.t_salesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.t_salesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          findMany: {
            args: Prisma.t_salesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>[]
          }
          create: {
            args: Prisma.t_salesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          createMany: {
            args: Prisma.t_salesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.t_salesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>[]
          }
          delete: {
            args: Prisma.t_salesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          update: {
            args: Prisma.t_salesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          deleteMany: {
            args: Prisma.t_salesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.t_salesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.t_salesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_salesPayload>
          }
          aggregate: {
            args: Prisma.T_salesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateT_sales>
          }
          groupBy: {
            args: Prisma.t_salesGroupByArgs<ExtArgs>
            result: $Utils.Optional<T_salesGroupByOutputType>[]
          }
          count: {
            args: Prisma.t_salesCountArgs<ExtArgs>
            result: $Utils.Optional<T_salesCountAggregateOutputType> | number
          }
        }
      }
      t_sales_download: {
        payload: Prisma.$t_sales_downloadPayload<ExtArgs>
        fields: Prisma.t_sales_downloadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.t_sales_downloadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.t_sales_downloadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          findFirst: {
            args: Prisma.t_sales_downloadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.t_sales_downloadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          findMany: {
            args: Prisma.t_sales_downloadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>[]
          }
          create: {
            args: Prisma.t_sales_downloadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          createMany: {
            args: Prisma.t_sales_downloadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.t_sales_downloadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>[]
          }
          delete: {
            args: Prisma.t_sales_downloadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          update: {
            args: Prisma.t_sales_downloadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          deleteMany: {
            args: Prisma.t_sales_downloadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.t_sales_downloadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.t_sales_downloadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_downloadPayload>
          }
          aggregate: {
            args: Prisma.T_sales_downloadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateT_sales_download>
          }
          groupBy: {
            args: Prisma.t_sales_downloadGroupByArgs<ExtArgs>
            result: $Utils.Optional<T_sales_downloadGroupByOutputType>[]
          }
          count: {
            args: Prisma.t_sales_downloadCountArgs<ExtArgs>
            result: $Utils.Optional<T_sales_downloadCountAggregateOutputType> | number
          }
        }
      }
      t_sales_line: {
        payload: Prisma.$t_sales_linePayload<ExtArgs>
        fields: Prisma.t_sales_lineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.t_sales_lineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.t_sales_lineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          findFirst: {
            args: Prisma.t_sales_lineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.t_sales_lineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          findMany: {
            args: Prisma.t_sales_lineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>[]
          }
          create: {
            args: Prisma.t_sales_lineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          createMany: {
            args: Prisma.t_sales_lineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.t_sales_lineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>[]
          }
          delete: {
            args: Prisma.t_sales_lineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          update: {
            args: Prisma.t_sales_lineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          deleteMany: {
            args: Prisma.t_sales_lineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.t_sales_lineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.t_sales_lineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$t_sales_linePayload>
          }
          aggregate: {
            args: Prisma.T_sales_lineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateT_sales_line>
          }
          groupBy: {
            args: Prisma.t_sales_lineGroupByArgs<ExtArgs>
            result: $Utils.Optional<T_sales_lineGroupByOutputType>[]
          }
          count: {
            args: Prisma.t_sales_lineCountArgs<ExtArgs>
            result: $Utils.Optional<T_sales_lineCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AuthorCountOutputType
   */

  export type AuthorCountOutputType = {
    product: number
  }

  export type AuthorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | AuthorCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorCountOutputType
     */
    select?: AuthorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }


  /**
   * Count Type BundleCountOutputType
   */

  export type BundleCountOutputType = {
    bundle_category: number
    bundle_product: number
    t_sales_line: number
  }

  export type BundleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_category?: boolean | BundleCountOutputTypeCountBundle_categoryArgs
    bundle_product?: boolean | BundleCountOutputTypeCountBundle_productArgs
    t_sales_line?: boolean | BundleCountOutputTypeCountT_sales_lineArgs
  }

  // Custom InputTypes
  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BundleCountOutputType
     */
    select?: BundleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeCountBundle_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_categoryWhereInput
  }

  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeCountBundle_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_productWhereInput
  }

  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeCountT_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_lineWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    bundle_category: number
    other_category: number
    product_category: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_category?: boolean | CategoryCountOutputTypeCountBundle_categoryArgs
    other_category?: boolean | CategoryCountOutputTypeCountOther_categoryArgs
    product_category?: boolean | CategoryCountOutputTypeCountProduct_categoryArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountBundle_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_categoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountOther_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProduct_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_categoryWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    customer_reader: number
    t_sales: number
    t_sales_download: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer_reader?: boolean | CustomerCountOutputTypeCountCustomer_readerArgs
    t_sales?: boolean | CustomerCountOutputTypeCountT_salesArgs
    t_sales_download?: boolean | CustomerCountOutputTypeCountT_sales_downloadArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCustomer_readerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customer_readerWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountT_salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_salesWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountT_sales_downloadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_downloadWhereInput
  }


  /**
   * Count Type Customer_trackCountOutputType
   */

  export type Customer_trackCountOutputType = {
    other_customer_track: number
  }

  export type Customer_trackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    other_customer_track?: boolean | Customer_trackCountOutputTypeCountOther_customer_trackArgs
  }

  // Custom InputTypes
  /**
   * Customer_trackCountOutputType without action
   */
  export type Customer_trackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer_trackCountOutputType
     */
    select?: Customer_trackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Customer_trackCountOutputType without action
   */
  export type Customer_trackCountOutputTypeCountOther_customer_trackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customer_trackWhereInput
  }


  /**
   * Count Type LandingCountOutputType
   */

  export type LandingCountOutputType = {
    landing_items: number
  }

  export type LandingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    landing_items?: boolean | LandingCountOutputTypeCountLanding_itemsArgs
  }

  // Custom InputTypes
  /**
   * LandingCountOutputType without action
   */
  export type LandingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LandingCountOutputType
     */
    select?: LandingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LandingCountOutputType without action
   */
  export type LandingCountOutputTypeCountLanding_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: landing_itemsWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    bundle_product: number
    customer_reader: number
    product_category: number
    t_sales_download: number
    t_sales_line: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_product?: boolean | ProductCountOutputTypeCountBundle_productArgs
    customer_reader?: boolean | ProductCountOutputTypeCountCustomer_readerArgs
    product_category?: boolean | ProductCountOutputTypeCountProduct_categoryArgs
    t_sales_download?: boolean | ProductCountOutputTypeCountT_sales_downloadArgs
    t_sales_line?: boolean | ProductCountOutputTypeCountT_sales_lineArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBundle_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_productWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCustomer_readerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customer_readerWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProduct_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_categoryWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountT_sales_downloadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_downloadWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountT_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_lineWhereInput
  }


  /**
   * Count Type T_salesCountOutputType
   */

  export type T_salesCountOutputType = {
    t_sales_line: number
  }

  export type T_salesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    t_sales_line?: boolean | T_salesCountOutputTypeCountT_sales_lineArgs
  }

  // Custom InputTypes
  /**
   * T_salesCountOutputType without action
   */
  export type T_salesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the T_salesCountOutputType
     */
    select?: T_salesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * T_salesCountOutputType without action
   */
  export type T_salesCountOutputTypeCountT_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_lineWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    author: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserCountOutputTypeCountAuthorArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: authorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model author
   */

  export type AggregateAuthor = {
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorMinAggregateOutputType = {
    id: string | null
    id_user: string | null
    name: string | null
  }

  export type AuthorMaxAggregateOutputType = {
    id: string | null
    id_user: string | null
    name: string | null
  }

  export type AuthorCountAggregateOutputType = {
    id: number
    id_user: number
    name: number
    _all: number
  }


  export type AuthorMinAggregateInputType = {
    id?: true
    id_user?: true
    name?: true
  }

  export type AuthorMaxAggregateInputType = {
    id?: true
    id_user?: true
    name?: true
  }

  export type AuthorCountAggregateInputType = {
    id?: true
    id_user?: true
    name?: true
    _all?: true
  }

  export type AuthorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which author to aggregate.
     */
    where?: authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: authorOrderByWithRelationInput | authorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authors
    **/
    _count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }




  export type authorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: authorWhereInput
    orderBy?: authorOrderByWithAggregationInput | authorOrderByWithAggregationInput[]
    by: AuthorScalarFieldEnum[] | AuthorScalarFieldEnum
    having?: authorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorCountAggregateInputType | true
    _min?: AuthorMinAggregateInputType
    _max?: AuthorMaxAggregateInputType
  }

  export type AuthorGroupByOutputType = {
    id: string
    id_user: string
    name: string
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  type GetAuthorGroupByPayload<T extends authorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorGroupByOutputType[P]>
        }
      >
    >


  export type authorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    name?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | author$productArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["author"]>

  export type authorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    name?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["author"]>

  export type authorSelectScalar = {
    id?: boolean
    id_user?: boolean
    name?: boolean
  }

  export type authorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    product?: boolean | author$productArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type authorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $authorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "author"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_user: string
      name: string
    }, ExtArgs["result"]["author"]>
    composites: {}
  }

  type authorGetPayload<S extends boolean | null | undefined | authorDefaultArgs> = $Result.GetResult<Prisma.$authorPayload, S>

  type authorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<authorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuthorCountAggregateInputType | true
    }

  export interface authorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['author'], meta: { name: 'author' } }
    /**
     * Find zero or one Author that matches the filter.
     * @param {authorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends authorFindUniqueArgs>(args: SelectSubset<T, authorFindUniqueArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Author that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {authorFindUniqueOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends authorFindUniqueOrThrowArgs>(args: SelectSubset<T, authorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends authorFindFirstArgs>(args?: SelectSubset<T, authorFindFirstArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Author that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorFindFirstOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends authorFindFirstOrThrowArgs>(args?: SelectSubset<T, authorFindFirstOrThrowArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends authorFindManyArgs>(args?: SelectSubset<T, authorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Author.
     * @param {authorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
     */
    create<T extends authorCreateArgs>(args: SelectSubset<T, authorCreateArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Authors.
     * @param {authorCreateManyArgs} args - Arguments to create many Authors.
     * @example
     * // Create many Authors
     * const author = await prisma.author.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends authorCreateManyArgs>(args?: SelectSubset<T, authorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Authors and returns the data saved in the database.
     * @param {authorCreateManyAndReturnArgs} args - Arguments to create many Authors.
     * @example
     * // Create many Authors
     * const author = await prisma.author.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Authors and only return the `id`
     * const authorWithIdOnly = await prisma.author.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends authorCreateManyAndReturnArgs>(args?: SelectSubset<T, authorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Author.
     * @param {authorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
     */
    delete<T extends authorDeleteArgs>(args: SelectSubset<T, authorDeleteArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Author.
     * @param {authorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends authorUpdateArgs>(args: SelectSubset<T, authorUpdateArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Authors.
     * @param {authorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends authorDeleteManyArgs>(args?: SelectSubset<T, authorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends authorUpdateManyArgs>(args: SelectSubset<T, authorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {authorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
     */
    upsert<T extends authorUpsertArgs>(args: SelectSubset<T, authorUpsertArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends authorCountArgs>(
      args?: Subset<T, authorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): Prisma.PrismaPromise<GetAuthorAggregateType<T>>

    /**
     * Group by Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends authorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: authorGroupByArgs['orderBy'] }
        : { orderBy?: authorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, authorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the author model
   */
  readonly fields: authorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__authorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends author$productArgs<ExtArgs> = {}>(args?: Subset<T, author$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the author model
   */ 
  interface authorFieldRefs {
    readonly id: FieldRef<"author", 'String'>
    readonly id_user: FieldRef<"author", 'String'>
    readonly name: FieldRef<"author", 'String'>
  }
    

  // Custom InputTypes
  /**
   * author findUnique
   */
  export type authorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter, which author to fetch.
     */
    where: authorWhereUniqueInput
  }

  /**
   * author findUniqueOrThrow
   */
  export type authorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter, which author to fetch.
     */
    where: authorWhereUniqueInput
  }

  /**
   * author findFirst
   */
  export type authorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter, which author to fetch.
     */
    where?: authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: authorOrderByWithRelationInput | authorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authors.
     */
    cursor?: authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * author findFirstOrThrow
   */
  export type authorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter, which author to fetch.
     */
    where?: authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: authorOrderByWithRelationInput | authorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authors.
     */
    cursor?: authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * author findMany
   */
  export type authorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter, which authors to fetch.
     */
    where?: authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     */
    orderBy?: authorOrderByWithRelationInput | authorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authors.
     */
    cursor?: authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     */
    skip?: number
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * author create
   */
  export type authorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * The data needed to create a author.
     */
    data: XOR<authorCreateInput, authorUncheckedCreateInput>
  }

  /**
   * author createMany
   */
  export type authorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many authors.
     */
    data: authorCreateManyInput | authorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * author createManyAndReturn
   */
  export type authorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many authors.
     */
    data: authorCreateManyInput | authorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * author update
   */
  export type authorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * The data needed to update a author.
     */
    data: XOR<authorUpdateInput, authorUncheckedUpdateInput>
    /**
     * Choose, which author to update.
     */
    where: authorWhereUniqueInput
  }

  /**
   * author updateMany
   */
  export type authorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update authors.
     */
    data: XOR<authorUpdateManyMutationInput, authorUncheckedUpdateManyInput>
    /**
     * Filter which authors to update
     */
    where?: authorWhereInput
  }

  /**
   * author upsert
   */
  export type authorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * The filter to search for the author to update in case it exists.
     */
    where: authorWhereUniqueInput
    /**
     * In case the author found by the `where` argument doesn't exist, create a new author with this data.
     */
    create: XOR<authorCreateInput, authorUncheckedCreateInput>
    /**
     * In case the author was found with the provided `where` argument, update it with this data.
     */
    update: XOR<authorUpdateInput, authorUncheckedUpdateInput>
  }

  /**
   * author delete
   */
  export type authorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    /**
     * Filter which author to delete.
     */
    where: authorWhereUniqueInput
  }

  /**
   * author deleteMany
   */
  export type authorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which authors to delete
     */
    where?: authorWhereInput
  }

  /**
   * author.product
   */
  export type author$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * author without action
   */
  export type authorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
  }


  /**
   * Model banner
   */

  export type AggregateBanner = {
    _count: BannerCountAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  export type BannerMinAggregateOutputType = {
    id: string | null
    title: string | null
    banner_file: string | null
    status: string | null
    deleted_at: Date | null
    link: string | null
  }

  export type BannerMaxAggregateOutputType = {
    id: string | null
    title: string | null
    banner_file: string | null
    status: string | null
    deleted_at: Date | null
    link: string | null
  }

  export type BannerCountAggregateOutputType = {
    id: number
    title: number
    banner_file: number
    status: number
    deleted_at: number
    link: number
    _all: number
  }


  export type BannerMinAggregateInputType = {
    id?: true
    title?: true
    banner_file?: true
    status?: true
    deleted_at?: true
    link?: true
  }

  export type BannerMaxAggregateInputType = {
    id?: true
    title?: true
    banner_file?: true
    status?: true
    deleted_at?: true
    link?: true
  }

  export type BannerCountAggregateInputType = {
    id?: true
    title?: true
    banner_file?: true
    status?: true
    deleted_at?: true
    link?: true
    _all?: true
  }

  export type BannerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banner to aggregate.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned banners
    **/
    _count?: true | BannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannerMaxAggregateInputType
  }

  export type GetBannerAggregateType<T extends BannerAggregateArgs> = {
        [P in keyof T & keyof AggregateBanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanner[P]>
      : GetScalarType<T[P], AggregateBanner[P]>
  }




  export type bannerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bannerWhereInput
    orderBy?: bannerOrderByWithAggregationInput | bannerOrderByWithAggregationInput[]
    by: BannerScalarFieldEnum[] | BannerScalarFieldEnum
    having?: bannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannerCountAggregateInputType | true
    _min?: BannerMinAggregateInputType
    _max?: BannerMaxAggregateInputType
  }

  export type BannerGroupByOutputType = {
    id: string
    title: string
    banner_file: string
    status: string | null
    deleted_at: Date | null
    link: string | null
    _count: BannerCountAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  type GetBannerGroupByPayload<T extends bannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannerGroupByOutputType[P]>
            : GetScalarType<T[P], BannerGroupByOutputType[P]>
        }
      >
    >


  export type bannerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    banner_file?: boolean
    status?: boolean
    deleted_at?: boolean
    link?: boolean
  }, ExtArgs["result"]["banner"]>

  export type bannerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    banner_file?: boolean
    status?: boolean
    deleted_at?: boolean
    link?: boolean
  }, ExtArgs["result"]["banner"]>

  export type bannerSelectScalar = {
    id?: boolean
    title?: boolean
    banner_file?: boolean
    status?: boolean
    deleted_at?: boolean
    link?: boolean
  }


  export type $bannerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "banner"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      banner_file: string
      status: string | null
      deleted_at: Date | null
      link: string | null
    }, ExtArgs["result"]["banner"]>
    composites: {}
  }

  type bannerGetPayload<S extends boolean | null | undefined | bannerDefaultArgs> = $Result.GetResult<Prisma.$bannerPayload, S>

  type bannerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bannerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BannerCountAggregateInputType | true
    }

  export interface bannerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['banner'], meta: { name: 'banner' } }
    /**
     * Find zero or one Banner that matches the filter.
     * @param {bannerFindUniqueArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bannerFindUniqueArgs>(args: SelectSubset<T, bannerFindUniqueArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Banner that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bannerFindUniqueOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bannerFindUniqueOrThrowArgs>(args: SelectSubset<T, bannerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Banner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bannerFindFirstArgs>(args?: SelectSubset<T, bannerFindFirstArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Banner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bannerFindFirstOrThrowArgs>(args?: SelectSubset<T, bannerFindFirstOrThrowArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banner.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannerWithIdOnly = await prisma.banner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bannerFindManyArgs>(args?: SelectSubset<T, bannerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Banner.
     * @param {bannerCreateArgs} args - Arguments to create a Banner.
     * @example
     * // Create one Banner
     * const Banner = await prisma.banner.create({
     *   data: {
     *     // ... data to create a Banner
     *   }
     * })
     * 
     */
    create<T extends bannerCreateArgs>(args: SelectSubset<T, bannerCreateArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Banners.
     * @param {bannerCreateManyArgs} args - Arguments to create many Banners.
     * @example
     * // Create many Banners
     * const banner = await prisma.banner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bannerCreateManyArgs>(args?: SelectSubset<T, bannerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Banners and returns the data saved in the database.
     * @param {bannerCreateManyAndReturnArgs} args - Arguments to create many Banners.
     * @example
     * // Create many Banners
     * const banner = await prisma.banner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Banners and only return the `id`
     * const bannerWithIdOnly = await prisma.banner.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bannerCreateManyAndReturnArgs>(args?: SelectSubset<T, bannerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Banner.
     * @param {bannerDeleteArgs} args - Arguments to delete one Banner.
     * @example
     * // Delete one Banner
     * const Banner = await prisma.banner.delete({
     *   where: {
     *     // ... filter to delete one Banner
     *   }
     * })
     * 
     */
    delete<T extends bannerDeleteArgs>(args: SelectSubset<T, bannerDeleteArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Banner.
     * @param {bannerUpdateArgs} args - Arguments to update one Banner.
     * @example
     * // Update one Banner
     * const banner = await prisma.banner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bannerUpdateArgs>(args: SelectSubset<T, bannerUpdateArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Banners.
     * @param {bannerDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bannerDeleteManyArgs>(args?: SelectSubset<T, bannerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banner = await prisma.banner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bannerUpdateManyArgs>(args: SelectSubset<T, bannerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banner.
     * @param {bannerUpsertArgs} args - Arguments to update or create a Banner.
     * @example
     * // Update or create a Banner
     * const banner = await prisma.banner.upsert({
     *   create: {
     *     // ... data to create a Banner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banner we want to update
     *   }
     * })
     */
    upsert<T extends bannerUpsertArgs>(args: SelectSubset<T, bannerUpsertArgs<ExtArgs>>): Prisma__bannerClient<$Result.GetResult<Prisma.$bannerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banner.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends bannerCountArgs>(
      args?: Subset<T, bannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannerAggregateArgs>(args: Subset<T, BannerAggregateArgs>): Prisma.PrismaPromise<GetBannerAggregateType<T>>

    /**
     * Group by Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bannerGroupByArgs['orderBy'] }
        : { orderBy?: bannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the banner model
   */
  readonly fields: bannerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for banner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bannerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the banner model
   */ 
  interface bannerFieldRefs {
    readonly id: FieldRef<"banner", 'String'>
    readonly title: FieldRef<"banner", 'String'>
    readonly banner_file: FieldRef<"banner", 'String'>
    readonly status: FieldRef<"banner", 'String'>
    readonly deleted_at: FieldRef<"banner", 'DateTime'>
    readonly link: FieldRef<"banner", 'String'>
  }
    

  // Custom InputTypes
  /**
   * banner findUnique
   */
  export type bannerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }

  /**
   * banner findUniqueOrThrow
   */
  export type bannerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }

  /**
   * banner findFirst
   */
  export type bannerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }

  /**
   * banner findFirstOrThrow
   */
  export type bannerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }

  /**
   * banner findMany
   */
  export type bannerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }

  /**
   * banner create
   */
  export type bannerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The data needed to create a banner.
     */
    data: XOR<bannerCreateInput, bannerUncheckedCreateInput>
  }

  /**
   * banner createMany
   */
  export type bannerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many banners.
     */
    data: bannerCreateManyInput | bannerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * banner createManyAndReturn
   */
  export type bannerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many banners.
     */
    data: bannerCreateManyInput | bannerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * banner update
   */
  export type bannerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The data needed to update a banner.
     */
    data: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
    /**
     * Choose, which banner to update.
     */
    where: bannerWhereUniqueInput
  }

  /**
   * banner updateMany
   */
  export type bannerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update banners.
     */
    data: XOR<bannerUpdateManyMutationInput, bannerUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannerWhereInput
  }

  /**
   * banner upsert
   */
  export type bannerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * The filter to search for the banner to update in case it exists.
     */
    where: bannerWhereUniqueInput
    /**
     * In case the banner found by the `where` argument doesn't exist, create a new banner with this data.
     */
    create: XOR<bannerCreateInput, bannerUncheckedCreateInput>
    /**
     * In case the banner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
  }

  /**
   * banner delete
   */
  export type bannerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Filter which banner to delete.
     */
    where: bannerWhereUniqueInput
  }

  /**
   * banner deleteMany
   */
  export type bannerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to delete
     */
    where?: bannerWhereInput
  }

  /**
   * banner without action
   */
  export type bannerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
  }


  /**
   * Model bundle
   */

  export type AggregateBundle = {
    _count: BundleCountAggregateOutputType | null
    _avg: BundleAvgAggregateOutputType | null
    _sum: BundleSumAggregateOutputType | null
    _min: BundleMinAggregateOutputType | null
    _max: BundleMaxAggregateOutputType | null
  }

  export type BundleAvgAggregateOutputType = {
    strike_price: Decimal | null
    real_price: Decimal | null
  }

  export type BundleSumAggregateOutputType = {
    strike_price: Decimal | null
    real_price: Decimal | null
  }

  export type BundleMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    strike_price: Decimal | null
    real_price: Decimal | null
    currency: string | null
    desc: string | null
    deleted_at: Date | null
    status: string | null
    img_file: string | null
    cover: string | null
    sku: string | null
  }

  export type BundleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    strike_price: Decimal | null
    real_price: Decimal | null
    currency: string | null
    desc: string | null
    deleted_at: Date | null
    status: string | null
    img_file: string | null
    cover: string | null
    sku: string | null
  }

  export type BundleCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    strike_price: number
    real_price: number
    currency: number
    desc: number
    info: number
    deleted_at: number
    status: number
    img_file: number
    cover: number
    sku: number
    _all: number
  }


  export type BundleAvgAggregateInputType = {
    strike_price?: true
    real_price?: true
  }

  export type BundleSumAggregateInputType = {
    strike_price?: true
    real_price?: true
  }

  export type BundleMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    currency?: true
    desc?: true
    deleted_at?: true
    status?: true
    img_file?: true
    cover?: true
    sku?: true
  }

  export type BundleMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    currency?: true
    desc?: true
    deleted_at?: true
    status?: true
    img_file?: true
    cover?: true
    sku?: true
  }

  export type BundleCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    currency?: true
    desc?: true
    info?: true
    deleted_at?: true
    status?: true
    img_file?: true
    cover?: true
    sku?: true
    _all?: true
  }

  export type BundleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundle to aggregate.
     */
    where?: bundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundles to fetch.
     */
    orderBy?: bundleOrderByWithRelationInput | bundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bundles
    **/
    _count?: true | BundleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BundleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BundleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BundleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BundleMaxAggregateInputType
  }

  export type GetBundleAggregateType<T extends BundleAggregateArgs> = {
        [P in keyof T & keyof AggregateBundle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBundle[P]>
      : GetScalarType<T[P], AggregateBundle[P]>
  }




  export type bundleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundleWhereInput
    orderBy?: bundleOrderByWithAggregationInput | bundleOrderByWithAggregationInput[]
    by: BundleScalarFieldEnum[] | BundleScalarFieldEnum
    having?: bundleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BundleCountAggregateInputType | true
    _avg?: BundleAvgAggregateInputType
    _sum?: BundleSumAggregateInputType
    _min?: BundleMinAggregateInputType
    _max?: BundleMaxAggregateInputType
  }

  export type BundleGroupByOutputType = {
    id: string
    name: string
    slug: string
    strike_price: Decimal | null
    real_price: Decimal
    currency: string
    desc: string
    info: JsonValue
    deleted_at: Date | null
    status: string
    img_file: string
    cover: string
    sku: string
    _count: BundleCountAggregateOutputType | null
    _avg: BundleAvgAggregateOutputType | null
    _sum: BundleSumAggregateOutputType | null
    _min: BundleMinAggregateOutputType | null
    _max: BundleMaxAggregateOutputType | null
  }

  type GetBundleGroupByPayload<T extends bundleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BundleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BundleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BundleGroupByOutputType[P]>
            : GetScalarType<T[P], BundleGroupByOutputType[P]>
        }
      >
    >


  export type bundleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    currency?: boolean
    desc?: boolean
    info?: boolean
    deleted_at?: boolean
    status?: boolean
    img_file?: boolean
    cover?: boolean
    sku?: boolean
    bundle_category?: boolean | bundle$bundle_categoryArgs<ExtArgs>
    bundle_product?: boolean | bundle$bundle_productArgs<ExtArgs>
    t_sales_line?: boolean | bundle$t_sales_lineArgs<ExtArgs>
    _count?: boolean | BundleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle"]>

  export type bundleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    currency?: boolean
    desc?: boolean
    info?: boolean
    deleted_at?: boolean
    status?: boolean
    img_file?: boolean
    cover?: boolean
    sku?: boolean
  }, ExtArgs["result"]["bundle"]>

  export type bundleSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    currency?: boolean
    desc?: boolean
    info?: boolean
    deleted_at?: boolean
    status?: boolean
    img_file?: boolean
    cover?: boolean
    sku?: boolean
  }

  export type bundleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_category?: boolean | bundle$bundle_categoryArgs<ExtArgs>
    bundle_product?: boolean | bundle$bundle_productArgs<ExtArgs>
    t_sales_line?: boolean | bundle$t_sales_lineArgs<ExtArgs>
    _count?: boolean | BundleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type bundleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $bundlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bundle"
    objects: {
      bundle_category: Prisma.$bundle_categoryPayload<ExtArgs>[]
      bundle_product: Prisma.$bundle_productPayload<ExtArgs>[]
      t_sales_line: Prisma.$t_sales_linePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      strike_price: Prisma.Decimal | null
      real_price: Prisma.Decimal
      currency: string
      desc: string
      info: Prisma.JsonValue
      deleted_at: Date | null
      status: string
      img_file: string
      cover: string
      sku: string
    }, ExtArgs["result"]["bundle"]>
    composites: {}
  }

  type bundleGetPayload<S extends boolean | null | undefined | bundleDefaultArgs> = $Result.GetResult<Prisma.$bundlePayload, S>

  type bundleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bundleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BundleCountAggregateInputType | true
    }

  export interface bundleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bundle'], meta: { name: 'bundle' } }
    /**
     * Find zero or one Bundle that matches the filter.
     * @param {bundleFindUniqueArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bundleFindUniqueArgs>(args: SelectSubset<T, bundleFindUniqueArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bundle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bundleFindUniqueOrThrowArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bundleFindUniqueOrThrowArgs>(args: SelectSubset<T, bundleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bundle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleFindFirstArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bundleFindFirstArgs>(args?: SelectSubset<T, bundleFindFirstArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bundle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleFindFirstOrThrowArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bundleFindFirstOrThrowArgs>(args?: SelectSubset<T, bundleFindFirstOrThrowArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bundles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bundles
     * const bundles = await prisma.bundle.findMany()
     * 
     * // Get first 10 Bundles
     * const bundles = await prisma.bundle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bundleWithIdOnly = await prisma.bundle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bundleFindManyArgs>(args?: SelectSubset<T, bundleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bundle.
     * @param {bundleCreateArgs} args - Arguments to create a Bundle.
     * @example
     * // Create one Bundle
     * const Bundle = await prisma.bundle.create({
     *   data: {
     *     // ... data to create a Bundle
     *   }
     * })
     * 
     */
    create<T extends bundleCreateArgs>(args: SelectSubset<T, bundleCreateArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bundles.
     * @param {bundleCreateManyArgs} args - Arguments to create many Bundles.
     * @example
     * // Create many Bundles
     * const bundle = await prisma.bundle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bundleCreateManyArgs>(args?: SelectSubset<T, bundleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bundles and returns the data saved in the database.
     * @param {bundleCreateManyAndReturnArgs} args - Arguments to create many Bundles.
     * @example
     * // Create many Bundles
     * const bundle = await prisma.bundle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bundles and only return the `id`
     * const bundleWithIdOnly = await prisma.bundle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bundleCreateManyAndReturnArgs>(args?: SelectSubset<T, bundleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Bundle.
     * @param {bundleDeleteArgs} args - Arguments to delete one Bundle.
     * @example
     * // Delete one Bundle
     * const Bundle = await prisma.bundle.delete({
     *   where: {
     *     // ... filter to delete one Bundle
     *   }
     * })
     * 
     */
    delete<T extends bundleDeleteArgs>(args: SelectSubset<T, bundleDeleteArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bundle.
     * @param {bundleUpdateArgs} args - Arguments to update one Bundle.
     * @example
     * // Update one Bundle
     * const bundle = await prisma.bundle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bundleUpdateArgs>(args: SelectSubset<T, bundleUpdateArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bundles.
     * @param {bundleDeleteManyArgs} args - Arguments to filter Bundles to delete.
     * @example
     * // Delete a few Bundles
     * const { count } = await prisma.bundle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bundleDeleteManyArgs>(args?: SelectSubset<T, bundleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bundles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bundles
     * const bundle = await prisma.bundle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bundleUpdateManyArgs>(args: SelectSubset<T, bundleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bundle.
     * @param {bundleUpsertArgs} args - Arguments to update or create a Bundle.
     * @example
     * // Update or create a Bundle
     * const bundle = await prisma.bundle.upsert({
     *   create: {
     *     // ... data to create a Bundle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bundle we want to update
     *   }
     * })
     */
    upsert<T extends bundleUpsertArgs>(args: SelectSubset<T, bundleUpsertArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bundles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleCountArgs} args - Arguments to filter Bundles to count.
     * @example
     * // Count the number of Bundles
     * const count = await prisma.bundle.count({
     *   where: {
     *     // ... the filter for the Bundles we want to count
     *   }
     * })
    **/
    count<T extends bundleCountArgs>(
      args?: Subset<T, bundleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BundleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bundle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BundleAggregateArgs>(args: Subset<T, BundleAggregateArgs>): Prisma.PrismaPromise<GetBundleAggregateType<T>>

    /**
     * Group by Bundle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bundleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bundleGroupByArgs['orderBy'] }
        : { orderBy?: bundleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bundleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBundleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bundle model
   */
  readonly fields: bundleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bundle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bundleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle_category<T extends bundle$bundle_categoryArgs<ExtArgs> = {}>(args?: Subset<T, bundle$bundle_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findMany"> | Null>
    bundle_product<T extends bundle$bundle_productArgs<ExtArgs> = {}>(args?: Subset<T, bundle$bundle_productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findMany"> | Null>
    t_sales_line<T extends bundle$t_sales_lineArgs<ExtArgs> = {}>(args?: Subset<T, bundle$t_sales_lineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bundle model
   */ 
  interface bundleFieldRefs {
    readonly id: FieldRef<"bundle", 'String'>
    readonly name: FieldRef<"bundle", 'String'>
    readonly slug: FieldRef<"bundle", 'String'>
    readonly strike_price: FieldRef<"bundle", 'Decimal'>
    readonly real_price: FieldRef<"bundle", 'Decimal'>
    readonly currency: FieldRef<"bundle", 'String'>
    readonly desc: FieldRef<"bundle", 'String'>
    readonly info: FieldRef<"bundle", 'Json'>
    readonly deleted_at: FieldRef<"bundle", 'DateTime'>
    readonly status: FieldRef<"bundle", 'String'>
    readonly img_file: FieldRef<"bundle", 'String'>
    readonly cover: FieldRef<"bundle", 'String'>
    readonly sku: FieldRef<"bundle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * bundle findUnique
   */
  export type bundleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter, which bundle to fetch.
     */
    where: bundleWhereUniqueInput
  }

  /**
   * bundle findUniqueOrThrow
   */
  export type bundleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter, which bundle to fetch.
     */
    where: bundleWhereUniqueInput
  }

  /**
   * bundle findFirst
   */
  export type bundleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter, which bundle to fetch.
     */
    where?: bundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundles to fetch.
     */
    orderBy?: bundleOrderByWithRelationInput | bundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundles.
     */
    cursor?: bundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundles.
     */
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * bundle findFirstOrThrow
   */
  export type bundleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter, which bundle to fetch.
     */
    where?: bundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundles to fetch.
     */
    orderBy?: bundleOrderByWithRelationInput | bundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundles.
     */
    cursor?: bundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundles.
     */
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * bundle findMany
   */
  export type bundleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter, which bundles to fetch.
     */
    where?: bundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundles to fetch.
     */
    orderBy?: bundleOrderByWithRelationInput | bundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bundles.
     */
    cursor?: bundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundles.
     */
    skip?: number
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * bundle create
   */
  export type bundleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * The data needed to create a bundle.
     */
    data: XOR<bundleCreateInput, bundleUncheckedCreateInput>
  }

  /**
   * bundle createMany
   */
  export type bundleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bundles.
     */
    data: bundleCreateManyInput | bundleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bundle createManyAndReturn
   */
  export type bundleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many bundles.
     */
    data: bundleCreateManyInput | bundleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bundle update
   */
  export type bundleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * The data needed to update a bundle.
     */
    data: XOR<bundleUpdateInput, bundleUncheckedUpdateInput>
    /**
     * Choose, which bundle to update.
     */
    where: bundleWhereUniqueInput
  }

  /**
   * bundle updateMany
   */
  export type bundleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bundles.
     */
    data: XOR<bundleUpdateManyMutationInput, bundleUncheckedUpdateManyInput>
    /**
     * Filter which bundles to update
     */
    where?: bundleWhereInput
  }

  /**
   * bundle upsert
   */
  export type bundleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * The filter to search for the bundle to update in case it exists.
     */
    where: bundleWhereUniqueInput
    /**
     * In case the bundle found by the `where` argument doesn't exist, create a new bundle with this data.
     */
    create: XOR<bundleCreateInput, bundleUncheckedCreateInput>
    /**
     * In case the bundle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bundleUpdateInput, bundleUncheckedUpdateInput>
  }

  /**
   * bundle delete
   */
  export type bundleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    /**
     * Filter which bundle to delete.
     */
    where: bundleWhereUniqueInput
  }

  /**
   * bundle deleteMany
   */
  export type bundleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundles to delete
     */
    where?: bundleWhereInput
  }

  /**
   * bundle.bundle_category
   */
  export type bundle$bundle_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    where?: bundle_categoryWhereInput
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    cursor?: bundle_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Bundle_categoryScalarFieldEnum | Bundle_categoryScalarFieldEnum[]
  }

  /**
   * bundle.bundle_product
   */
  export type bundle$bundle_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    where?: bundle_productWhereInput
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    cursor?: bundle_productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Bundle_productScalarFieldEnum | Bundle_productScalarFieldEnum[]
  }

  /**
   * bundle.t_sales_line
   */
  export type bundle$t_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    where?: t_sales_lineWhereInput
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    cursor?: t_sales_lineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * bundle without action
   */
  export type bundleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
  }


  /**
   * Model bundle_category
   */

  export type AggregateBundle_category = {
    _count: Bundle_categoryCountAggregateOutputType | null
    _min: Bundle_categoryMinAggregateOutputType | null
    _max: Bundle_categoryMaxAggregateOutputType | null
  }

  export type Bundle_categoryMinAggregateOutputType = {
    id: string | null
    id_category: string | null
    id_bundle: string | null
  }

  export type Bundle_categoryMaxAggregateOutputType = {
    id: string | null
    id_category: string | null
    id_bundle: string | null
  }

  export type Bundle_categoryCountAggregateOutputType = {
    id: number
    id_category: number
    id_bundle: number
    _all: number
  }


  export type Bundle_categoryMinAggregateInputType = {
    id?: true
    id_category?: true
    id_bundle?: true
  }

  export type Bundle_categoryMaxAggregateInputType = {
    id?: true
    id_category?: true
    id_bundle?: true
  }

  export type Bundle_categoryCountAggregateInputType = {
    id?: true
    id_category?: true
    id_bundle?: true
    _all?: true
  }

  export type Bundle_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundle_category to aggregate.
     */
    where?: bundle_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_categories to fetch.
     */
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bundle_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bundle_categories
    **/
    _count?: true | Bundle_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Bundle_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Bundle_categoryMaxAggregateInputType
  }

  export type GetBundle_categoryAggregateType<T extends Bundle_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBundle_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBundle_category[P]>
      : GetScalarType<T[P], AggregateBundle_category[P]>
  }




  export type bundle_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_categoryWhereInput
    orderBy?: bundle_categoryOrderByWithAggregationInput | bundle_categoryOrderByWithAggregationInput[]
    by: Bundle_categoryScalarFieldEnum[] | Bundle_categoryScalarFieldEnum
    having?: bundle_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Bundle_categoryCountAggregateInputType | true
    _min?: Bundle_categoryMinAggregateInputType
    _max?: Bundle_categoryMaxAggregateInputType
  }

  export type Bundle_categoryGroupByOutputType = {
    id: string
    id_category: string
    id_bundle: string
    _count: Bundle_categoryCountAggregateOutputType | null
    _min: Bundle_categoryMinAggregateOutputType | null
    _max: Bundle_categoryMaxAggregateOutputType | null
  }

  type GetBundle_categoryGroupByPayload<T extends bundle_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Bundle_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Bundle_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Bundle_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Bundle_categoryGroupByOutputType[P]>
        }
      >
    >


  export type bundle_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_category?: boolean
    id_bundle?: boolean
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle_category"]>

  export type bundle_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_category?: boolean
    id_bundle?: boolean
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle_category"]>

  export type bundle_categorySelectScalar = {
    id?: boolean
    id_category?: boolean
    id_bundle?: boolean
  }

  export type bundle_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
  }
  export type bundle_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
  }

  export type $bundle_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bundle_category"
    objects: {
      bundle: Prisma.$bundlePayload<ExtArgs>
      category: Prisma.$categoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_category: string
      id_bundle: string
    }, ExtArgs["result"]["bundle_category"]>
    composites: {}
  }

  type bundle_categoryGetPayload<S extends boolean | null | undefined | bundle_categoryDefaultArgs> = $Result.GetResult<Prisma.$bundle_categoryPayload, S>

  type bundle_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bundle_categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Bundle_categoryCountAggregateInputType | true
    }

  export interface bundle_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bundle_category'], meta: { name: 'bundle_category' } }
    /**
     * Find zero or one Bundle_category that matches the filter.
     * @param {bundle_categoryFindUniqueArgs} args - Arguments to find a Bundle_category
     * @example
     * // Get one Bundle_category
     * const bundle_category = await prisma.bundle_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bundle_categoryFindUniqueArgs>(args: SelectSubset<T, bundle_categoryFindUniqueArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bundle_category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bundle_categoryFindUniqueOrThrowArgs} args - Arguments to find a Bundle_category
     * @example
     * // Get one Bundle_category
     * const bundle_category = await prisma.bundle_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bundle_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, bundle_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bundle_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryFindFirstArgs} args - Arguments to find a Bundle_category
     * @example
     * // Get one Bundle_category
     * const bundle_category = await prisma.bundle_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bundle_categoryFindFirstArgs>(args?: SelectSubset<T, bundle_categoryFindFirstArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bundle_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryFindFirstOrThrowArgs} args - Arguments to find a Bundle_category
     * @example
     * // Get one Bundle_category
     * const bundle_category = await prisma.bundle_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bundle_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, bundle_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bundle_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bundle_categories
     * const bundle_categories = await prisma.bundle_category.findMany()
     * 
     * // Get first 10 Bundle_categories
     * const bundle_categories = await prisma.bundle_category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bundle_categoryWithIdOnly = await prisma.bundle_category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bundle_categoryFindManyArgs>(args?: SelectSubset<T, bundle_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bundle_category.
     * @param {bundle_categoryCreateArgs} args - Arguments to create a Bundle_category.
     * @example
     * // Create one Bundle_category
     * const Bundle_category = await prisma.bundle_category.create({
     *   data: {
     *     // ... data to create a Bundle_category
     *   }
     * })
     * 
     */
    create<T extends bundle_categoryCreateArgs>(args: SelectSubset<T, bundle_categoryCreateArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bundle_categories.
     * @param {bundle_categoryCreateManyArgs} args - Arguments to create many Bundle_categories.
     * @example
     * // Create many Bundle_categories
     * const bundle_category = await prisma.bundle_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bundle_categoryCreateManyArgs>(args?: SelectSubset<T, bundle_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bundle_categories and returns the data saved in the database.
     * @param {bundle_categoryCreateManyAndReturnArgs} args - Arguments to create many Bundle_categories.
     * @example
     * // Create many Bundle_categories
     * const bundle_category = await prisma.bundle_category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bundle_categories and only return the `id`
     * const bundle_categoryWithIdOnly = await prisma.bundle_category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bundle_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, bundle_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Bundle_category.
     * @param {bundle_categoryDeleteArgs} args - Arguments to delete one Bundle_category.
     * @example
     * // Delete one Bundle_category
     * const Bundle_category = await prisma.bundle_category.delete({
     *   where: {
     *     // ... filter to delete one Bundle_category
     *   }
     * })
     * 
     */
    delete<T extends bundle_categoryDeleteArgs>(args: SelectSubset<T, bundle_categoryDeleteArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bundle_category.
     * @param {bundle_categoryUpdateArgs} args - Arguments to update one Bundle_category.
     * @example
     * // Update one Bundle_category
     * const bundle_category = await prisma.bundle_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bundle_categoryUpdateArgs>(args: SelectSubset<T, bundle_categoryUpdateArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bundle_categories.
     * @param {bundle_categoryDeleteManyArgs} args - Arguments to filter Bundle_categories to delete.
     * @example
     * // Delete a few Bundle_categories
     * const { count } = await prisma.bundle_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bundle_categoryDeleteManyArgs>(args?: SelectSubset<T, bundle_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bundle_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bundle_categories
     * const bundle_category = await prisma.bundle_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bundle_categoryUpdateManyArgs>(args: SelectSubset<T, bundle_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bundle_category.
     * @param {bundle_categoryUpsertArgs} args - Arguments to update or create a Bundle_category.
     * @example
     * // Update or create a Bundle_category
     * const bundle_category = await prisma.bundle_category.upsert({
     *   create: {
     *     // ... data to create a Bundle_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bundle_category we want to update
     *   }
     * })
     */
    upsert<T extends bundle_categoryUpsertArgs>(args: SelectSubset<T, bundle_categoryUpsertArgs<ExtArgs>>): Prisma__bundle_categoryClient<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bundle_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryCountArgs} args - Arguments to filter Bundle_categories to count.
     * @example
     * // Count the number of Bundle_categories
     * const count = await prisma.bundle_category.count({
     *   where: {
     *     // ... the filter for the Bundle_categories we want to count
     *   }
     * })
    **/
    count<T extends bundle_categoryCountArgs>(
      args?: Subset<T, bundle_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Bundle_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bundle_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bundle_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Bundle_categoryAggregateArgs>(args: Subset<T, Bundle_categoryAggregateArgs>): Prisma.PrismaPromise<GetBundle_categoryAggregateType<T>>

    /**
     * Group by Bundle_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bundle_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bundle_categoryGroupByArgs['orderBy'] }
        : { orderBy?: bundle_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bundle_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBundle_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bundle_category model
   */
  readonly fields: bundle_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bundle_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bundle_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle<T extends bundleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, bundleDefaultArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoryDefaultArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bundle_category model
   */ 
  interface bundle_categoryFieldRefs {
    readonly id: FieldRef<"bundle_category", 'String'>
    readonly id_category: FieldRef<"bundle_category", 'String'>
    readonly id_bundle: FieldRef<"bundle_category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * bundle_category findUnique
   */
  export type bundle_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter, which bundle_category to fetch.
     */
    where: bundle_categoryWhereUniqueInput
  }

  /**
   * bundle_category findUniqueOrThrow
   */
  export type bundle_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter, which bundle_category to fetch.
     */
    where: bundle_categoryWhereUniqueInput
  }

  /**
   * bundle_category findFirst
   */
  export type bundle_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter, which bundle_category to fetch.
     */
    where?: bundle_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_categories to fetch.
     */
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundle_categories.
     */
    cursor?: bundle_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundle_categories.
     */
    distinct?: Bundle_categoryScalarFieldEnum | Bundle_categoryScalarFieldEnum[]
  }

  /**
   * bundle_category findFirstOrThrow
   */
  export type bundle_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter, which bundle_category to fetch.
     */
    where?: bundle_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_categories to fetch.
     */
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundle_categories.
     */
    cursor?: bundle_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundle_categories.
     */
    distinct?: Bundle_categoryScalarFieldEnum | Bundle_categoryScalarFieldEnum[]
  }

  /**
   * bundle_category findMany
   */
  export type bundle_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter, which bundle_categories to fetch.
     */
    where?: bundle_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_categories to fetch.
     */
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bundle_categories.
     */
    cursor?: bundle_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_categories.
     */
    skip?: number
    distinct?: Bundle_categoryScalarFieldEnum | Bundle_categoryScalarFieldEnum[]
  }

  /**
   * bundle_category create
   */
  export type bundle_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a bundle_category.
     */
    data: XOR<bundle_categoryCreateInput, bundle_categoryUncheckedCreateInput>
  }

  /**
   * bundle_category createMany
   */
  export type bundle_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bundle_categories.
     */
    data: bundle_categoryCreateManyInput | bundle_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bundle_category createManyAndReturn
   */
  export type bundle_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many bundle_categories.
     */
    data: bundle_categoryCreateManyInput | bundle_categoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * bundle_category update
   */
  export type bundle_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a bundle_category.
     */
    data: XOR<bundle_categoryUpdateInput, bundle_categoryUncheckedUpdateInput>
    /**
     * Choose, which bundle_category to update.
     */
    where: bundle_categoryWhereUniqueInput
  }

  /**
   * bundle_category updateMany
   */
  export type bundle_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bundle_categories.
     */
    data: XOR<bundle_categoryUpdateManyMutationInput, bundle_categoryUncheckedUpdateManyInput>
    /**
     * Filter which bundle_categories to update
     */
    where?: bundle_categoryWhereInput
  }

  /**
   * bundle_category upsert
   */
  export type bundle_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the bundle_category to update in case it exists.
     */
    where: bundle_categoryWhereUniqueInput
    /**
     * In case the bundle_category found by the `where` argument doesn't exist, create a new bundle_category with this data.
     */
    create: XOR<bundle_categoryCreateInput, bundle_categoryUncheckedCreateInput>
    /**
     * In case the bundle_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bundle_categoryUpdateInput, bundle_categoryUncheckedUpdateInput>
  }

  /**
   * bundle_category delete
   */
  export type bundle_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    /**
     * Filter which bundle_category to delete.
     */
    where: bundle_categoryWhereUniqueInput
  }

  /**
   * bundle_category deleteMany
   */
  export type bundle_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundle_categories to delete
     */
    where?: bundle_categoryWhereInput
  }

  /**
   * bundle_category without action
   */
  export type bundle_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
  }


  /**
   * Model bundle_product
   */

  export type AggregateBundle_product = {
    _count: Bundle_productCountAggregateOutputType | null
    _avg: Bundle_productAvgAggregateOutputType | null
    _sum: Bundle_productSumAggregateOutputType | null
    _min: Bundle_productMinAggregateOutputType | null
    _max: Bundle_productMaxAggregateOutputType | null
  }

  export type Bundle_productAvgAggregateOutputType = {
    qty: number | null
  }

  export type Bundle_productSumAggregateOutputType = {
    qty: number | null
  }

  export type Bundle_productMinAggregateOutputType = {
    id_bundle: string | null
    id_product: string | null
    id: string | null
    qty: number | null
  }

  export type Bundle_productMaxAggregateOutputType = {
    id_bundle: string | null
    id_product: string | null
    id: string | null
    qty: number | null
  }

  export type Bundle_productCountAggregateOutputType = {
    id_bundle: number
    id_product: number
    id: number
    qty: number
    _all: number
  }


  export type Bundle_productAvgAggregateInputType = {
    qty?: true
  }

  export type Bundle_productSumAggregateInputType = {
    qty?: true
  }

  export type Bundle_productMinAggregateInputType = {
    id_bundle?: true
    id_product?: true
    id?: true
    qty?: true
  }

  export type Bundle_productMaxAggregateInputType = {
    id_bundle?: true
    id_product?: true
    id?: true
    qty?: true
  }

  export type Bundle_productCountAggregateInputType = {
    id_bundle?: true
    id_product?: true
    id?: true
    qty?: true
    _all?: true
  }

  export type Bundle_productAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundle_product to aggregate.
     */
    where?: bundle_productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_products to fetch.
     */
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bundle_productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bundle_products
    **/
    _count?: true | Bundle_productCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Bundle_productAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Bundle_productSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Bundle_productMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Bundle_productMaxAggregateInputType
  }

  export type GetBundle_productAggregateType<T extends Bundle_productAggregateArgs> = {
        [P in keyof T & keyof AggregateBundle_product]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBundle_product[P]>
      : GetScalarType<T[P], AggregateBundle_product[P]>
  }




  export type bundle_productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bundle_productWhereInput
    orderBy?: bundle_productOrderByWithAggregationInput | bundle_productOrderByWithAggregationInput[]
    by: Bundle_productScalarFieldEnum[] | Bundle_productScalarFieldEnum
    having?: bundle_productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Bundle_productCountAggregateInputType | true
    _avg?: Bundle_productAvgAggregateInputType
    _sum?: Bundle_productSumAggregateInputType
    _min?: Bundle_productMinAggregateInputType
    _max?: Bundle_productMaxAggregateInputType
  }

  export type Bundle_productGroupByOutputType = {
    id_bundle: string
    id_product: string
    id: string
    qty: number | null
    _count: Bundle_productCountAggregateOutputType | null
    _avg: Bundle_productAvgAggregateOutputType | null
    _sum: Bundle_productSumAggregateOutputType | null
    _min: Bundle_productMinAggregateOutputType | null
    _max: Bundle_productMaxAggregateOutputType | null
  }

  type GetBundle_productGroupByPayload<T extends bundle_productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Bundle_productGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Bundle_productGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Bundle_productGroupByOutputType[P]>
            : GetScalarType<T[P], Bundle_productGroupByOutputType[P]>
        }
      >
    >


  export type bundle_productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_bundle?: boolean
    id_product?: boolean
    id?: boolean
    qty?: boolean
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle_product"]>

  export type bundle_productSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_bundle?: boolean
    id_product?: boolean
    id?: boolean
    qty?: boolean
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle_product"]>

  export type bundle_productSelectScalar = {
    id_bundle?: boolean
    id_product?: boolean
    id?: boolean
    qty?: boolean
  }

  export type bundle_productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }
  export type bundle_productIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | bundleDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }

  export type $bundle_productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bundle_product"
    objects: {
      bundle: Prisma.$bundlePayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_bundle: string
      id_product: string
      id: string
      qty: number | null
    }, ExtArgs["result"]["bundle_product"]>
    composites: {}
  }

  type bundle_productGetPayload<S extends boolean | null | undefined | bundle_productDefaultArgs> = $Result.GetResult<Prisma.$bundle_productPayload, S>

  type bundle_productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bundle_productFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Bundle_productCountAggregateInputType | true
    }

  export interface bundle_productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bundle_product'], meta: { name: 'bundle_product' } }
    /**
     * Find zero or one Bundle_product that matches the filter.
     * @param {bundle_productFindUniqueArgs} args - Arguments to find a Bundle_product
     * @example
     * // Get one Bundle_product
     * const bundle_product = await prisma.bundle_product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bundle_productFindUniqueArgs>(args: SelectSubset<T, bundle_productFindUniqueArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bundle_product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bundle_productFindUniqueOrThrowArgs} args - Arguments to find a Bundle_product
     * @example
     * // Get one Bundle_product
     * const bundle_product = await prisma.bundle_product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bundle_productFindUniqueOrThrowArgs>(args: SelectSubset<T, bundle_productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bundle_product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productFindFirstArgs} args - Arguments to find a Bundle_product
     * @example
     * // Get one Bundle_product
     * const bundle_product = await prisma.bundle_product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bundle_productFindFirstArgs>(args?: SelectSubset<T, bundle_productFindFirstArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bundle_product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productFindFirstOrThrowArgs} args - Arguments to find a Bundle_product
     * @example
     * // Get one Bundle_product
     * const bundle_product = await prisma.bundle_product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bundle_productFindFirstOrThrowArgs>(args?: SelectSubset<T, bundle_productFindFirstOrThrowArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bundle_products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bundle_products
     * const bundle_products = await prisma.bundle_product.findMany()
     * 
     * // Get first 10 Bundle_products
     * const bundle_products = await prisma.bundle_product.findMany({ take: 10 })
     * 
     * // Only select the `id_bundle`
     * const bundle_productWithId_bundleOnly = await prisma.bundle_product.findMany({ select: { id_bundle: true } })
     * 
     */
    findMany<T extends bundle_productFindManyArgs>(args?: SelectSubset<T, bundle_productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bundle_product.
     * @param {bundle_productCreateArgs} args - Arguments to create a Bundle_product.
     * @example
     * // Create one Bundle_product
     * const Bundle_product = await prisma.bundle_product.create({
     *   data: {
     *     // ... data to create a Bundle_product
     *   }
     * })
     * 
     */
    create<T extends bundle_productCreateArgs>(args: SelectSubset<T, bundle_productCreateArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bundle_products.
     * @param {bundle_productCreateManyArgs} args - Arguments to create many Bundle_products.
     * @example
     * // Create many Bundle_products
     * const bundle_product = await prisma.bundle_product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bundle_productCreateManyArgs>(args?: SelectSubset<T, bundle_productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bundle_products and returns the data saved in the database.
     * @param {bundle_productCreateManyAndReturnArgs} args - Arguments to create many Bundle_products.
     * @example
     * // Create many Bundle_products
     * const bundle_product = await prisma.bundle_product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bundle_products and only return the `id_bundle`
     * const bundle_productWithId_bundleOnly = await prisma.bundle_product.createManyAndReturn({ 
     *   select: { id_bundle: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bundle_productCreateManyAndReturnArgs>(args?: SelectSubset<T, bundle_productCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Bundle_product.
     * @param {bundle_productDeleteArgs} args - Arguments to delete one Bundle_product.
     * @example
     * // Delete one Bundle_product
     * const Bundle_product = await prisma.bundle_product.delete({
     *   where: {
     *     // ... filter to delete one Bundle_product
     *   }
     * })
     * 
     */
    delete<T extends bundle_productDeleteArgs>(args: SelectSubset<T, bundle_productDeleteArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bundle_product.
     * @param {bundle_productUpdateArgs} args - Arguments to update one Bundle_product.
     * @example
     * // Update one Bundle_product
     * const bundle_product = await prisma.bundle_product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bundle_productUpdateArgs>(args: SelectSubset<T, bundle_productUpdateArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bundle_products.
     * @param {bundle_productDeleteManyArgs} args - Arguments to filter Bundle_products to delete.
     * @example
     * // Delete a few Bundle_products
     * const { count } = await prisma.bundle_product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bundle_productDeleteManyArgs>(args?: SelectSubset<T, bundle_productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bundle_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bundle_products
     * const bundle_product = await prisma.bundle_product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bundle_productUpdateManyArgs>(args: SelectSubset<T, bundle_productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bundle_product.
     * @param {bundle_productUpsertArgs} args - Arguments to update or create a Bundle_product.
     * @example
     * // Update or create a Bundle_product
     * const bundle_product = await prisma.bundle_product.upsert({
     *   create: {
     *     // ... data to create a Bundle_product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bundle_product we want to update
     *   }
     * })
     */
    upsert<T extends bundle_productUpsertArgs>(args: SelectSubset<T, bundle_productUpsertArgs<ExtArgs>>): Prisma__bundle_productClient<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bundle_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productCountArgs} args - Arguments to filter Bundle_products to count.
     * @example
     * // Count the number of Bundle_products
     * const count = await prisma.bundle_product.count({
     *   where: {
     *     // ... the filter for the Bundle_products we want to count
     *   }
     * })
    **/
    count<T extends bundle_productCountArgs>(
      args?: Subset<T, bundle_productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Bundle_productCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bundle_product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bundle_productAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Bundle_productAggregateArgs>(args: Subset<T, Bundle_productAggregateArgs>): Prisma.PrismaPromise<GetBundle_productAggregateType<T>>

    /**
     * Group by Bundle_product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bundle_productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bundle_productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bundle_productGroupByArgs['orderBy'] }
        : { orderBy?: bundle_productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bundle_productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBundle_productGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bundle_product model
   */
  readonly fields: bundle_productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bundle_product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bundle_productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle<T extends bundleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, bundleDefaultArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bundle_product model
   */ 
  interface bundle_productFieldRefs {
    readonly id_bundle: FieldRef<"bundle_product", 'String'>
    readonly id_product: FieldRef<"bundle_product", 'String'>
    readonly id: FieldRef<"bundle_product", 'String'>
    readonly qty: FieldRef<"bundle_product", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * bundle_product findUnique
   */
  export type bundle_productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter, which bundle_product to fetch.
     */
    where: bundle_productWhereUniqueInput
  }

  /**
   * bundle_product findUniqueOrThrow
   */
  export type bundle_productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter, which bundle_product to fetch.
     */
    where: bundle_productWhereUniqueInput
  }

  /**
   * bundle_product findFirst
   */
  export type bundle_productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter, which bundle_product to fetch.
     */
    where?: bundle_productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_products to fetch.
     */
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundle_products.
     */
    cursor?: bundle_productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundle_products.
     */
    distinct?: Bundle_productScalarFieldEnum | Bundle_productScalarFieldEnum[]
  }

  /**
   * bundle_product findFirstOrThrow
   */
  export type bundle_productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter, which bundle_product to fetch.
     */
    where?: bundle_productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_products to fetch.
     */
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bundle_products.
     */
    cursor?: bundle_productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bundle_products.
     */
    distinct?: Bundle_productScalarFieldEnum | Bundle_productScalarFieldEnum[]
  }

  /**
   * bundle_product findMany
   */
  export type bundle_productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter, which bundle_products to fetch.
     */
    where?: bundle_productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bundle_products to fetch.
     */
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bundle_products.
     */
    cursor?: bundle_productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bundle_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bundle_products.
     */
    skip?: number
    distinct?: Bundle_productScalarFieldEnum | Bundle_productScalarFieldEnum[]
  }

  /**
   * bundle_product create
   */
  export type bundle_productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * The data needed to create a bundle_product.
     */
    data: XOR<bundle_productCreateInput, bundle_productUncheckedCreateInput>
  }

  /**
   * bundle_product createMany
   */
  export type bundle_productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bundle_products.
     */
    data: bundle_productCreateManyInput | bundle_productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bundle_product createManyAndReturn
   */
  export type bundle_productCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many bundle_products.
     */
    data: bundle_productCreateManyInput | bundle_productCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * bundle_product update
   */
  export type bundle_productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * The data needed to update a bundle_product.
     */
    data: XOR<bundle_productUpdateInput, bundle_productUncheckedUpdateInput>
    /**
     * Choose, which bundle_product to update.
     */
    where: bundle_productWhereUniqueInput
  }

  /**
   * bundle_product updateMany
   */
  export type bundle_productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bundle_products.
     */
    data: XOR<bundle_productUpdateManyMutationInput, bundle_productUncheckedUpdateManyInput>
    /**
     * Filter which bundle_products to update
     */
    where?: bundle_productWhereInput
  }

  /**
   * bundle_product upsert
   */
  export type bundle_productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * The filter to search for the bundle_product to update in case it exists.
     */
    where: bundle_productWhereUniqueInput
    /**
     * In case the bundle_product found by the `where` argument doesn't exist, create a new bundle_product with this data.
     */
    create: XOR<bundle_productCreateInput, bundle_productUncheckedCreateInput>
    /**
     * In case the bundle_product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bundle_productUpdateInput, bundle_productUncheckedUpdateInput>
  }

  /**
   * bundle_product delete
   */
  export type bundle_productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    /**
     * Filter which bundle_product to delete.
     */
    where: bundle_productWhereUniqueInput
  }

  /**
   * bundle_product deleteMany
   */
  export type bundle_productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bundle_products to delete
     */
    where?: bundle_productWhereInput
  }

  /**
   * bundle_product without action
   */
  export type bundle_productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
  }


  /**
   * Model category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    id_parent: string | null
    deleted_at: Date | null
    slug: string | null
    img: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    id_parent: string | null
    deleted_at: Date | null
    slug: string | null
    img: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    id_parent: number
    deleted_at: number
    slug: number
    img: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    id_parent?: true
    deleted_at?: true
    slug?: true
    img?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    id_parent?: true
    deleted_at?: true
    slug?: true
    img?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    id_parent?: true
    deleted_at?: true
    slug?: true
    img?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    id_parent: string | null
    deleted_at: Date | null
    slug: string | null
    img: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_parent?: boolean
    deleted_at?: boolean
    slug?: boolean
    img?: boolean
    bundle_category?: boolean | category$bundle_categoryArgs<ExtArgs>
    category?: boolean | category$categoryArgs<ExtArgs>
    other_category?: boolean | category$other_categoryArgs<ExtArgs>
    product_category?: boolean | category$product_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_parent?: boolean
    deleted_at?: boolean
    slug?: boolean
    img?: boolean
    category?: boolean | category$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    id?: boolean
    name?: boolean
    id_parent?: boolean
    deleted_at?: boolean
    slug?: boolean
    img?: boolean
  }

  export type categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_category?: boolean | category$bundle_categoryArgs<ExtArgs>
    category?: boolean | category$categoryArgs<ExtArgs>
    other_category?: boolean | category$other_categoryArgs<ExtArgs>
    product_category?: boolean | category$product_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | category$categoryArgs<ExtArgs>
  }

  export type $categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "category"
    objects: {
      bundle_category: Prisma.$bundle_categoryPayload<ExtArgs>[]
      category: Prisma.$categoryPayload<ExtArgs> | null
      other_category: Prisma.$categoryPayload<ExtArgs>[]
      product_category: Prisma.$product_categoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      id_parent: string | null
      deleted_at: Date | null
      slug: string | null
      img: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = $Result.GetResult<Prisma.$categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoryFindUniqueArgs>(args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoryFindFirstArgs>(args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoryFindManyArgs>(args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends categoryCreateArgs>(args: SelectSubset<T, categoryCreateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoryCreateManyArgs>(args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {categoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends categoryDeleteArgs>(args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoryUpdateArgs>(args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoryDeleteManyArgs>(args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoryUpdateManyArgs>(args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends categoryUpsertArgs>(args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle_category<T extends category$bundle_categoryArgs<ExtArgs> = {}>(args?: Subset<T, category$bundle_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_categoryPayload<ExtArgs>, T, "findMany"> | Null>
    category<T extends category$categoryArgs<ExtArgs> = {}>(args?: Subset<T, category$categoryArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    other_category<T extends category$other_categoryArgs<ExtArgs> = {}>(args?: Subset<T, category$other_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany"> | Null>
    product_category<T extends category$product_categoryArgs<ExtArgs> = {}>(args?: Subset<T, category$product_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'String'>
    readonly name: FieldRef<"category", 'String'>
    readonly id_parent: FieldRef<"category", 'String'>
    readonly deleted_at: FieldRef<"category", 'DateTime'>
    readonly slug: FieldRef<"category", 'String'>
    readonly img: FieldRef<"category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }

  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * category createManyAndReturn
   */
  export type categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }

  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }

  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }

  /**
   * category.bundle_category
   */
  export type category$bundle_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_category
     */
    select?: bundle_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_categoryInclude<ExtArgs> | null
    where?: bundle_categoryWhereInput
    orderBy?: bundle_categoryOrderByWithRelationInput | bundle_categoryOrderByWithRelationInput[]
    cursor?: bundle_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Bundle_categoryScalarFieldEnum | Bundle_categoryScalarFieldEnum[]
  }

  /**
   * category.category
   */
  export type category$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
  }

  /**
   * category.other_category
   */
  export type category$other_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    cursor?: categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category.product_category
   */
  export type category$product_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    where?: product_categoryWhereInput
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    cursor?: product_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * category without action
   */
  export type categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
  }


  /**
   * Model customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    otp: number | null
  }

  export type CustomerSumAggregateOutputType = {
    otp: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    whatsapp: string | null
    deleted_at: Date | null
    otp: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    whatsapp: string | null
    deleted_at: Date | null
    otp: number | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    whatsapp: number
    deleted_at: number
    otp: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    otp?: true
  }

  export type CustomerSumAggregateInputType = {
    otp?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    whatsapp?: true
    deleted_at?: true
    otp?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    whatsapp?: true
    deleted_at?: true
    otp?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    whatsapp?: true
    deleted_at?: true
    otp?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer to aggregate.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type customerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customerWhereInput
    orderBy?: customerOrderByWithAggregationInput | customerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: customerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    name: string
    email: string
    whatsapp: string
    deleted_at: Date | null
    otp: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends customerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type customerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    whatsapp?: boolean
    deleted_at?: boolean
    otp?: boolean
    customer_reader?: boolean | customer$customer_readerArgs<ExtArgs>
    t_sales?: boolean | customer$t_salesArgs<ExtArgs>
    t_sales_download?: boolean | customer$t_sales_downloadArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type customerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    whatsapp?: boolean
    deleted_at?: boolean
    otp?: boolean
  }, ExtArgs["result"]["customer"]>

  export type customerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    whatsapp?: boolean
    deleted_at?: boolean
    otp?: boolean
  }

  export type customerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer_reader?: boolean | customer$customer_readerArgs<ExtArgs>
    t_sales?: boolean | customer$t_salesArgs<ExtArgs>
    t_sales_download?: boolean | customer$t_sales_downloadArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type customerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $customerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customer"
    objects: {
      customer_reader: Prisma.$customer_readerPayload<ExtArgs>[]
      t_sales: Prisma.$t_salesPayload<ExtArgs>[]
      t_sales_download: Prisma.$t_sales_downloadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      whatsapp: string
      deleted_at: Date | null
      otp: number | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type customerGetPayload<S extends boolean | null | undefined | customerDefaultArgs> = $Result.GetResult<Prisma.$customerPayload, S>

  type customerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<customerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface customerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer'], meta: { name: 'customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {customerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customerFindUniqueArgs>(args: SelectSubset<T, customerFindUniqueArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {customerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customerFindUniqueOrThrowArgs>(args: SelectSubset<T, customerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customerFindFirstArgs>(args?: SelectSubset<T, customerFindFirstArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customerFindFirstOrThrowArgs>(args?: SelectSubset<T, customerFindFirstOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends customerFindManyArgs>(args?: SelectSubset<T, customerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {customerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends customerCreateArgs>(args: SelectSubset<T, customerCreateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {customerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customerCreateManyArgs>(args?: SelectSubset<T, customerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {customerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends customerCreateManyAndReturnArgs>(args?: SelectSubset<T, customerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {customerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends customerDeleteArgs>(args: SelectSubset<T, customerDeleteArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {customerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customerUpdateArgs>(args: SelectSubset<T, customerUpdateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customerDeleteManyArgs>(args?: SelectSubset<T, customerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customerUpdateManyArgs>(args: SelectSubset<T, customerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends customerUpsertArgs>(args: SelectSubset<T, customerUpsertArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customerCountArgs>(
      args?: Subset<T, customerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customerGroupByArgs['orderBy'] }
        : { orderBy?: customerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customer model
   */
  readonly fields: customerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer_reader<T extends customer$customer_readerArgs<ExtArgs> = {}>(args?: Subset<T, customer$customer_readerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findMany"> | Null>
    t_sales<T extends customer$t_salesArgs<ExtArgs> = {}>(args?: Subset<T, customer$t_salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findMany"> | Null>
    t_sales_download<T extends customer$t_sales_downloadArgs<ExtArgs> = {}>(args?: Subset<T, customer$t_sales_downloadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customer model
   */ 
  interface customerFieldRefs {
    readonly id: FieldRef<"customer", 'String'>
    readonly name: FieldRef<"customer", 'String'>
    readonly email: FieldRef<"customer", 'String'>
    readonly whatsapp: FieldRef<"customer", 'String'>
    readonly deleted_at: FieldRef<"customer", 'DateTime'>
    readonly otp: FieldRef<"customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * customer findUnique
   */
  export type customerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findUniqueOrThrow
   */
  export type customerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findFirst
   */
  export type customerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findFirstOrThrow
   */
  export type customerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findMany
   */
  export type customerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer create
   */
  export type customerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The data needed to create a customer.
     */
    data: XOR<customerCreateInput, customerUncheckedCreateInput>
  }

  /**
   * customer createMany
   */
  export type customerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer createManyAndReturn
   */
  export type customerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer update
   */
  export type customerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The data needed to update a customer.
     */
    data: XOR<customerUpdateInput, customerUncheckedUpdateInput>
    /**
     * Choose, which customer to update.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer updateMany
   */
  export type customerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customers.
     */
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customerWhereInput
  }

  /**
   * customer upsert
   */
  export type customerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The filter to search for the customer to update in case it exists.
     */
    where: customerWhereUniqueInput
    /**
     * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
     */
    create: XOR<customerCreateInput, customerUncheckedCreateInput>
    /**
     * In case the customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customerUpdateInput, customerUncheckedUpdateInput>
  }

  /**
   * customer delete
   */
  export type customerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter which customer to delete.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer deleteMany
   */
  export type customerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customers to delete
     */
    where?: customerWhereInput
  }

  /**
   * customer.customer_reader
   */
  export type customer$customer_readerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    where?: customer_readerWhereInput
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    cursor?: customer_readerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Customer_readerScalarFieldEnum | Customer_readerScalarFieldEnum[]
  }

  /**
   * customer.t_sales
   */
  export type customer$t_salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    where?: t_salesWhereInput
    orderBy?: t_salesOrderByWithRelationInput | t_salesOrderByWithRelationInput[]
    cursor?: t_salesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_salesScalarFieldEnum | T_salesScalarFieldEnum[]
  }

  /**
   * customer.t_sales_download
   */
  export type customer$t_sales_downloadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    where?: t_sales_downloadWhereInput
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    cursor?: t_sales_downloadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_sales_downloadScalarFieldEnum | T_sales_downloadScalarFieldEnum[]
  }

  /**
   * customer without action
   */
  export type customerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
  }


  /**
   * Model customer_reader
   */

  export type AggregateCustomer_reader = {
    _count: Customer_readerCountAggregateOutputType | null
    _avg: Customer_readerAvgAggregateOutputType | null
    _sum: Customer_readerSumAggregateOutputType | null
    _min: Customer_readerMinAggregateOutputType | null
    _max: Customer_readerMaxAggregateOutputType | null
  }

  export type Customer_readerAvgAggregateOutputType = {
    last_page: number | null
    percent: number | null
  }

  export type Customer_readerSumAggregateOutputType = {
    last_page: number | null
    percent: number | null
  }

  export type Customer_readerMinAggregateOutputType = {
    id: string | null
    id_customer: string | null
    id_product: string | null
    last_page: number | null
    percent: number | null
  }

  export type Customer_readerMaxAggregateOutputType = {
    id: string | null
    id_customer: string | null
    id_product: string | null
    last_page: number | null
    percent: number | null
  }

  export type Customer_readerCountAggregateOutputType = {
    id: number
    id_customer: number
    id_product: number
    last_page: number
    percent: number
    _all: number
  }


  export type Customer_readerAvgAggregateInputType = {
    last_page?: true
    percent?: true
  }

  export type Customer_readerSumAggregateInputType = {
    last_page?: true
    percent?: true
  }

  export type Customer_readerMinAggregateInputType = {
    id?: true
    id_customer?: true
    id_product?: true
    last_page?: true
    percent?: true
  }

  export type Customer_readerMaxAggregateInputType = {
    id?: true
    id_customer?: true
    id_product?: true
    last_page?: true
    percent?: true
  }

  export type Customer_readerCountAggregateInputType = {
    id?: true
    id_customer?: true
    id_product?: true
    last_page?: true
    percent?: true
    _all?: true
  }

  export type Customer_readerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer_reader to aggregate.
     */
    where?: customer_readerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_readers to fetch.
     */
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customer_readerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customer_readers
    **/
    _count?: true | Customer_readerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Customer_readerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Customer_readerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Customer_readerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Customer_readerMaxAggregateInputType
  }

  export type GetCustomer_readerAggregateType<T extends Customer_readerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer_reader]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer_reader[P]>
      : GetScalarType<T[P], AggregateCustomer_reader[P]>
  }




  export type customer_readerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customer_readerWhereInput
    orderBy?: customer_readerOrderByWithAggregationInput | customer_readerOrderByWithAggregationInput[]
    by: Customer_readerScalarFieldEnum[] | Customer_readerScalarFieldEnum
    having?: customer_readerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Customer_readerCountAggregateInputType | true
    _avg?: Customer_readerAvgAggregateInputType
    _sum?: Customer_readerSumAggregateInputType
    _min?: Customer_readerMinAggregateInputType
    _max?: Customer_readerMaxAggregateInputType
  }

  export type Customer_readerGroupByOutputType = {
    id: string
    id_customer: string
    id_product: string
    last_page: number
    percent: number
    _count: Customer_readerCountAggregateOutputType | null
    _avg: Customer_readerAvgAggregateOutputType | null
    _sum: Customer_readerSumAggregateOutputType | null
    _min: Customer_readerMinAggregateOutputType | null
    _max: Customer_readerMaxAggregateOutputType | null
  }

  type GetCustomer_readerGroupByPayload<T extends customer_readerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Customer_readerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Customer_readerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Customer_readerGroupByOutputType[P]>
            : GetScalarType<T[P], Customer_readerGroupByOutputType[P]>
        }
      >
    >


  export type customer_readerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_customer?: boolean
    id_product?: boolean
    last_page?: boolean
    percent?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer_reader"]>

  export type customer_readerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_customer?: boolean
    id_product?: boolean
    last_page?: boolean
    percent?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer_reader"]>

  export type customer_readerSelectScalar = {
    id?: boolean
    id_customer?: boolean
    id_product?: boolean
    last_page?: boolean
    percent?: boolean
  }

  export type customer_readerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }
  export type customer_readerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }

  export type $customer_readerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customer_reader"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_customer: string
      id_product: string
      last_page: number
      percent: number
    }, ExtArgs["result"]["customer_reader"]>
    composites: {}
  }

  type customer_readerGetPayload<S extends boolean | null | undefined | customer_readerDefaultArgs> = $Result.GetResult<Prisma.$customer_readerPayload, S>

  type customer_readerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<customer_readerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Customer_readerCountAggregateInputType | true
    }

  export interface customer_readerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer_reader'], meta: { name: 'customer_reader' } }
    /**
     * Find zero or one Customer_reader that matches the filter.
     * @param {customer_readerFindUniqueArgs} args - Arguments to find a Customer_reader
     * @example
     * // Get one Customer_reader
     * const customer_reader = await prisma.customer_reader.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customer_readerFindUniqueArgs>(args: SelectSubset<T, customer_readerFindUniqueArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer_reader that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {customer_readerFindUniqueOrThrowArgs} args - Arguments to find a Customer_reader
     * @example
     * // Get one Customer_reader
     * const customer_reader = await prisma.customer_reader.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customer_readerFindUniqueOrThrowArgs>(args: SelectSubset<T, customer_readerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer_reader that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerFindFirstArgs} args - Arguments to find a Customer_reader
     * @example
     * // Get one Customer_reader
     * const customer_reader = await prisma.customer_reader.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customer_readerFindFirstArgs>(args?: SelectSubset<T, customer_readerFindFirstArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer_reader that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerFindFirstOrThrowArgs} args - Arguments to find a Customer_reader
     * @example
     * // Get one Customer_reader
     * const customer_reader = await prisma.customer_reader.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customer_readerFindFirstOrThrowArgs>(args?: SelectSubset<T, customer_readerFindFirstOrThrowArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customer_readers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customer_readers
     * const customer_readers = await prisma.customer_reader.findMany()
     * 
     * // Get first 10 Customer_readers
     * const customer_readers = await prisma.customer_reader.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customer_readerWithIdOnly = await prisma.customer_reader.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends customer_readerFindManyArgs>(args?: SelectSubset<T, customer_readerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer_reader.
     * @param {customer_readerCreateArgs} args - Arguments to create a Customer_reader.
     * @example
     * // Create one Customer_reader
     * const Customer_reader = await prisma.customer_reader.create({
     *   data: {
     *     // ... data to create a Customer_reader
     *   }
     * })
     * 
     */
    create<T extends customer_readerCreateArgs>(args: SelectSubset<T, customer_readerCreateArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customer_readers.
     * @param {customer_readerCreateManyArgs} args - Arguments to create many Customer_readers.
     * @example
     * // Create many Customer_readers
     * const customer_reader = await prisma.customer_reader.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customer_readerCreateManyArgs>(args?: SelectSubset<T, customer_readerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customer_readers and returns the data saved in the database.
     * @param {customer_readerCreateManyAndReturnArgs} args - Arguments to create many Customer_readers.
     * @example
     * // Create many Customer_readers
     * const customer_reader = await prisma.customer_reader.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customer_readers and only return the `id`
     * const customer_readerWithIdOnly = await prisma.customer_reader.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends customer_readerCreateManyAndReturnArgs>(args?: SelectSubset<T, customer_readerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer_reader.
     * @param {customer_readerDeleteArgs} args - Arguments to delete one Customer_reader.
     * @example
     * // Delete one Customer_reader
     * const Customer_reader = await prisma.customer_reader.delete({
     *   where: {
     *     // ... filter to delete one Customer_reader
     *   }
     * })
     * 
     */
    delete<T extends customer_readerDeleteArgs>(args: SelectSubset<T, customer_readerDeleteArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer_reader.
     * @param {customer_readerUpdateArgs} args - Arguments to update one Customer_reader.
     * @example
     * // Update one Customer_reader
     * const customer_reader = await prisma.customer_reader.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customer_readerUpdateArgs>(args: SelectSubset<T, customer_readerUpdateArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customer_readers.
     * @param {customer_readerDeleteManyArgs} args - Arguments to filter Customer_readers to delete.
     * @example
     * // Delete a few Customer_readers
     * const { count } = await prisma.customer_reader.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customer_readerDeleteManyArgs>(args?: SelectSubset<T, customer_readerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customer_readers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customer_readers
     * const customer_reader = await prisma.customer_reader.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customer_readerUpdateManyArgs>(args: SelectSubset<T, customer_readerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer_reader.
     * @param {customer_readerUpsertArgs} args - Arguments to update or create a Customer_reader.
     * @example
     * // Update or create a Customer_reader
     * const customer_reader = await prisma.customer_reader.upsert({
     *   create: {
     *     // ... data to create a Customer_reader
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer_reader we want to update
     *   }
     * })
     */
    upsert<T extends customer_readerUpsertArgs>(args: SelectSubset<T, customer_readerUpsertArgs<ExtArgs>>): Prisma__customer_readerClient<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customer_readers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerCountArgs} args - Arguments to filter Customer_readers to count.
     * @example
     * // Count the number of Customer_readers
     * const count = await prisma.customer_reader.count({
     *   where: {
     *     // ... the filter for the Customer_readers we want to count
     *   }
     * })
    **/
    count<T extends customer_readerCountArgs>(
      args?: Subset<T, customer_readerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Customer_readerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer_reader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_readerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Customer_readerAggregateArgs>(args: Subset<T, Customer_readerAggregateArgs>): Prisma.PrismaPromise<GetCustomer_readerAggregateType<T>>

    /**
     * Group by Customer_reader.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_readerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customer_readerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customer_readerGroupByArgs['orderBy'] }
        : { orderBy?: customer_readerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customer_readerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomer_readerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customer_reader model
   */
  readonly fields: customer_readerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer_reader.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customer_readerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customer_reader model
   */ 
  interface customer_readerFieldRefs {
    readonly id: FieldRef<"customer_reader", 'String'>
    readonly id_customer: FieldRef<"customer_reader", 'String'>
    readonly id_product: FieldRef<"customer_reader", 'String'>
    readonly last_page: FieldRef<"customer_reader", 'Int'>
    readonly percent: FieldRef<"customer_reader", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * customer_reader findUnique
   */
  export type customer_readerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter, which customer_reader to fetch.
     */
    where: customer_readerWhereUniqueInput
  }

  /**
   * customer_reader findUniqueOrThrow
   */
  export type customer_readerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter, which customer_reader to fetch.
     */
    where: customer_readerWhereUniqueInput
  }

  /**
   * customer_reader findFirst
   */
  export type customer_readerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter, which customer_reader to fetch.
     */
    where?: customer_readerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_readers to fetch.
     */
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_readers.
     */
    cursor?: customer_readerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_readers.
     */
    distinct?: Customer_readerScalarFieldEnum | Customer_readerScalarFieldEnum[]
  }

  /**
   * customer_reader findFirstOrThrow
   */
  export type customer_readerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter, which customer_reader to fetch.
     */
    where?: customer_readerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_readers to fetch.
     */
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_readers.
     */
    cursor?: customer_readerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_readers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_readers.
     */
    distinct?: Customer_readerScalarFieldEnum | Customer_readerScalarFieldEnum[]
  }

  /**
   * customer_reader findMany
   */
  export type customer_readerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter, which customer_readers to fetch.
     */
    where?: customer_readerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_readers to fetch.
     */
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customer_readers.
     */
    cursor?: customer_readerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_readers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_readers.
     */
    skip?: number
    distinct?: Customer_readerScalarFieldEnum | Customer_readerScalarFieldEnum[]
  }

  /**
   * customer_reader create
   */
  export type customer_readerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * The data needed to create a customer_reader.
     */
    data: XOR<customer_readerCreateInput, customer_readerUncheckedCreateInput>
  }

  /**
   * customer_reader createMany
   */
  export type customer_readerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customer_readers.
     */
    data: customer_readerCreateManyInput | customer_readerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer_reader createManyAndReturn
   */
  export type customer_readerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many customer_readers.
     */
    data: customer_readerCreateManyInput | customer_readerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * customer_reader update
   */
  export type customer_readerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * The data needed to update a customer_reader.
     */
    data: XOR<customer_readerUpdateInput, customer_readerUncheckedUpdateInput>
    /**
     * Choose, which customer_reader to update.
     */
    where: customer_readerWhereUniqueInput
  }

  /**
   * customer_reader updateMany
   */
  export type customer_readerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customer_readers.
     */
    data: XOR<customer_readerUpdateManyMutationInput, customer_readerUncheckedUpdateManyInput>
    /**
     * Filter which customer_readers to update
     */
    where?: customer_readerWhereInput
  }

  /**
   * customer_reader upsert
   */
  export type customer_readerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * The filter to search for the customer_reader to update in case it exists.
     */
    where: customer_readerWhereUniqueInput
    /**
     * In case the customer_reader found by the `where` argument doesn't exist, create a new customer_reader with this data.
     */
    create: XOR<customer_readerCreateInput, customer_readerUncheckedCreateInput>
    /**
     * In case the customer_reader was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customer_readerUpdateInput, customer_readerUncheckedUpdateInput>
  }

  /**
   * customer_reader delete
   */
  export type customer_readerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    /**
     * Filter which customer_reader to delete.
     */
    where: customer_readerWhereUniqueInput
  }

  /**
   * customer_reader deleteMany
   */
  export type customer_readerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer_readers to delete
     */
    where?: customer_readerWhereInput
  }

  /**
   * customer_reader without action
   */
  export type customer_readerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
  }


  /**
   * Model customer_track
   */

  export type AggregateCustomer_track = {
    _count: Customer_trackCountAggregateOutputType | null
    _min: Customer_trackMinAggregateOutputType | null
    _max: Customer_trackMaxAggregateOutputType | null
  }

  export type Customer_trackMinAggregateOutputType = {
    id: string | null
    ts: Date | null
    id_customer: string | null
    path: string | null
    referrer: string | null
    ip: string | null
  }

  export type Customer_trackMaxAggregateOutputType = {
    id: string | null
    ts: Date | null
    id_customer: string | null
    path: string | null
    referrer: string | null
    ip: string | null
  }

  export type Customer_trackCountAggregateOutputType = {
    id: number
    ts: number
    id_customer: number
    path: number
    referrer: number
    info: number
    ip: number
    _all: number
  }


  export type Customer_trackMinAggregateInputType = {
    id?: true
    ts?: true
    id_customer?: true
    path?: true
    referrer?: true
    ip?: true
  }

  export type Customer_trackMaxAggregateInputType = {
    id?: true
    ts?: true
    id_customer?: true
    path?: true
    referrer?: true
    ip?: true
  }

  export type Customer_trackCountAggregateInputType = {
    id?: true
    ts?: true
    id_customer?: true
    path?: true
    referrer?: true
    info?: true
    ip?: true
    _all?: true
  }

  export type Customer_trackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer_track to aggregate.
     */
    where?: customer_trackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tracks to fetch.
     */
    orderBy?: customer_trackOrderByWithRelationInput | customer_trackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customer_trackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customer_tracks
    **/
    _count?: true | Customer_trackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Customer_trackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Customer_trackMaxAggregateInputType
  }

  export type GetCustomer_trackAggregateType<T extends Customer_trackAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer_track]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer_track[P]>
      : GetScalarType<T[P], AggregateCustomer_track[P]>
  }




  export type customer_trackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customer_trackWhereInput
    orderBy?: customer_trackOrderByWithAggregationInput | customer_trackOrderByWithAggregationInput[]
    by: Customer_trackScalarFieldEnum[] | Customer_trackScalarFieldEnum
    having?: customer_trackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Customer_trackCountAggregateInputType | true
    _min?: Customer_trackMinAggregateInputType
    _max?: Customer_trackMaxAggregateInputType
  }

  export type Customer_trackGroupByOutputType = {
    id: string
    ts: Date
    id_customer: string
    path: string
    referrer: string
    info: JsonValue
    ip: string
    _count: Customer_trackCountAggregateOutputType | null
    _min: Customer_trackMinAggregateOutputType | null
    _max: Customer_trackMaxAggregateOutputType | null
  }

  type GetCustomer_trackGroupByPayload<T extends customer_trackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Customer_trackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Customer_trackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Customer_trackGroupByOutputType[P]>
            : GetScalarType<T[P], Customer_trackGroupByOutputType[P]>
        }
      >
    >


  export type customer_trackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    id_customer?: boolean
    path?: boolean
    referrer?: boolean
    info?: boolean
    ip?: boolean
    customer_track?: boolean | customer_trackDefaultArgs<ExtArgs>
    other_customer_track?: boolean | customer_track$other_customer_trackArgs<ExtArgs>
    _count?: boolean | Customer_trackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer_track"]>

  export type customer_trackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    id_customer?: boolean
    path?: boolean
    referrer?: boolean
    info?: boolean
    ip?: boolean
    customer_track?: boolean | customer_trackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer_track"]>

  export type customer_trackSelectScalar = {
    id?: boolean
    ts?: boolean
    id_customer?: boolean
    path?: boolean
    referrer?: boolean
    info?: boolean
    ip?: boolean
  }

  export type customer_trackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer_track?: boolean | customer_trackDefaultArgs<ExtArgs>
    other_customer_track?: boolean | customer_track$other_customer_trackArgs<ExtArgs>
    _count?: boolean | Customer_trackCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type customer_trackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer_track?: boolean | customer_trackDefaultArgs<ExtArgs>
  }

  export type $customer_trackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customer_track"
    objects: {
      customer_track: Prisma.$customer_trackPayload<ExtArgs>
      other_customer_track: Prisma.$customer_trackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ts: Date
      id_customer: string
      path: string
      referrer: string
      info: Prisma.JsonValue
      ip: string
    }, ExtArgs["result"]["customer_track"]>
    composites: {}
  }

  type customer_trackGetPayload<S extends boolean | null | undefined | customer_trackDefaultArgs> = $Result.GetResult<Prisma.$customer_trackPayload, S>

  type customer_trackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<customer_trackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Customer_trackCountAggregateInputType | true
    }

  export interface customer_trackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer_track'], meta: { name: 'customer_track' } }
    /**
     * Find zero or one Customer_track that matches the filter.
     * @param {customer_trackFindUniqueArgs} args - Arguments to find a Customer_track
     * @example
     * // Get one Customer_track
     * const customer_track = await prisma.customer_track.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customer_trackFindUniqueArgs>(args: SelectSubset<T, customer_trackFindUniqueArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer_track that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {customer_trackFindUniqueOrThrowArgs} args - Arguments to find a Customer_track
     * @example
     * // Get one Customer_track
     * const customer_track = await prisma.customer_track.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customer_trackFindUniqueOrThrowArgs>(args: SelectSubset<T, customer_trackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer_track that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackFindFirstArgs} args - Arguments to find a Customer_track
     * @example
     * // Get one Customer_track
     * const customer_track = await prisma.customer_track.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customer_trackFindFirstArgs>(args?: SelectSubset<T, customer_trackFindFirstArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer_track that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackFindFirstOrThrowArgs} args - Arguments to find a Customer_track
     * @example
     * // Get one Customer_track
     * const customer_track = await prisma.customer_track.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customer_trackFindFirstOrThrowArgs>(args?: SelectSubset<T, customer_trackFindFirstOrThrowArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customer_tracks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customer_tracks
     * const customer_tracks = await prisma.customer_track.findMany()
     * 
     * // Get first 10 Customer_tracks
     * const customer_tracks = await prisma.customer_track.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customer_trackWithIdOnly = await prisma.customer_track.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends customer_trackFindManyArgs>(args?: SelectSubset<T, customer_trackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer_track.
     * @param {customer_trackCreateArgs} args - Arguments to create a Customer_track.
     * @example
     * // Create one Customer_track
     * const Customer_track = await prisma.customer_track.create({
     *   data: {
     *     // ... data to create a Customer_track
     *   }
     * })
     * 
     */
    create<T extends customer_trackCreateArgs>(args: SelectSubset<T, customer_trackCreateArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customer_tracks.
     * @param {customer_trackCreateManyArgs} args - Arguments to create many Customer_tracks.
     * @example
     * // Create many Customer_tracks
     * const customer_track = await prisma.customer_track.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customer_trackCreateManyArgs>(args?: SelectSubset<T, customer_trackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customer_tracks and returns the data saved in the database.
     * @param {customer_trackCreateManyAndReturnArgs} args - Arguments to create many Customer_tracks.
     * @example
     * // Create many Customer_tracks
     * const customer_track = await prisma.customer_track.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customer_tracks and only return the `id`
     * const customer_trackWithIdOnly = await prisma.customer_track.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends customer_trackCreateManyAndReturnArgs>(args?: SelectSubset<T, customer_trackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer_track.
     * @param {customer_trackDeleteArgs} args - Arguments to delete one Customer_track.
     * @example
     * // Delete one Customer_track
     * const Customer_track = await prisma.customer_track.delete({
     *   where: {
     *     // ... filter to delete one Customer_track
     *   }
     * })
     * 
     */
    delete<T extends customer_trackDeleteArgs>(args: SelectSubset<T, customer_trackDeleteArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer_track.
     * @param {customer_trackUpdateArgs} args - Arguments to update one Customer_track.
     * @example
     * // Update one Customer_track
     * const customer_track = await prisma.customer_track.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customer_trackUpdateArgs>(args: SelectSubset<T, customer_trackUpdateArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customer_tracks.
     * @param {customer_trackDeleteManyArgs} args - Arguments to filter Customer_tracks to delete.
     * @example
     * // Delete a few Customer_tracks
     * const { count } = await prisma.customer_track.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customer_trackDeleteManyArgs>(args?: SelectSubset<T, customer_trackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customer_tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customer_tracks
     * const customer_track = await prisma.customer_track.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customer_trackUpdateManyArgs>(args: SelectSubset<T, customer_trackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer_track.
     * @param {customer_trackUpsertArgs} args - Arguments to update or create a Customer_track.
     * @example
     * // Update or create a Customer_track
     * const customer_track = await prisma.customer_track.upsert({
     *   create: {
     *     // ... data to create a Customer_track
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer_track we want to update
     *   }
     * })
     */
    upsert<T extends customer_trackUpsertArgs>(args: SelectSubset<T, customer_trackUpsertArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customer_tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackCountArgs} args - Arguments to filter Customer_tracks to count.
     * @example
     * // Count the number of Customer_tracks
     * const count = await prisma.customer_track.count({
     *   where: {
     *     // ... the filter for the Customer_tracks we want to count
     *   }
     * })
    **/
    count<T extends customer_trackCountArgs>(
      args?: Subset<T, customer_trackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Customer_trackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer_track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_trackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Customer_trackAggregateArgs>(args: Subset<T, Customer_trackAggregateArgs>): Prisma.PrismaPromise<GetCustomer_trackAggregateType<T>>

    /**
     * Group by Customer_track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_trackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customer_trackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customer_trackGroupByArgs['orderBy'] }
        : { orderBy?: customer_trackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customer_trackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomer_trackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customer_track model
   */
  readonly fields: customer_trackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer_track.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customer_trackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer_track<T extends customer_trackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customer_trackDefaultArgs<ExtArgs>>): Prisma__customer_trackClient<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    other_customer_track<T extends customer_track$other_customer_trackArgs<ExtArgs> = {}>(args?: Subset<T, customer_track$other_customer_trackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_trackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customer_track model
   */ 
  interface customer_trackFieldRefs {
    readonly id: FieldRef<"customer_track", 'String'>
    readonly ts: FieldRef<"customer_track", 'DateTime'>
    readonly id_customer: FieldRef<"customer_track", 'String'>
    readonly path: FieldRef<"customer_track", 'String'>
    readonly referrer: FieldRef<"customer_track", 'String'>
    readonly info: FieldRef<"customer_track", 'Json'>
    readonly ip: FieldRef<"customer_track", 'String'>
  }
    

  // Custom InputTypes
  /**
   * customer_track findUnique
   */
  export type customer_trackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter, which customer_track to fetch.
     */
    where: customer_trackWhereUniqueInput
  }

  /**
   * customer_track findUniqueOrThrow
   */
  export type customer_trackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter, which customer_track to fetch.
     */
    where: customer_trackWhereUniqueInput
  }

  /**
   * customer_track findFirst
   */
  export type customer_trackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter, which customer_track to fetch.
     */
    where?: customer_trackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tracks to fetch.
     */
    orderBy?: customer_trackOrderByWithRelationInput | customer_trackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_tracks.
     */
    cursor?: customer_trackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_tracks.
     */
    distinct?: Customer_trackScalarFieldEnum | Customer_trackScalarFieldEnum[]
  }

  /**
   * customer_track findFirstOrThrow
   */
  export type customer_trackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter, which customer_track to fetch.
     */
    where?: customer_trackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tracks to fetch.
     */
    orderBy?: customer_trackOrderByWithRelationInput | customer_trackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_tracks.
     */
    cursor?: customer_trackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_tracks.
     */
    distinct?: Customer_trackScalarFieldEnum | Customer_trackScalarFieldEnum[]
  }

  /**
   * customer_track findMany
   */
  export type customer_trackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter, which customer_tracks to fetch.
     */
    where?: customer_trackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tracks to fetch.
     */
    orderBy?: customer_trackOrderByWithRelationInput | customer_trackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customer_tracks.
     */
    cursor?: customer_trackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tracks.
     */
    skip?: number
    distinct?: Customer_trackScalarFieldEnum | Customer_trackScalarFieldEnum[]
  }

  /**
   * customer_track create
   */
  export type customer_trackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * The data needed to create a customer_track.
     */
    data: XOR<customer_trackCreateInput, customer_trackUncheckedCreateInput>
  }

  /**
   * customer_track createMany
   */
  export type customer_trackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customer_tracks.
     */
    data: customer_trackCreateManyInput | customer_trackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer_track createManyAndReturn
   */
  export type customer_trackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many customer_tracks.
     */
    data: customer_trackCreateManyInput | customer_trackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * customer_track update
   */
  export type customer_trackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * The data needed to update a customer_track.
     */
    data: XOR<customer_trackUpdateInput, customer_trackUncheckedUpdateInput>
    /**
     * Choose, which customer_track to update.
     */
    where: customer_trackWhereUniqueInput
  }

  /**
   * customer_track updateMany
   */
  export type customer_trackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customer_tracks.
     */
    data: XOR<customer_trackUpdateManyMutationInput, customer_trackUncheckedUpdateManyInput>
    /**
     * Filter which customer_tracks to update
     */
    where?: customer_trackWhereInput
  }

  /**
   * customer_track upsert
   */
  export type customer_trackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * The filter to search for the customer_track to update in case it exists.
     */
    where: customer_trackWhereUniqueInput
    /**
     * In case the customer_track found by the `where` argument doesn't exist, create a new customer_track with this data.
     */
    create: XOR<customer_trackCreateInput, customer_trackUncheckedCreateInput>
    /**
     * In case the customer_track was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customer_trackUpdateInput, customer_trackUncheckedUpdateInput>
  }

  /**
   * customer_track delete
   */
  export type customer_trackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    /**
     * Filter which customer_track to delete.
     */
    where: customer_trackWhereUniqueInput
  }

  /**
   * customer_track deleteMany
   */
  export type customer_trackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer_tracks to delete
     */
    where?: customer_trackWhereInput
  }

  /**
   * customer_track.other_customer_track
   */
  export type customer_track$other_customer_trackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
    where?: customer_trackWhereInput
    orderBy?: customer_trackOrderByWithRelationInput | customer_trackOrderByWithRelationInput[]
    cursor?: customer_trackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Customer_trackScalarFieldEnum | Customer_trackScalarFieldEnum[]
  }

  /**
   * customer_track without action
   */
  export type customer_trackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_track
     */
    select?: customer_trackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_trackInclude<ExtArgs> | null
  }


  /**
   * Model landing
   */

  export type AggregateLanding = {
    _count: LandingCountAggregateOutputType | null
    _avg: LandingAvgAggregateOutputType | null
    _sum: LandingSumAggregateOutputType | null
    _min: LandingMinAggregateOutputType | null
    _max: LandingMaxAggregateOutputType | null
  }

  export type LandingAvgAggregateOutputType = {
    views: number | null
  }

  export type LandingSumAggregateOutputType = {
    views: number | null
  }

  export type LandingMinAggregateOutputType = {
    id: string | null
    slug: string | null
    views: number | null
    deleted_at: Date | null
    status: string | null
    title: string | null
  }

  export type LandingMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    views: number | null
    deleted_at: Date | null
    status: string | null
    title: string | null
  }

  export type LandingCountAggregateOutputType = {
    id: number
    slug: number
    views: number
    deleted_at: number
    status: number
    title: number
    _all: number
  }


  export type LandingAvgAggregateInputType = {
    views?: true
  }

  export type LandingSumAggregateInputType = {
    views?: true
  }

  export type LandingMinAggregateInputType = {
    id?: true
    slug?: true
    views?: true
    deleted_at?: true
    status?: true
    title?: true
  }

  export type LandingMaxAggregateInputType = {
    id?: true
    slug?: true
    views?: true
    deleted_at?: true
    status?: true
    title?: true
  }

  export type LandingCountAggregateInputType = {
    id?: true
    slug?: true
    views?: true
    deleted_at?: true
    status?: true
    title?: true
    _all?: true
  }

  export type LandingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which landing to aggregate.
     */
    where?: landingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landings to fetch.
     */
    orderBy?: landingOrderByWithRelationInput | landingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: landingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned landings
    **/
    _count?: true | LandingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LandingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LandingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LandingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LandingMaxAggregateInputType
  }

  export type GetLandingAggregateType<T extends LandingAggregateArgs> = {
        [P in keyof T & keyof AggregateLanding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanding[P]>
      : GetScalarType<T[P], AggregateLanding[P]>
  }




  export type landingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: landingWhereInput
    orderBy?: landingOrderByWithAggregationInput | landingOrderByWithAggregationInput[]
    by: LandingScalarFieldEnum[] | LandingScalarFieldEnum
    having?: landingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LandingCountAggregateInputType | true
    _avg?: LandingAvgAggregateInputType
    _sum?: LandingSumAggregateInputType
    _min?: LandingMinAggregateInputType
    _max?: LandingMaxAggregateInputType
  }

  export type LandingGroupByOutputType = {
    id: string
    slug: string
    views: number
    deleted_at: Date | null
    status: string
    title: string
    _count: LandingCountAggregateOutputType | null
    _avg: LandingAvgAggregateOutputType | null
    _sum: LandingSumAggregateOutputType | null
    _min: LandingMinAggregateOutputType | null
    _max: LandingMaxAggregateOutputType | null
  }

  type GetLandingGroupByPayload<T extends landingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LandingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LandingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LandingGroupByOutputType[P]>
            : GetScalarType<T[P], LandingGroupByOutputType[P]>
        }
      >
    >


  export type landingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    views?: boolean
    deleted_at?: boolean
    status?: boolean
    title?: boolean
    landing_items?: boolean | landing$landing_itemsArgs<ExtArgs>
    _count?: boolean | LandingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["landing"]>

  export type landingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    views?: boolean
    deleted_at?: boolean
    status?: boolean
    title?: boolean
  }, ExtArgs["result"]["landing"]>

  export type landingSelectScalar = {
    id?: boolean
    slug?: boolean
    views?: boolean
    deleted_at?: boolean
    status?: boolean
    title?: boolean
  }

  export type landingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    landing_items?: boolean | landing$landing_itemsArgs<ExtArgs>
    _count?: boolean | LandingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type landingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $landingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "landing"
    objects: {
      landing_items: Prisma.$landing_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slug: string
      views: number
      deleted_at: Date | null
      status: string
      title: string
    }, ExtArgs["result"]["landing"]>
    composites: {}
  }

  type landingGetPayload<S extends boolean | null | undefined | landingDefaultArgs> = $Result.GetResult<Prisma.$landingPayload, S>

  type landingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<landingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LandingCountAggregateInputType | true
    }

  export interface landingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['landing'], meta: { name: 'landing' } }
    /**
     * Find zero or one Landing that matches the filter.
     * @param {landingFindUniqueArgs} args - Arguments to find a Landing
     * @example
     * // Get one Landing
     * const landing = await prisma.landing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends landingFindUniqueArgs>(args: SelectSubset<T, landingFindUniqueArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Landing that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {landingFindUniqueOrThrowArgs} args - Arguments to find a Landing
     * @example
     * // Get one Landing
     * const landing = await prisma.landing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends landingFindUniqueOrThrowArgs>(args: SelectSubset<T, landingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Landing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingFindFirstArgs} args - Arguments to find a Landing
     * @example
     * // Get one Landing
     * const landing = await prisma.landing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends landingFindFirstArgs>(args?: SelectSubset<T, landingFindFirstArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Landing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingFindFirstOrThrowArgs} args - Arguments to find a Landing
     * @example
     * // Get one Landing
     * const landing = await prisma.landing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends landingFindFirstOrThrowArgs>(args?: SelectSubset<T, landingFindFirstOrThrowArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Landings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Landings
     * const landings = await prisma.landing.findMany()
     * 
     * // Get first 10 Landings
     * const landings = await prisma.landing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const landingWithIdOnly = await prisma.landing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends landingFindManyArgs>(args?: SelectSubset<T, landingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Landing.
     * @param {landingCreateArgs} args - Arguments to create a Landing.
     * @example
     * // Create one Landing
     * const Landing = await prisma.landing.create({
     *   data: {
     *     // ... data to create a Landing
     *   }
     * })
     * 
     */
    create<T extends landingCreateArgs>(args: SelectSubset<T, landingCreateArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Landings.
     * @param {landingCreateManyArgs} args - Arguments to create many Landings.
     * @example
     * // Create many Landings
     * const landing = await prisma.landing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends landingCreateManyArgs>(args?: SelectSubset<T, landingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Landings and returns the data saved in the database.
     * @param {landingCreateManyAndReturnArgs} args - Arguments to create many Landings.
     * @example
     * // Create many Landings
     * const landing = await prisma.landing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Landings and only return the `id`
     * const landingWithIdOnly = await prisma.landing.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends landingCreateManyAndReturnArgs>(args?: SelectSubset<T, landingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Landing.
     * @param {landingDeleteArgs} args - Arguments to delete one Landing.
     * @example
     * // Delete one Landing
     * const Landing = await prisma.landing.delete({
     *   where: {
     *     // ... filter to delete one Landing
     *   }
     * })
     * 
     */
    delete<T extends landingDeleteArgs>(args: SelectSubset<T, landingDeleteArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Landing.
     * @param {landingUpdateArgs} args - Arguments to update one Landing.
     * @example
     * // Update one Landing
     * const landing = await prisma.landing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends landingUpdateArgs>(args: SelectSubset<T, landingUpdateArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Landings.
     * @param {landingDeleteManyArgs} args - Arguments to filter Landings to delete.
     * @example
     * // Delete a few Landings
     * const { count } = await prisma.landing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends landingDeleteManyArgs>(args?: SelectSubset<T, landingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Landings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Landings
     * const landing = await prisma.landing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends landingUpdateManyArgs>(args: SelectSubset<T, landingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Landing.
     * @param {landingUpsertArgs} args - Arguments to update or create a Landing.
     * @example
     * // Update or create a Landing
     * const landing = await prisma.landing.upsert({
     *   create: {
     *     // ... data to create a Landing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Landing we want to update
     *   }
     * })
     */
    upsert<T extends landingUpsertArgs>(args: SelectSubset<T, landingUpsertArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Landings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingCountArgs} args - Arguments to filter Landings to count.
     * @example
     * // Count the number of Landings
     * const count = await prisma.landing.count({
     *   where: {
     *     // ... the filter for the Landings we want to count
     *   }
     * })
    **/
    count<T extends landingCountArgs>(
      args?: Subset<T, landingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LandingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Landing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LandingAggregateArgs>(args: Subset<T, LandingAggregateArgs>): Prisma.PrismaPromise<GetLandingAggregateType<T>>

    /**
     * Group by Landing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends landingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: landingGroupByArgs['orderBy'] }
        : { orderBy?: landingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, landingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLandingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the landing model
   */
  readonly fields: landingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for landing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__landingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    landing_items<T extends landing$landing_itemsArgs<ExtArgs> = {}>(args?: Subset<T, landing$landing_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the landing model
   */ 
  interface landingFieldRefs {
    readonly id: FieldRef<"landing", 'String'>
    readonly slug: FieldRef<"landing", 'String'>
    readonly views: FieldRef<"landing", 'Int'>
    readonly deleted_at: FieldRef<"landing", 'DateTime'>
    readonly status: FieldRef<"landing", 'String'>
    readonly title: FieldRef<"landing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * landing findUnique
   */
  export type landingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter, which landing to fetch.
     */
    where: landingWhereUniqueInput
  }

  /**
   * landing findUniqueOrThrow
   */
  export type landingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter, which landing to fetch.
     */
    where: landingWhereUniqueInput
  }

  /**
   * landing findFirst
   */
  export type landingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter, which landing to fetch.
     */
    where?: landingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landings to fetch.
     */
    orderBy?: landingOrderByWithRelationInput | landingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for landings.
     */
    cursor?: landingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of landings.
     */
    distinct?: LandingScalarFieldEnum | LandingScalarFieldEnum[]
  }

  /**
   * landing findFirstOrThrow
   */
  export type landingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter, which landing to fetch.
     */
    where?: landingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landings to fetch.
     */
    orderBy?: landingOrderByWithRelationInput | landingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for landings.
     */
    cursor?: landingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of landings.
     */
    distinct?: LandingScalarFieldEnum | LandingScalarFieldEnum[]
  }

  /**
   * landing findMany
   */
  export type landingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter, which landings to fetch.
     */
    where?: landingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landings to fetch.
     */
    orderBy?: landingOrderByWithRelationInput | landingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing landings.
     */
    cursor?: landingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landings.
     */
    skip?: number
    distinct?: LandingScalarFieldEnum | LandingScalarFieldEnum[]
  }

  /**
   * landing create
   */
  export type landingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * The data needed to create a landing.
     */
    data: XOR<landingCreateInput, landingUncheckedCreateInput>
  }

  /**
   * landing createMany
   */
  export type landingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many landings.
     */
    data: landingCreateManyInput | landingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * landing createManyAndReturn
   */
  export type landingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many landings.
     */
    data: landingCreateManyInput | landingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * landing update
   */
  export type landingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * The data needed to update a landing.
     */
    data: XOR<landingUpdateInput, landingUncheckedUpdateInput>
    /**
     * Choose, which landing to update.
     */
    where: landingWhereUniqueInput
  }

  /**
   * landing updateMany
   */
  export type landingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update landings.
     */
    data: XOR<landingUpdateManyMutationInput, landingUncheckedUpdateManyInput>
    /**
     * Filter which landings to update
     */
    where?: landingWhereInput
  }

  /**
   * landing upsert
   */
  export type landingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * The filter to search for the landing to update in case it exists.
     */
    where: landingWhereUniqueInput
    /**
     * In case the landing found by the `where` argument doesn't exist, create a new landing with this data.
     */
    create: XOR<landingCreateInput, landingUncheckedCreateInput>
    /**
     * In case the landing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<landingUpdateInput, landingUncheckedUpdateInput>
  }

  /**
   * landing delete
   */
  export type landingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
    /**
     * Filter which landing to delete.
     */
    where: landingWhereUniqueInput
  }

  /**
   * landing deleteMany
   */
  export type landingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which landings to delete
     */
    where?: landingWhereInput
  }

  /**
   * landing.landing_items
   */
  export type landing$landing_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    where?: landing_itemsWhereInput
    orderBy?: landing_itemsOrderByWithRelationInput | landing_itemsOrderByWithRelationInput[]
    cursor?: landing_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Landing_itemsScalarFieldEnum | Landing_itemsScalarFieldEnum[]
  }

  /**
   * landing without action
   */
  export type landingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing
     */
    select?: landingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landingInclude<ExtArgs> | null
  }


  /**
   * Model landing_items
   */

  export type AggregateLanding_items = {
    _count: Landing_itemsCountAggregateOutputType | null
    _avg: Landing_itemsAvgAggregateOutputType | null
    _sum: Landing_itemsSumAggregateOutputType | null
    _min: Landing_itemsMinAggregateOutputType | null
    _max: Landing_itemsMaxAggregateOutputType | null
  }

  export type Landing_itemsAvgAggregateOutputType = {
    idx: number | null
  }

  export type Landing_itemsSumAggregateOutputType = {
    idx: number | null
  }

  export type Landing_itemsMinAggregateOutputType = {
    id: string | null
    desc: string | null
    img_file: string | null
    tag: string | null
    link_to: string | null
    landing_id: string | null
    idx: number | null
    color: string | null
  }

  export type Landing_itemsMaxAggregateOutputType = {
    id: string | null
    desc: string | null
    img_file: string | null
    tag: string | null
    link_to: string | null
    landing_id: string | null
    idx: number | null
    color: string | null
  }

  export type Landing_itemsCountAggregateOutputType = {
    id: number
    desc: number
    img_file: number
    tag: number
    link_to: number
    landing_id: number
    idx: number
    color: number
    _all: number
  }


  export type Landing_itemsAvgAggregateInputType = {
    idx?: true
  }

  export type Landing_itemsSumAggregateInputType = {
    idx?: true
  }

  export type Landing_itemsMinAggregateInputType = {
    id?: true
    desc?: true
    img_file?: true
    tag?: true
    link_to?: true
    landing_id?: true
    idx?: true
    color?: true
  }

  export type Landing_itemsMaxAggregateInputType = {
    id?: true
    desc?: true
    img_file?: true
    tag?: true
    link_to?: true
    landing_id?: true
    idx?: true
    color?: true
  }

  export type Landing_itemsCountAggregateInputType = {
    id?: true
    desc?: true
    img_file?: true
    tag?: true
    link_to?: true
    landing_id?: true
    idx?: true
    color?: true
    _all?: true
  }

  export type Landing_itemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which landing_items to aggregate.
     */
    where?: landing_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landing_items to fetch.
     */
    orderBy?: landing_itemsOrderByWithRelationInput | landing_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: landing_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landing_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landing_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned landing_items
    **/
    _count?: true | Landing_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Landing_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Landing_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Landing_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Landing_itemsMaxAggregateInputType
  }

  export type GetLanding_itemsAggregateType<T extends Landing_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateLanding_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanding_items[P]>
      : GetScalarType<T[P], AggregateLanding_items[P]>
  }




  export type landing_itemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: landing_itemsWhereInput
    orderBy?: landing_itemsOrderByWithAggregationInput | landing_itemsOrderByWithAggregationInput[]
    by: Landing_itemsScalarFieldEnum[] | Landing_itemsScalarFieldEnum
    having?: landing_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Landing_itemsCountAggregateInputType | true
    _avg?: Landing_itemsAvgAggregateInputType
    _sum?: Landing_itemsSumAggregateInputType
    _min?: Landing_itemsMinAggregateInputType
    _max?: Landing_itemsMaxAggregateInputType
  }

  export type Landing_itemsGroupByOutputType = {
    id: string
    desc: string
    img_file: string
    tag: string
    link_to: string
    landing_id: string
    idx: number
    color: string
    _count: Landing_itemsCountAggregateOutputType | null
    _avg: Landing_itemsAvgAggregateOutputType | null
    _sum: Landing_itemsSumAggregateOutputType | null
    _min: Landing_itemsMinAggregateOutputType | null
    _max: Landing_itemsMaxAggregateOutputType | null
  }

  type GetLanding_itemsGroupByPayload<T extends landing_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Landing_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Landing_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Landing_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Landing_itemsGroupByOutputType[P]>
        }
      >
    >


  export type landing_itemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desc?: boolean
    img_file?: boolean
    tag?: boolean
    link_to?: boolean
    landing_id?: boolean
    idx?: boolean
    color?: boolean
    landing?: boolean | landingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["landing_items"]>

  export type landing_itemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desc?: boolean
    img_file?: boolean
    tag?: boolean
    link_to?: boolean
    landing_id?: boolean
    idx?: boolean
    color?: boolean
    landing?: boolean | landingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["landing_items"]>

  export type landing_itemsSelectScalar = {
    id?: boolean
    desc?: boolean
    img_file?: boolean
    tag?: boolean
    link_to?: boolean
    landing_id?: boolean
    idx?: boolean
    color?: boolean
  }

  export type landing_itemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    landing?: boolean | landingDefaultArgs<ExtArgs>
  }
  export type landing_itemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    landing?: boolean | landingDefaultArgs<ExtArgs>
  }

  export type $landing_itemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "landing_items"
    objects: {
      landing: Prisma.$landingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      desc: string
      img_file: string
      tag: string
      link_to: string
      landing_id: string
      idx: number
      color: string
    }, ExtArgs["result"]["landing_items"]>
    composites: {}
  }

  type landing_itemsGetPayload<S extends boolean | null | undefined | landing_itemsDefaultArgs> = $Result.GetResult<Prisma.$landing_itemsPayload, S>

  type landing_itemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<landing_itemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Landing_itemsCountAggregateInputType | true
    }

  export interface landing_itemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['landing_items'], meta: { name: 'landing_items' } }
    /**
     * Find zero or one Landing_items that matches the filter.
     * @param {landing_itemsFindUniqueArgs} args - Arguments to find a Landing_items
     * @example
     * // Get one Landing_items
     * const landing_items = await prisma.landing_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends landing_itemsFindUniqueArgs>(args: SelectSubset<T, landing_itemsFindUniqueArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Landing_items that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {landing_itemsFindUniqueOrThrowArgs} args - Arguments to find a Landing_items
     * @example
     * // Get one Landing_items
     * const landing_items = await prisma.landing_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends landing_itemsFindUniqueOrThrowArgs>(args: SelectSubset<T, landing_itemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Landing_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsFindFirstArgs} args - Arguments to find a Landing_items
     * @example
     * // Get one Landing_items
     * const landing_items = await prisma.landing_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends landing_itemsFindFirstArgs>(args?: SelectSubset<T, landing_itemsFindFirstArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Landing_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsFindFirstOrThrowArgs} args - Arguments to find a Landing_items
     * @example
     * // Get one Landing_items
     * const landing_items = await prisma.landing_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends landing_itemsFindFirstOrThrowArgs>(args?: SelectSubset<T, landing_itemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Landing_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Landing_items
     * const landing_items = await prisma.landing_items.findMany()
     * 
     * // Get first 10 Landing_items
     * const landing_items = await prisma.landing_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const landing_itemsWithIdOnly = await prisma.landing_items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends landing_itemsFindManyArgs>(args?: SelectSubset<T, landing_itemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Landing_items.
     * @param {landing_itemsCreateArgs} args - Arguments to create a Landing_items.
     * @example
     * // Create one Landing_items
     * const Landing_items = await prisma.landing_items.create({
     *   data: {
     *     // ... data to create a Landing_items
     *   }
     * })
     * 
     */
    create<T extends landing_itemsCreateArgs>(args: SelectSubset<T, landing_itemsCreateArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Landing_items.
     * @param {landing_itemsCreateManyArgs} args - Arguments to create many Landing_items.
     * @example
     * // Create many Landing_items
     * const landing_items = await prisma.landing_items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends landing_itemsCreateManyArgs>(args?: SelectSubset<T, landing_itemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Landing_items and returns the data saved in the database.
     * @param {landing_itemsCreateManyAndReturnArgs} args - Arguments to create many Landing_items.
     * @example
     * // Create many Landing_items
     * const landing_items = await prisma.landing_items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Landing_items and only return the `id`
     * const landing_itemsWithIdOnly = await prisma.landing_items.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends landing_itemsCreateManyAndReturnArgs>(args?: SelectSubset<T, landing_itemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Landing_items.
     * @param {landing_itemsDeleteArgs} args - Arguments to delete one Landing_items.
     * @example
     * // Delete one Landing_items
     * const Landing_items = await prisma.landing_items.delete({
     *   where: {
     *     // ... filter to delete one Landing_items
     *   }
     * })
     * 
     */
    delete<T extends landing_itemsDeleteArgs>(args: SelectSubset<T, landing_itemsDeleteArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Landing_items.
     * @param {landing_itemsUpdateArgs} args - Arguments to update one Landing_items.
     * @example
     * // Update one Landing_items
     * const landing_items = await prisma.landing_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends landing_itemsUpdateArgs>(args: SelectSubset<T, landing_itemsUpdateArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Landing_items.
     * @param {landing_itemsDeleteManyArgs} args - Arguments to filter Landing_items to delete.
     * @example
     * // Delete a few Landing_items
     * const { count } = await prisma.landing_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends landing_itemsDeleteManyArgs>(args?: SelectSubset<T, landing_itemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Landing_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Landing_items
     * const landing_items = await prisma.landing_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends landing_itemsUpdateManyArgs>(args: SelectSubset<T, landing_itemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Landing_items.
     * @param {landing_itemsUpsertArgs} args - Arguments to update or create a Landing_items.
     * @example
     * // Update or create a Landing_items
     * const landing_items = await prisma.landing_items.upsert({
     *   create: {
     *     // ... data to create a Landing_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Landing_items we want to update
     *   }
     * })
     */
    upsert<T extends landing_itemsUpsertArgs>(args: SelectSubset<T, landing_itemsUpsertArgs<ExtArgs>>): Prisma__landing_itemsClient<$Result.GetResult<Prisma.$landing_itemsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Landing_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsCountArgs} args - Arguments to filter Landing_items to count.
     * @example
     * // Count the number of Landing_items
     * const count = await prisma.landing_items.count({
     *   where: {
     *     // ... the filter for the Landing_items we want to count
     *   }
     * })
    **/
    count<T extends landing_itemsCountArgs>(
      args?: Subset<T, landing_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Landing_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Landing_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Landing_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Landing_itemsAggregateArgs>(args: Subset<T, Landing_itemsAggregateArgs>): Prisma.PrismaPromise<GetLanding_itemsAggregateType<T>>

    /**
     * Group by Landing_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {landing_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends landing_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: landing_itemsGroupByArgs['orderBy'] }
        : { orderBy?: landing_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, landing_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanding_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the landing_items model
   */
  readonly fields: landing_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for landing_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__landing_itemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    landing<T extends landingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, landingDefaultArgs<ExtArgs>>): Prisma__landingClient<$Result.GetResult<Prisma.$landingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the landing_items model
   */ 
  interface landing_itemsFieldRefs {
    readonly id: FieldRef<"landing_items", 'String'>
    readonly desc: FieldRef<"landing_items", 'String'>
    readonly img_file: FieldRef<"landing_items", 'String'>
    readonly tag: FieldRef<"landing_items", 'String'>
    readonly link_to: FieldRef<"landing_items", 'String'>
    readonly landing_id: FieldRef<"landing_items", 'String'>
    readonly idx: FieldRef<"landing_items", 'Int'>
    readonly color: FieldRef<"landing_items", 'String'>
  }
    

  // Custom InputTypes
  /**
   * landing_items findUnique
   */
  export type landing_itemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter, which landing_items to fetch.
     */
    where: landing_itemsWhereUniqueInput
  }

  /**
   * landing_items findUniqueOrThrow
   */
  export type landing_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter, which landing_items to fetch.
     */
    where: landing_itemsWhereUniqueInput
  }

  /**
   * landing_items findFirst
   */
  export type landing_itemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter, which landing_items to fetch.
     */
    where?: landing_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landing_items to fetch.
     */
    orderBy?: landing_itemsOrderByWithRelationInput | landing_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for landing_items.
     */
    cursor?: landing_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landing_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landing_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of landing_items.
     */
    distinct?: Landing_itemsScalarFieldEnum | Landing_itemsScalarFieldEnum[]
  }

  /**
   * landing_items findFirstOrThrow
   */
  export type landing_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter, which landing_items to fetch.
     */
    where?: landing_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landing_items to fetch.
     */
    orderBy?: landing_itemsOrderByWithRelationInput | landing_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for landing_items.
     */
    cursor?: landing_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landing_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landing_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of landing_items.
     */
    distinct?: Landing_itemsScalarFieldEnum | Landing_itemsScalarFieldEnum[]
  }

  /**
   * landing_items findMany
   */
  export type landing_itemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter, which landing_items to fetch.
     */
    where?: landing_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of landing_items to fetch.
     */
    orderBy?: landing_itemsOrderByWithRelationInput | landing_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing landing_items.
     */
    cursor?: landing_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` landing_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` landing_items.
     */
    skip?: number
    distinct?: Landing_itemsScalarFieldEnum | Landing_itemsScalarFieldEnum[]
  }

  /**
   * landing_items create
   */
  export type landing_itemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a landing_items.
     */
    data: XOR<landing_itemsCreateInput, landing_itemsUncheckedCreateInput>
  }

  /**
   * landing_items createMany
   */
  export type landing_itemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many landing_items.
     */
    data: landing_itemsCreateManyInput | landing_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * landing_items createManyAndReturn
   */
  export type landing_itemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many landing_items.
     */
    data: landing_itemsCreateManyInput | landing_itemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * landing_items update
   */
  export type landing_itemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a landing_items.
     */
    data: XOR<landing_itemsUpdateInput, landing_itemsUncheckedUpdateInput>
    /**
     * Choose, which landing_items to update.
     */
    where: landing_itemsWhereUniqueInput
  }

  /**
   * landing_items updateMany
   */
  export type landing_itemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update landing_items.
     */
    data: XOR<landing_itemsUpdateManyMutationInput, landing_itemsUncheckedUpdateManyInput>
    /**
     * Filter which landing_items to update
     */
    where?: landing_itemsWhereInput
  }

  /**
   * landing_items upsert
   */
  export type landing_itemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the landing_items to update in case it exists.
     */
    where: landing_itemsWhereUniqueInput
    /**
     * In case the landing_items found by the `where` argument doesn't exist, create a new landing_items with this data.
     */
    create: XOR<landing_itemsCreateInput, landing_itemsUncheckedCreateInput>
    /**
     * In case the landing_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<landing_itemsUpdateInput, landing_itemsUncheckedUpdateInput>
  }

  /**
   * landing_items delete
   */
  export type landing_itemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
    /**
     * Filter which landing_items to delete.
     */
    where: landing_itemsWhereUniqueInput
  }

  /**
   * landing_items deleteMany
   */
  export type landing_itemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which landing_items to delete
     */
    where?: landing_itemsWhereInput
  }

  /**
   * landing_items without action
   */
  export type landing_itemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the landing_items
     */
    select?: landing_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: landing_itemsInclude<ExtArgs> | null
  }


  /**
   * Model midtrx
   */

  export type AggregateMidtrx = {
    _count: MidtrxCountAggregateOutputType | null
    _min: MidtrxMinAggregateOutputType | null
    _max: MidtrxMaxAggregateOutputType | null
  }

  export type MidtrxMinAggregateOutputType = {
    id: string | null
    tz: Date | null
    type: string | null
  }

  export type MidtrxMaxAggregateOutputType = {
    id: string | null
    tz: Date | null
    type: string | null
  }

  export type MidtrxCountAggregateOutputType = {
    id: number
    tz: number
    type: number
    payload: number
    _all: number
  }


  export type MidtrxMinAggregateInputType = {
    id?: true
    tz?: true
    type?: true
  }

  export type MidtrxMaxAggregateInputType = {
    id?: true
    tz?: true
    type?: true
  }

  export type MidtrxCountAggregateInputType = {
    id?: true
    tz?: true
    type?: true
    payload?: true
    _all?: true
  }

  export type MidtrxAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which midtrx to aggregate.
     */
    where?: midtrxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of midtrxes to fetch.
     */
    orderBy?: midtrxOrderByWithRelationInput | midtrxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: midtrxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` midtrxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` midtrxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned midtrxes
    **/
    _count?: true | MidtrxCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MidtrxMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MidtrxMaxAggregateInputType
  }

  export type GetMidtrxAggregateType<T extends MidtrxAggregateArgs> = {
        [P in keyof T & keyof AggregateMidtrx]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMidtrx[P]>
      : GetScalarType<T[P], AggregateMidtrx[P]>
  }




  export type midtrxGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: midtrxWhereInput
    orderBy?: midtrxOrderByWithAggregationInput | midtrxOrderByWithAggregationInput[]
    by: MidtrxScalarFieldEnum[] | MidtrxScalarFieldEnum
    having?: midtrxScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MidtrxCountAggregateInputType | true
    _min?: MidtrxMinAggregateInputType
    _max?: MidtrxMaxAggregateInputType
  }

  export type MidtrxGroupByOutputType = {
    id: string
    tz: Date
    type: string
    payload: JsonValue
    _count: MidtrxCountAggregateOutputType | null
    _min: MidtrxMinAggregateOutputType | null
    _max: MidtrxMaxAggregateOutputType | null
  }

  type GetMidtrxGroupByPayload<T extends midtrxGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MidtrxGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MidtrxGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MidtrxGroupByOutputType[P]>
            : GetScalarType<T[P], MidtrxGroupByOutputType[P]>
        }
      >
    >


  export type midtrxSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tz?: boolean
    type?: boolean
    payload?: boolean
  }, ExtArgs["result"]["midtrx"]>

  export type midtrxSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tz?: boolean
    type?: boolean
    payload?: boolean
  }, ExtArgs["result"]["midtrx"]>

  export type midtrxSelectScalar = {
    id?: boolean
    tz?: boolean
    type?: boolean
    payload?: boolean
  }


  export type $midtrxPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "midtrx"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tz: Date
      type: string
      payload: Prisma.JsonValue
    }, ExtArgs["result"]["midtrx"]>
    composites: {}
  }

  type midtrxGetPayload<S extends boolean | null | undefined | midtrxDefaultArgs> = $Result.GetResult<Prisma.$midtrxPayload, S>

  type midtrxCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<midtrxFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MidtrxCountAggregateInputType | true
    }

  export interface midtrxDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['midtrx'], meta: { name: 'midtrx' } }
    /**
     * Find zero or one Midtrx that matches the filter.
     * @param {midtrxFindUniqueArgs} args - Arguments to find a Midtrx
     * @example
     * // Get one Midtrx
     * const midtrx = await prisma.midtrx.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends midtrxFindUniqueArgs>(args: SelectSubset<T, midtrxFindUniqueArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Midtrx that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {midtrxFindUniqueOrThrowArgs} args - Arguments to find a Midtrx
     * @example
     * // Get one Midtrx
     * const midtrx = await prisma.midtrx.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends midtrxFindUniqueOrThrowArgs>(args: SelectSubset<T, midtrxFindUniqueOrThrowArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Midtrx that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxFindFirstArgs} args - Arguments to find a Midtrx
     * @example
     * // Get one Midtrx
     * const midtrx = await prisma.midtrx.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends midtrxFindFirstArgs>(args?: SelectSubset<T, midtrxFindFirstArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Midtrx that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxFindFirstOrThrowArgs} args - Arguments to find a Midtrx
     * @example
     * // Get one Midtrx
     * const midtrx = await prisma.midtrx.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends midtrxFindFirstOrThrowArgs>(args?: SelectSubset<T, midtrxFindFirstOrThrowArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Midtrxes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Midtrxes
     * const midtrxes = await prisma.midtrx.findMany()
     * 
     * // Get first 10 Midtrxes
     * const midtrxes = await prisma.midtrx.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const midtrxWithIdOnly = await prisma.midtrx.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends midtrxFindManyArgs>(args?: SelectSubset<T, midtrxFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Midtrx.
     * @param {midtrxCreateArgs} args - Arguments to create a Midtrx.
     * @example
     * // Create one Midtrx
     * const Midtrx = await prisma.midtrx.create({
     *   data: {
     *     // ... data to create a Midtrx
     *   }
     * })
     * 
     */
    create<T extends midtrxCreateArgs>(args: SelectSubset<T, midtrxCreateArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Midtrxes.
     * @param {midtrxCreateManyArgs} args - Arguments to create many Midtrxes.
     * @example
     * // Create many Midtrxes
     * const midtrx = await prisma.midtrx.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends midtrxCreateManyArgs>(args?: SelectSubset<T, midtrxCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Midtrxes and returns the data saved in the database.
     * @param {midtrxCreateManyAndReturnArgs} args - Arguments to create many Midtrxes.
     * @example
     * // Create many Midtrxes
     * const midtrx = await prisma.midtrx.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Midtrxes and only return the `id`
     * const midtrxWithIdOnly = await prisma.midtrx.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends midtrxCreateManyAndReturnArgs>(args?: SelectSubset<T, midtrxCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Midtrx.
     * @param {midtrxDeleteArgs} args - Arguments to delete one Midtrx.
     * @example
     * // Delete one Midtrx
     * const Midtrx = await prisma.midtrx.delete({
     *   where: {
     *     // ... filter to delete one Midtrx
     *   }
     * })
     * 
     */
    delete<T extends midtrxDeleteArgs>(args: SelectSubset<T, midtrxDeleteArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Midtrx.
     * @param {midtrxUpdateArgs} args - Arguments to update one Midtrx.
     * @example
     * // Update one Midtrx
     * const midtrx = await prisma.midtrx.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends midtrxUpdateArgs>(args: SelectSubset<T, midtrxUpdateArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Midtrxes.
     * @param {midtrxDeleteManyArgs} args - Arguments to filter Midtrxes to delete.
     * @example
     * // Delete a few Midtrxes
     * const { count } = await prisma.midtrx.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends midtrxDeleteManyArgs>(args?: SelectSubset<T, midtrxDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Midtrxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Midtrxes
     * const midtrx = await prisma.midtrx.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends midtrxUpdateManyArgs>(args: SelectSubset<T, midtrxUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Midtrx.
     * @param {midtrxUpsertArgs} args - Arguments to update or create a Midtrx.
     * @example
     * // Update or create a Midtrx
     * const midtrx = await prisma.midtrx.upsert({
     *   create: {
     *     // ... data to create a Midtrx
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Midtrx we want to update
     *   }
     * })
     */
    upsert<T extends midtrxUpsertArgs>(args: SelectSubset<T, midtrxUpsertArgs<ExtArgs>>): Prisma__midtrxClient<$Result.GetResult<Prisma.$midtrxPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Midtrxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxCountArgs} args - Arguments to filter Midtrxes to count.
     * @example
     * // Count the number of Midtrxes
     * const count = await prisma.midtrx.count({
     *   where: {
     *     // ... the filter for the Midtrxes we want to count
     *   }
     * })
    **/
    count<T extends midtrxCountArgs>(
      args?: Subset<T, midtrxCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MidtrxCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Midtrx.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MidtrxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MidtrxAggregateArgs>(args: Subset<T, MidtrxAggregateArgs>): Prisma.PrismaPromise<GetMidtrxAggregateType<T>>

    /**
     * Group by Midtrx.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {midtrxGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends midtrxGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: midtrxGroupByArgs['orderBy'] }
        : { orderBy?: midtrxGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, midtrxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMidtrxGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the midtrx model
   */
  readonly fields: midtrxFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for midtrx.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__midtrxClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the midtrx model
   */ 
  interface midtrxFieldRefs {
    readonly id: FieldRef<"midtrx", 'String'>
    readonly tz: FieldRef<"midtrx", 'DateTime'>
    readonly type: FieldRef<"midtrx", 'String'>
    readonly payload: FieldRef<"midtrx", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * midtrx findUnique
   */
  export type midtrxFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter, which midtrx to fetch.
     */
    where: midtrxWhereUniqueInput
  }

  /**
   * midtrx findUniqueOrThrow
   */
  export type midtrxFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter, which midtrx to fetch.
     */
    where: midtrxWhereUniqueInput
  }

  /**
   * midtrx findFirst
   */
  export type midtrxFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter, which midtrx to fetch.
     */
    where?: midtrxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of midtrxes to fetch.
     */
    orderBy?: midtrxOrderByWithRelationInput | midtrxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for midtrxes.
     */
    cursor?: midtrxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` midtrxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` midtrxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of midtrxes.
     */
    distinct?: MidtrxScalarFieldEnum | MidtrxScalarFieldEnum[]
  }

  /**
   * midtrx findFirstOrThrow
   */
  export type midtrxFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter, which midtrx to fetch.
     */
    where?: midtrxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of midtrxes to fetch.
     */
    orderBy?: midtrxOrderByWithRelationInput | midtrxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for midtrxes.
     */
    cursor?: midtrxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` midtrxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` midtrxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of midtrxes.
     */
    distinct?: MidtrxScalarFieldEnum | MidtrxScalarFieldEnum[]
  }

  /**
   * midtrx findMany
   */
  export type midtrxFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter, which midtrxes to fetch.
     */
    where?: midtrxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of midtrxes to fetch.
     */
    orderBy?: midtrxOrderByWithRelationInput | midtrxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing midtrxes.
     */
    cursor?: midtrxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` midtrxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` midtrxes.
     */
    skip?: number
    distinct?: MidtrxScalarFieldEnum | MidtrxScalarFieldEnum[]
  }

  /**
   * midtrx create
   */
  export type midtrxCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * The data needed to create a midtrx.
     */
    data: XOR<midtrxCreateInput, midtrxUncheckedCreateInput>
  }

  /**
   * midtrx createMany
   */
  export type midtrxCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many midtrxes.
     */
    data: midtrxCreateManyInput | midtrxCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * midtrx createManyAndReturn
   */
  export type midtrxCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many midtrxes.
     */
    data: midtrxCreateManyInput | midtrxCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * midtrx update
   */
  export type midtrxUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * The data needed to update a midtrx.
     */
    data: XOR<midtrxUpdateInput, midtrxUncheckedUpdateInput>
    /**
     * Choose, which midtrx to update.
     */
    where: midtrxWhereUniqueInput
  }

  /**
   * midtrx updateMany
   */
  export type midtrxUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update midtrxes.
     */
    data: XOR<midtrxUpdateManyMutationInput, midtrxUncheckedUpdateManyInput>
    /**
     * Filter which midtrxes to update
     */
    where?: midtrxWhereInput
  }

  /**
   * midtrx upsert
   */
  export type midtrxUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * The filter to search for the midtrx to update in case it exists.
     */
    where: midtrxWhereUniqueInput
    /**
     * In case the midtrx found by the `where` argument doesn't exist, create a new midtrx with this data.
     */
    create: XOR<midtrxCreateInput, midtrxUncheckedCreateInput>
    /**
     * In case the midtrx was found with the provided `where` argument, update it with this data.
     */
    update: XOR<midtrxUpdateInput, midtrxUncheckedUpdateInput>
  }

  /**
   * midtrx delete
   */
  export type midtrxDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
    /**
     * Filter which midtrx to delete.
     */
    where: midtrxWhereUniqueInput
  }

  /**
   * midtrx deleteMany
   */
  export type midtrxDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which midtrxes to delete
     */
    where?: midtrxWhereInput
  }

  /**
   * midtrx without action
   */
  export type midtrxDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the midtrx
     */
    select?: midtrxSelect<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    strike_price: Decimal | null
    real_price: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    strike_price: Decimal | null
    real_price: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    strike_price: Decimal | null
    real_price: Decimal | null
    desc: string | null
    status: string | null
    currency: string | null
    deleted_at: Date | null
    img_file: string | null
    cover: string | null
    product_file: string | null
    sku: string | null
    id_author: string | null
    published_date: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    strike_price: Decimal | null
    real_price: Decimal | null
    desc: string | null
    status: string | null
    currency: string | null
    deleted_at: Date | null
    img_file: string | null
    cover: string | null
    product_file: string | null
    sku: string | null
    id_author: string | null
    published_date: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    strike_price: number
    real_price: number
    desc: number
    info: number
    status: number
    currency: number
    deleted_at: number
    img_file: number
    cover: number
    product_file: number
    sku: number
    id_author: number
    published_date: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    strike_price?: true
    real_price?: true
  }

  export type ProductSumAggregateInputType = {
    strike_price?: true
    real_price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    desc?: true
    status?: true
    currency?: true
    deleted_at?: true
    img_file?: true
    cover?: true
    product_file?: true
    sku?: true
    id_author?: true
    published_date?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    desc?: true
    status?: true
    currency?: true
    deleted_at?: true
    img_file?: true
    cover?: true
    product_file?: true
    sku?: true
    id_author?: true
    published_date?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    strike_price?: true
    real_price?: true
    desc?: true
    info?: true
    status?: true
    currency?: true
    deleted_at?: true
    img_file?: true
    cover?: true
    product_file?: true
    sku?: true
    id_author?: true
    published_date?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    slug: string
    strike_price: Decimal | null
    real_price: Decimal
    desc: string
    info: JsonValue
    status: string
    currency: string
    deleted_at: Date | null
    img_file: string
    cover: string
    product_file: string
    sku: string
    id_author: string | null
    published_date: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    desc?: boolean
    info?: boolean
    status?: boolean
    currency?: boolean
    deleted_at?: boolean
    img_file?: boolean
    cover?: boolean
    product_file?: boolean
    sku?: boolean
    id_author?: boolean
    published_date?: boolean
    bundle_product?: boolean | product$bundle_productArgs<ExtArgs>
    customer_reader?: boolean | product$customer_readerArgs<ExtArgs>
    author?: boolean | product$authorArgs<ExtArgs>
    product_category?: boolean | product$product_categoryArgs<ExtArgs>
    t_sales_download?: boolean | product$t_sales_downloadArgs<ExtArgs>
    t_sales_line?: boolean | product$t_sales_lineArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    desc?: boolean
    info?: boolean
    status?: boolean
    currency?: boolean
    deleted_at?: boolean
    img_file?: boolean
    cover?: boolean
    product_file?: boolean
    sku?: boolean
    id_author?: boolean
    published_date?: boolean
    author?: boolean | product$authorArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    strike_price?: boolean
    real_price?: boolean
    desc?: boolean
    info?: boolean
    status?: boolean
    currency?: boolean
    deleted_at?: boolean
    img_file?: boolean
    cover?: boolean
    product_file?: boolean
    sku?: boolean
    id_author?: boolean
    published_date?: boolean
  }

  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle_product?: boolean | product$bundle_productArgs<ExtArgs>
    customer_reader?: boolean | product$customer_readerArgs<ExtArgs>
    author?: boolean | product$authorArgs<ExtArgs>
    product_category?: boolean | product$product_categoryArgs<ExtArgs>
    t_sales_download?: boolean | product$t_sales_downloadArgs<ExtArgs>
    t_sales_line?: boolean | product$t_sales_lineArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type productIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | product$authorArgs<ExtArgs>
  }

  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      bundle_product: Prisma.$bundle_productPayload<ExtArgs>[]
      customer_reader: Prisma.$customer_readerPayload<ExtArgs>[]
      author: Prisma.$authorPayload<ExtArgs> | null
      product_category: Prisma.$product_categoryPayload<ExtArgs>[]
      t_sales_download: Prisma.$t_sales_downloadPayload<ExtArgs>[]
      t_sales_line: Prisma.$t_sales_linePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      strike_price: Prisma.Decimal | null
      real_price: Prisma.Decimal
      desc: string
      info: Prisma.JsonValue
      status: string
      currency: string
      deleted_at: Date | null
      img_file: string
      cover: string
      product_file: string
      sku: string
      id_author: string | null
      published_date: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productFindUniqueArgs>(args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productFindFirstArgs>(args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productFindManyArgs>(args?: SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends productCreateArgs>(args: SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productCreateManyArgs>(args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {productCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends productCreateManyAndReturnArgs>(args?: SelectSubset<T, productCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends productDeleteArgs>(args: SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productUpdateArgs>(args: SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productDeleteManyArgs>(args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productUpdateManyArgs>(args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends productUpsertArgs>(args: SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle_product<T extends product$bundle_productArgs<ExtArgs> = {}>(args?: Subset<T, product$bundle_productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bundle_productPayload<ExtArgs>, T, "findMany"> | Null>
    customer_reader<T extends product$customer_readerArgs<ExtArgs> = {}>(args?: Subset<T, product$customer_readerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customer_readerPayload<ExtArgs>, T, "findMany"> | Null>
    author<T extends product$authorArgs<ExtArgs> = {}>(args?: Subset<T, product$authorArgs<ExtArgs>>): Prisma__authorClient<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    product_category<T extends product$product_categoryArgs<ExtArgs> = {}>(args?: Subset<T, product$product_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findMany"> | Null>
    t_sales_download<T extends product$t_sales_downloadArgs<ExtArgs> = {}>(args?: Subset<T, product$t_sales_downloadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findMany"> | Null>
    t_sales_line<T extends product$t_sales_lineArgs<ExtArgs> = {}>(args?: Subset<T, product$t_sales_lineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product model
   */ 
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'String'>
    readonly name: FieldRef<"product", 'String'>
    readonly slug: FieldRef<"product", 'String'>
    readonly strike_price: FieldRef<"product", 'Decimal'>
    readonly real_price: FieldRef<"product", 'Decimal'>
    readonly desc: FieldRef<"product", 'String'>
    readonly info: FieldRef<"product", 'Json'>
    readonly status: FieldRef<"product", 'String'>
    readonly currency: FieldRef<"product", 'String'>
    readonly deleted_at: FieldRef<"product", 'DateTime'>
    readonly img_file: FieldRef<"product", 'String'>
    readonly cover: FieldRef<"product", 'String'>
    readonly product_file: FieldRef<"product", 'String'>
    readonly sku: FieldRef<"product", 'String'>
    readonly id_author: FieldRef<"product", 'String'>
    readonly published_date: FieldRef<"product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product createManyAndReturn
   */
  export type productCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }

  /**
   * product.bundle_product
   */
  export type product$bundle_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle_product
     */
    select?: bundle_productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundle_productInclude<ExtArgs> | null
    where?: bundle_productWhereInput
    orderBy?: bundle_productOrderByWithRelationInput | bundle_productOrderByWithRelationInput[]
    cursor?: bundle_productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Bundle_productScalarFieldEnum | Bundle_productScalarFieldEnum[]
  }

  /**
   * product.customer_reader
   */
  export type product$customer_readerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer_reader
     */
    select?: customer_readerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customer_readerInclude<ExtArgs> | null
    where?: customer_readerWhereInput
    orderBy?: customer_readerOrderByWithRelationInput | customer_readerOrderByWithRelationInput[]
    cursor?: customer_readerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Customer_readerScalarFieldEnum | Customer_readerScalarFieldEnum[]
  }

  /**
   * product.author
   */
  export type product$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    where?: authorWhereInput
  }

  /**
   * product.product_category
   */
  export type product$product_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    where?: product_categoryWhereInput
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    cursor?: product_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product.t_sales_download
   */
  export type product$t_sales_downloadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    where?: t_sales_downloadWhereInput
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    cursor?: t_sales_downloadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_sales_downloadScalarFieldEnum | T_sales_downloadScalarFieldEnum[]
  }

  /**
   * product.t_sales_line
   */
  export type product$t_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    where?: t_sales_lineWhereInput
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    cursor?: t_sales_lineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model product_category
   */

  export type AggregateProduct_category = {
    _count: Product_categoryCountAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  export type Product_categoryMinAggregateOutputType = {
    id_product: string | null
    id_category: string | null
    id: string | null
  }

  export type Product_categoryMaxAggregateOutputType = {
    id_product: string | null
    id_category: string | null
    id: string | null
  }

  export type Product_categoryCountAggregateOutputType = {
    id_product: number
    id_category: number
    id: number
    _all: number
  }


  export type Product_categoryMinAggregateInputType = {
    id_product?: true
    id_category?: true
    id?: true
  }

  export type Product_categoryMaxAggregateInputType = {
    id_product?: true
    id_category?: true
    id?: true
  }

  export type Product_categoryCountAggregateInputType = {
    id_product?: true
    id_category?: true
    id?: true
    _all?: true
  }

  export type Product_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_category to aggregate.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_categories
    **/
    _count?: true | Product_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_categoryMaxAggregateInputType
  }

  export type GetProduct_categoryAggregateType<T extends Product_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_category[P]>
      : GetScalarType<T[P], AggregateProduct_category[P]>
  }




  export type product_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_categoryWhereInput
    orderBy?: product_categoryOrderByWithAggregationInput | product_categoryOrderByWithAggregationInput[]
    by: Product_categoryScalarFieldEnum[] | Product_categoryScalarFieldEnum
    having?: product_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_categoryCountAggregateInputType | true
    _min?: Product_categoryMinAggregateInputType
    _max?: Product_categoryMaxAggregateInputType
  }

  export type Product_categoryGroupByOutputType = {
    id_product: string
    id_category: string
    id: string
    _count: Product_categoryCountAggregateOutputType | null
    _min: Product_categoryMinAggregateOutputType | null
    _max: Product_categoryMaxAggregateOutputType | null
  }

  type GetProduct_categoryGroupByPayload<T extends product_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Product_categoryGroupByOutputType[P]>
        }
      >
    >


  export type product_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_product?: boolean
    id_category?: boolean
    id?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_category"]>

  export type product_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_product?: boolean
    id_category?: boolean
    id?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_category"]>

  export type product_categorySelectScalar = {
    id_product?: boolean
    id_category?: boolean
    id?: boolean
  }

  export type product_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }
  export type product_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }

  export type $product_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_category"
    objects: {
      category: Prisma.$categoryPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_product: string
      id_category: string
      id: string
    }, ExtArgs["result"]["product_category"]>
    composites: {}
  }

  type product_categoryGetPayload<S extends boolean | null | undefined | product_categoryDefaultArgs> = $Result.GetResult<Prisma.$product_categoryPayload, S>

  type product_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_categoryCountAggregateInputType | true
    }

  export interface product_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_category'], meta: { name: 'product_category' } }
    /**
     * Find zero or one Product_category that matches the filter.
     * @param {product_categoryFindUniqueArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends product_categoryFindUniqueArgs>(args: SelectSubset<T, product_categoryFindUniqueArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product_category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_categoryFindUniqueOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends product_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, product_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindFirstArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends product_categoryFindFirstArgs>(args?: SelectSubset<T, product_categoryFindFirstArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindFirstOrThrowArgs} args - Arguments to find a Product_category
     * @example
     * // Get one Product_category
     * const product_category = await prisma.product_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends product_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, product_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Product_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_categories
     * const product_categories = await prisma.product_category.findMany()
     * 
     * // Get first 10 Product_categories
     * const product_categories = await prisma.product_category.findMany({ take: 10 })
     * 
     * // Only select the `id_product`
     * const product_categoryWithId_productOnly = await prisma.product_category.findMany({ select: { id_product: true } })
     * 
     */
    findMany<T extends product_categoryFindManyArgs>(args?: SelectSubset<T, product_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product_category.
     * @param {product_categoryCreateArgs} args - Arguments to create a Product_category.
     * @example
     * // Create one Product_category
     * const Product_category = await prisma.product_category.create({
     *   data: {
     *     // ... data to create a Product_category
     *   }
     * })
     * 
     */
    create<T extends product_categoryCreateArgs>(args: SelectSubset<T, product_categoryCreateArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Product_categories.
     * @param {product_categoryCreateManyArgs} args - Arguments to create many Product_categories.
     * @example
     * // Create many Product_categories
     * const product_category = await prisma.product_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends product_categoryCreateManyArgs>(args?: SelectSubset<T, product_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Product_categories and returns the data saved in the database.
     * @param {product_categoryCreateManyAndReturnArgs} args - Arguments to create many Product_categories.
     * @example
     * // Create many Product_categories
     * const product_category = await prisma.product_category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Product_categories and only return the `id_product`
     * const product_categoryWithId_productOnly = await prisma.product_category.createManyAndReturn({ 
     *   select: { id_product: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends product_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, product_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product_category.
     * @param {product_categoryDeleteArgs} args - Arguments to delete one Product_category.
     * @example
     * // Delete one Product_category
     * const Product_category = await prisma.product_category.delete({
     *   where: {
     *     // ... filter to delete one Product_category
     *   }
     * })
     * 
     */
    delete<T extends product_categoryDeleteArgs>(args: SelectSubset<T, product_categoryDeleteArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product_category.
     * @param {product_categoryUpdateArgs} args - Arguments to update one Product_category.
     * @example
     * // Update one Product_category
     * const product_category = await prisma.product_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends product_categoryUpdateArgs>(args: SelectSubset<T, product_categoryUpdateArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Product_categories.
     * @param {product_categoryDeleteManyArgs} args - Arguments to filter Product_categories to delete.
     * @example
     * // Delete a few Product_categories
     * const { count } = await prisma.product_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends product_categoryDeleteManyArgs>(args?: SelectSubset<T, product_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_categories
     * const product_category = await prisma.product_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends product_categoryUpdateManyArgs>(args: SelectSubset<T, product_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_category.
     * @param {product_categoryUpsertArgs} args - Arguments to update or create a Product_category.
     * @example
     * // Update or create a Product_category
     * const product_category = await prisma.product_category.upsert({
     *   create: {
     *     // ... data to create a Product_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_category we want to update
     *   }
     * })
     */
    upsert<T extends product_categoryUpsertArgs>(args: SelectSubset<T, product_categoryUpsertArgs<ExtArgs>>): Prisma__product_categoryClient<$Result.GetResult<Prisma.$product_categoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryCountArgs} args - Arguments to filter Product_categories to count.
     * @example
     * // Count the number of Product_categories
     * const count = await prisma.product_category.count({
     *   where: {
     *     // ... the filter for the Product_categories we want to count
     *   }
     * })
    **/
    count<T extends product_categoryCountArgs>(
      args?: Subset<T, product_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_categoryAggregateArgs>(args: Subset<T, Product_categoryAggregateArgs>): Prisma.PrismaPromise<GetProduct_categoryAggregateType<T>>

    /**
     * Group by Product_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_categoryGroupByArgs['orderBy'] }
        : { orderBy?: product_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_category model
   */
  readonly fields: product_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoryDefaultArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product_category model
   */ 
  interface product_categoryFieldRefs {
    readonly id_product: FieldRef<"product_category", 'String'>
    readonly id_category: FieldRef<"product_category", 'String'>
    readonly id: FieldRef<"product_category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product_category findUnique
   */
  export type product_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category findUniqueOrThrow
   */
  export type product_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category findFirst
   */
  export type product_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category findFirstOrThrow
   */
  export type product_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_category to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category findMany
   */
  export type product_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where?: product_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoryOrderByWithRelationInput | product_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_categories.
     */
    cursor?: product_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    distinct?: Product_categoryScalarFieldEnum | Product_categoryScalarFieldEnum[]
  }

  /**
   * product_category create
   */
  export type product_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a product_category.
     */
    data: XOR<product_categoryCreateInput, product_categoryUncheckedCreateInput>
  }

  /**
   * product_category createMany
   */
  export type product_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_categories.
     */
    data: product_categoryCreateManyInput | product_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_category createManyAndReturn
   */
  export type product_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many product_categories.
     */
    data: product_categoryCreateManyInput | product_categoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * product_category update
   */
  export type product_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a product_category.
     */
    data: XOR<product_categoryUpdateInput, product_categoryUncheckedUpdateInput>
    /**
     * Choose, which product_category to update.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category updateMany
   */
  export type product_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_categories.
     */
    data: XOR<product_categoryUpdateManyMutationInput, product_categoryUncheckedUpdateManyInput>
    /**
     * Filter which product_categories to update
     */
    where?: product_categoryWhereInput
  }

  /**
   * product_category upsert
   */
  export type product_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the product_category to update in case it exists.
     */
    where: product_categoryWhereUniqueInput
    /**
     * In case the product_category found by the `where` argument doesn't exist, create a new product_category with this data.
     */
    create: XOR<product_categoryCreateInput, product_categoryUncheckedCreateInput>
    /**
     * In case the product_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_categoryUpdateInput, product_categoryUncheckedUpdateInput>
  }

  /**
   * product_category delete
   */
  export type product_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
    /**
     * Filter which product_category to delete.
     */
    where: product_categoryWhereUniqueInput
  }

  /**
   * product_category deleteMany
   */
  export type product_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_categories to delete
     */
    where?: product_categoryWhereInput
  }

  /**
   * product_category without action
   */
  export type product_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_category
     */
    select?: product_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoryInclude<ExtArgs> | null
  }


  /**
   * Model t_sales
   */

  export type AggregateT_sales = {
    _count: T_salesCountAggregateOutputType | null
    _avg: T_salesAvgAggregateOutputType | null
    _sum: T_salesSumAggregateOutputType | null
    _min: T_salesMinAggregateOutputType | null
    _max: T_salesMaxAggregateOutputType | null
  }

  export type T_salesAvgAggregateOutputType = {
    total: Decimal | null
  }

  export type T_salesSumAggregateOutputType = {
    total: Decimal | null
  }

  export type T_salesMinAggregateOutputType = {
    id: string | null
    id_customer: string | null
    status: string | null
    total: Decimal | null
    currency: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    midtrans_order_id: string | null
  }

  export type T_salesMaxAggregateOutputType = {
    id: string | null
    id_customer: string | null
    status: string | null
    total: Decimal | null
    currency: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    midtrans_order_id: string | null
  }

  export type T_salesCountAggregateOutputType = {
    id: number
    id_customer: number
    status: number
    total: number
    currency: number
    info: number
    created_at: number
    updated_at: number
    deleted_at: number
    midtrans_order_id: number
    midtrans_success: number
    midtrans_pending: number
    midtrans_error: number
    _all: number
  }


  export type T_salesAvgAggregateInputType = {
    total?: true
  }

  export type T_salesSumAggregateInputType = {
    total?: true
  }

  export type T_salesMinAggregateInputType = {
    id?: true
    id_customer?: true
    status?: true
    total?: true
    currency?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    midtrans_order_id?: true
  }

  export type T_salesMaxAggregateInputType = {
    id?: true
    id_customer?: true
    status?: true
    total?: true
    currency?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    midtrans_order_id?: true
  }

  export type T_salesCountAggregateInputType = {
    id?: true
    id_customer?: true
    status?: true
    total?: true
    currency?: true
    info?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    midtrans_order_id?: true
    midtrans_success?: true
    midtrans_pending?: true
    midtrans_error?: true
    _all?: true
  }

  export type T_salesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales to aggregate.
     */
    where?: t_salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales to fetch.
     */
    orderBy?: t_salesOrderByWithRelationInput | t_salesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: t_salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned t_sales
    **/
    _count?: true | T_salesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: T_salesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: T_salesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: T_salesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: T_salesMaxAggregateInputType
  }

  export type GetT_salesAggregateType<T extends T_salesAggregateArgs> = {
        [P in keyof T & keyof AggregateT_sales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateT_sales[P]>
      : GetScalarType<T[P], AggregateT_sales[P]>
  }




  export type t_salesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_salesWhereInput
    orderBy?: t_salesOrderByWithAggregationInput | t_salesOrderByWithAggregationInput[]
    by: T_salesScalarFieldEnum[] | T_salesScalarFieldEnum
    having?: t_salesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: T_salesCountAggregateInputType | true
    _avg?: T_salesAvgAggregateInputType
    _sum?: T_salesSumAggregateInputType
    _min?: T_salesMinAggregateInputType
    _max?: T_salesMaxAggregateInputType
  }

  export type T_salesGroupByOutputType = {
    id: string
    id_customer: string
    status: string
    total: Decimal
    currency: string
    info: JsonValue
    created_at: Date
    updated_at: Date | null
    deleted_at: Date | null
    midtrans_order_id: string
    midtrans_success: JsonValue | null
    midtrans_pending: JsonValue | null
    midtrans_error: JsonValue | null
    _count: T_salesCountAggregateOutputType | null
    _avg: T_salesAvgAggregateOutputType | null
    _sum: T_salesSumAggregateOutputType | null
    _min: T_salesMinAggregateOutputType | null
    _max: T_salesMaxAggregateOutputType | null
  }

  type GetT_salesGroupByPayload<T extends t_salesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<T_salesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof T_salesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], T_salesGroupByOutputType[P]>
            : GetScalarType<T[P], T_salesGroupByOutputType[P]>
        }
      >
    >


  export type t_salesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_customer?: boolean
    status?: boolean
    total?: boolean
    currency?: boolean
    info?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    midtrans_order_id?: boolean
    midtrans_success?: boolean
    midtrans_pending?: boolean
    midtrans_error?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    t_sales_line?: boolean | t_sales$t_sales_lineArgs<ExtArgs>
    _count?: boolean | T_salesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales"]>

  export type t_salesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_customer?: boolean
    status?: boolean
    total?: boolean
    currency?: boolean
    info?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    midtrans_order_id?: boolean
    midtrans_success?: boolean
    midtrans_pending?: boolean
    midtrans_error?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales"]>

  export type t_salesSelectScalar = {
    id?: boolean
    id_customer?: boolean
    status?: boolean
    total?: boolean
    currency?: boolean
    info?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    midtrans_order_id?: boolean
    midtrans_success?: boolean
    midtrans_pending?: boolean
    midtrans_error?: boolean
  }

  export type t_salesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    t_sales_line?: boolean | t_sales$t_sales_lineArgs<ExtArgs>
    _count?: boolean | T_salesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type t_salesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }

  export type $t_salesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "t_sales"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      t_sales_line: Prisma.$t_sales_linePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_customer: string
      status: string
      total: Prisma.Decimal
      currency: string
      info: Prisma.JsonValue
      created_at: Date
      updated_at: Date | null
      deleted_at: Date | null
      midtrans_order_id: string
      midtrans_success: Prisma.JsonValue | null
      midtrans_pending: Prisma.JsonValue | null
      midtrans_error: Prisma.JsonValue | null
    }, ExtArgs["result"]["t_sales"]>
    composites: {}
  }

  type t_salesGetPayload<S extends boolean | null | undefined | t_salesDefaultArgs> = $Result.GetResult<Prisma.$t_salesPayload, S>

  type t_salesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<t_salesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: T_salesCountAggregateInputType | true
    }

  export interface t_salesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['t_sales'], meta: { name: 't_sales' } }
    /**
     * Find zero or one T_sales that matches the filter.
     * @param {t_salesFindUniqueArgs} args - Arguments to find a T_sales
     * @example
     * // Get one T_sales
     * const t_sales = await prisma.t_sales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends t_salesFindUniqueArgs>(args: SelectSubset<T, t_salesFindUniqueArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one T_sales that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {t_salesFindUniqueOrThrowArgs} args - Arguments to find a T_sales
     * @example
     * // Get one T_sales
     * const t_sales = await prisma.t_sales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends t_salesFindUniqueOrThrowArgs>(args: SelectSubset<T, t_salesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first T_sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesFindFirstArgs} args - Arguments to find a T_sales
     * @example
     * // Get one T_sales
     * const t_sales = await prisma.t_sales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends t_salesFindFirstArgs>(args?: SelectSubset<T, t_salesFindFirstArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first T_sales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesFindFirstOrThrowArgs} args - Arguments to find a T_sales
     * @example
     * // Get one T_sales
     * const t_sales = await prisma.t_sales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends t_salesFindFirstOrThrowArgs>(args?: SelectSubset<T, t_salesFindFirstOrThrowArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more T_sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all T_sales
     * const t_sales = await prisma.t_sales.findMany()
     * 
     * // Get first 10 T_sales
     * const t_sales = await prisma.t_sales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const t_salesWithIdOnly = await prisma.t_sales.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends t_salesFindManyArgs>(args?: SelectSubset<T, t_salesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a T_sales.
     * @param {t_salesCreateArgs} args - Arguments to create a T_sales.
     * @example
     * // Create one T_sales
     * const T_sales = await prisma.t_sales.create({
     *   data: {
     *     // ... data to create a T_sales
     *   }
     * })
     * 
     */
    create<T extends t_salesCreateArgs>(args: SelectSubset<T, t_salesCreateArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many T_sales.
     * @param {t_salesCreateManyArgs} args - Arguments to create many T_sales.
     * @example
     * // Create many T_sales
     * const t_sales = await prisma.t_sales.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends t_salesCreateManyArgs>(args?: SelectSubset<T, t_salesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many T_sales and returns the data saved in the database.
     * @param {t_salesCreateManyAndReturnArgs} args - Arguments to create many T_sales.
     * @example
     * // Create many T_sales
     * const t_sales = await prisma.t_sales.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many T_sales and only return the `id`
     * const t_salesWithIdOnly = await prisma.t_sales.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends t_salesCreateManyAndReturnArgs>(args?: SelectSubset<T, t_salesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a T_sales.
     * @param {t_salesDeleteArgs} args - Arguments to delete one T_sales.
     * @example
     * // Delete one T_sales
     * const T_sales = await prisma.t_sales.delete({
     *   where: {
     *     // ... filter to delete one T_sales
     *   }
     * })
     * 
     */
    delete<T extends t_salesDeleteArgs>(args: SelectSubset<T, t_salesDeleteArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one T_sales.
     * @param {t_salesUpdateArgs} args - Arguments to update one T_sales.
     * @example
     * // Update one T_sales
     * const t_sales = await prisma.t_sales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends t_salesUpdateArgs>(args: SelectSubset<T, t_salesUpdateArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more T_sales.
     * @param {t_salesDeleteManyArgs} args - Arguments to filter T_sales to delete.
     * @example
     * // Delete a few T_sales
     * const { count } = await prisma.t_sales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends t_salesDeleteManyArgs>(args?: SelectSubset<T, t_salesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more T_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many T_sales
     * const t_sales = await prisma.t_sales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends t_salesUpdateManyArgs>(args: SelectSubset<T, t_salesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one T_sales.
     * @param {t_salesUpsertArgs} args - Arguments to update or create a T_sales.
     * @example
     * // Update or create a T_sales
     * const t_sales = await prisma.t_sales.upsert({
     *   create: {
     *     // ... data to create a T_sales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the T_sales we want to update
     *   }
     * })
     */
    upsert<T extends t_salesUpsertArgs>(args: SelectSubset<T, t_salesUpsertArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of T_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesCountArgs} args - Arguments to filter T_sales to count.
     * @example
     * // Count the number of T_sales
     * const count = await prisma.t_sales.count({
     *   where: {
     *     // ... the filter for the T_sales we want to count
     *   }
     * })
    **/
    count<T extends t_salesCountArgs>(
      args?: Subset<T, t_salesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], T_salesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a T_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {T_salesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends T_salesAggregateArgs>(args: Subset<T, T_salesAggregateArgs>): Prisma.PrismaPromise<GetT_salesAggregateType<T>>

    /**
     * Group by T_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_salesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends t_salesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: t_salesGroupByArgs['orderBy'] }
        : { orderBy?: t_salesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, t_salesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetT_salesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the t_sales model
   */
  readonly fields: t_salesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for t_sales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__t_salesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    t_sales_line<T extends t_sales$t_sales_lineArgs<ExtArgs> = {}>(args?: Subset<T, t_sales$t_sales_lineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the t_sales model
   */ 
  interface t_salesFieldRefs {
    readonly id: FieldRef<"t_sales", 'String'>
    readonly id_customer: FieldRef<"t_sales", 'String'>
    readonly status: FieldRef<"t_sales", 'String'>
    readonly total: FieldRef<"t_sales", 'Decimal'>
    readonly currency: FieldRef<"t_sales", 'String'>
    readonly info: FieldRef<"t_sales", 'Json'>
    readonly created_at: FieldRef<"t_sales", 'DateTime'>
    readonly updated_at: FieldRef<"t_sales", 'DateTime'>
    readonly deleted_at: FieldRef<"t_sales", 'DateTime'>
    readonly midtrans_order_id: FieldRef<"t_sales", 'String'>
    readonly midtrans_success: FieldRef<"t_sales", 'Json'>
    readonly midtrans_pending: FieldRef<"t_sales", 'Json'>
    readonly midtrans_error: FieldRef<"t_sales", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * t_sales findUnique
   */
  export type t_salesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter, which t_sales to fetch.
     */
    where: t_salesWhereUniqueInput
  }

  /**
   * t_sales findUniqueOrThrow
   */
  export type t_salesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter, which t_sales to fetch.
     */
    where: t_salesWhereUniqueInput
  }

  /**
   * t_sales findFirst
   */
  export type t_salesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter, which t_sales to fetch.
     */
    where?: t_salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales to fetch.
     */
    orderBy?: t_salesOrderByWithRelationInput | t_salesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales.
     */
    cursor?: t_salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales.
     */
    distinct?: T_salesScalarFieldEnum | T_salesScalarFieldEnum[]
  }

  /**
   * t_sales findFirstOrThrow
   */
  export type t_salesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter, which t_sales to fetch.
     */
    where?: t_salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales to fetch.
     */
    orderBy?: t_salesOrderByWithRelationInput | t_salesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales.
     */
    cursor?: t_salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales.
     */
    distinct?: T_salesScalarFieldEnum | T_salesScalarFieldEnum[]
  }

  /**
   * t_sales findMany
   */
  export type t_salesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter, which t_sales to fetch.
     */
    where?: t_salesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales to fetch.
     */
    orderBy?: t_salesOrderByWithRelationInput | t_salesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing t_sales.
     */
    cursor?: t_salesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales.
     */
    skip?: number
    distinct?: T_salesScalarFieldEnum | T_salesScalarFieldEnum[]
  }

  /**
   * t_sales create
   */
  export type t_salesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * The data needed to create a t_sales.
     */
    data: XOR<t_salesCreateInput, t_salesUncheckedCreateInput>
  }

  /**
   * t_sales createMany
   */
  export type t_salesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many t_sales.
     */
    data: t_salesCreateManyInput | t_salesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * t_sales createManyAndReturn
   */
  export type t_salesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many t_sales.
     */
    data: t_salesCreateManyInput | t_salesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * t_sales update
   */
  export type t_salesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * The data needed to update a t_sales.
     */
    data: XOR<t_salesUpdateInput, t_salesUncheckedUpdateInput>
    /**
     * Choose, which t_sales to update.
     */
    where: t_salesWhereUniqueInput
  }

  /**
   * t_sales updateMany
   */
  export type t_salesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update t_sales.
     */
    data: XOR<t_salesUpdateManyMutationInput, t_salesUncheckedUpdateManyInput>
    /**
     * Filter which t_sales to update
     */
    where?: t_salesWhereInput
  }

  /**
   * t_sales upsert
   */
  export type t_salesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * The filter to search for the t_sales to update in case it exists.
     */
    where: t_salesWhereUniqueInput
    /**
     * In case the t_sales found by the `where` argument doesn't exist, create a new t_sales with this data.
     */
    create: XOR<t_salesCreateInput, t_salesUncheckedCreateInput>
    /**
     * In case the t_sales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<t_salesUpdateInput, t_salesUncheckedUpdateInput>
  }

  /**
   * t_sales delete
   */
  export type t_salesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
    /**
     * Filter which t_sales to delete.
     */
    where: t_salesWhereUniqueInput
  }

  /**
   * t_sales deleteMany
   */
  export type t_salesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales to delete
     */
    where?: t_salesWhereInput
  }

  /**
   * t_sales.t_sales_line
   */
  export type t_sales$t_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    where?: t_sales_lineWhereInput
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    cursor?: t_sales_lineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * t_sales without action
   */
  export type t_salesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales
     */
    select?: t_salesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_salesInclude<ExtArgs> | null
  }


  /**
   * Model t_sales_download
   */

  export type AggregateT_sales_download = {
    _count: T_sales_downloadCountAggregateOutputType | null
    _min: T_sales_downloadMinAggregateOutputType | null
    _max: T_sales_downloadMaxAggregateOutputType | null
  }

  export type T_sales_downloadMinAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_customer: string | null
    downloaded_at: Date | null
    ip_address: string | null
    download_key: string | null
  }

  export type T_sales_downloadMaxAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_customer: string | null
    downloaded_at: Date | null
    ip_address: string | null
    download_key: string | null
  }

  export type T_sales_downloadCountAggregateOutputType = {
    id: number
    id_product: number
    id_customer: number
    downloaded_at: number
    ip_address: number
    download_key: number
    _all: number
  }


  export type T_sales_downloadMinAggregateInputType = {
    id?: true
    id_product?: true
    id_customer?: true
    downloaded_at?: true
    ip_address?: true
    download_key?: true
  }

  export type T_sales_downloadMaxAggregateInputType = {
    id?: true
    id_product?: true
    id_customer?: true
    downloaded_at?: true
    ip_address?: true
    download_key?: true
  }

  export type T_sales_downloadCountAggregateInputType = {
    id?: true
    id_product?: true
    id_customer?: true
    downloaded_at?: true
    ip_address?: true
    download_key?: true
    _all?: true
  }

  export type T_sales_downloadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales_download to aggregate.
     */
    where?: t_sales_downloadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_downloads to fetch.
     */
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: t_sales_downloadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_downloads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_downloads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned t_sales_downloads
    **/
    _count?: true | T_sales_downloadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: T_sales_downloadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: T_sales_downloadMaxAggregateInputType
  }

  export type GetT_sales_downloadAggregateType<T extends T_sales_downloadAggregateArgs> = {
        [P in keyof T & keyof AggregateT_sales_download]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateT_sales_download[P]>
      : GetScalarType<T[P], AggregateT_sales_download[P]>
  }




  export type t_sales_downloadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_downloadWhereInput
    orderBy?: t_sales_downloadOrderByWithAggregationInput | t_sales_downloadOrderByWithAggregationInput[]
    by: T_sales_downloadScalarFieldEnum[] | T_sales_downloadScalarFieldEnum
    having?: t_sales_downloadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: T_sales_downloadCountAggregateInputType | true
    _min?: T_sales_downloadMinAggregateInputType
    _max?: T_sales_downloadMaxAggregateInputType
  }

  export type T_sales_downloadGroupByOutputType = {
    id: string
    id_product: string
    id_customer: string
    downloaded_at: Date | null
    ip_address: string | null
    download_key: string
    _count: T_sales_downloadCountAggregateOutputType | null
    _min: T_sales_downloadMinAggregateOutputType | null
    _max: T_sales_downloadMaxAggregateOutputType | null
  }

  type GetT_sales_downloadGroupByPayload<T extends t_sales_downloadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<T_sales_downloadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof T_sales_downloadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], T_sales_downloadGroupByOutputType[P]>
            : GetScalarType<T[P], T_sales_downloadGroupByOutputType[P]>
        }
      >
    >


  export type t_sales_downloadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_product?: boolean
    id_customer?: boolean
    downloaded_at?: boolean
    ip_address?: boolean
    download_key?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales_download"]>

  export type t_sales_downloadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_product?: boolean
    id_customer?: boolean
    downloaded_at?: boolean
    ip_address?: boolean
    download_key?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales_download"]>

  export type t_sales_downloadSelectScalar = {
    id?: boolean
    id_product?: boolean
    id_customer?: boolean
    downloaded_at?: boolean
    ip_address?: boolean
    download_key?: boolean
  }

  export type t_sales_downloadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }
  export type t_sales_downloadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }

  export type $t_sales_downloadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "t_sales_download"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_product: string
      id_customer: string
      downloaded_at: Date | null
      ip_address: string | null
      download_key: string
    }, ExtArgs["result"]["t_sales_download"]>
    composites: {}
  }

  type t_sales_downloadGetPayload<S extends boolean | null | undefined | t_sales_downloadDefaultArgs> = $Result.GetResult<Prisma.$t_sales_downloadPayload, S>

  type t_sales_downloadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<t_sales_downloadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: T_sales_downloadCountAggregateInputType | true
    }

  export interface t_sales_downloadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['t_sales_download'], meta: { name: 't_sales_download' } }
    /**
     * Find zero or one T_sales_download that matches the filter.
     * @param {t_sales_downloadFindUniqueArgs} args - Arguments to find a T_sales_download
     * @example
     * // Get one T_sales_download
     * const t_sales_download = await prisma.t_sales_download.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends t_sales_downloadFindUniqueArgs>(args: SelectSubset<T, t_sales_downloadFindUniqueArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one T_sales_download that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {t_sales_downloadFindUniqueOrThrowArgs} args - Arguments to find a T_sales_download
     * @example
     * // Get one T_sales_download
     * const t_sales_download = await prisma.t_sales_download.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends t_sales_downloadFindUniqueOrThrowArgs>(args: SelectSubset<T, t_sales_downloadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first T_sales_download that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadFindFirstArgs} args - Arguments to find a T_sales_download
     * @example
     * // Get one T_sales_download
     * const t_sales_download = await prisma.t_sales_download.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends t_sales_downloadFindFirstArgs>(args?: SelectSubset<T, t_sales_downloadFindFirstArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first T_sales_download that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadFindFirstOrThrowArgs} args - Arguments to find a T_sales_download
     * @example
     * // Get one T_sales_download
     * const t_sales_download = await prisma.t_sales_download.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends t_sales_downloadFindFirstOrThrowArgs>(args?: SelectSubset<T, t_sales_downloadFindFirstOrThrowArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more T_sales_downloads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all T_sales_downloads
     * const t_sales_downloads = await prisma.t_sales_download.findMany()
     * 
     * // Get first 10 T_sales_downloads
     * const t_sales_downloads = await prisma.t_sales_download.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const t_sales_downloadWithIdOnly = await prisma.t_sales_download.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends t_sales_downloadFindManyArgs>(args?: SelectSubset<T, t_sales_downloadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a T_sales_download.
     * @param {t_sales_downloadCreateArgs} args - Arguments to create a T_sales_download.
     * @example
     * // Create one T_sales_download
     * const T_sales_download = await prisma.t_sales_download.create({
     *   data: {
     *     // ... data to create a T_sales_download
     *   }
     * })
     * 
     */
    create<T extends t_sales_downloadCreateArgs>(args: SelectSubset<T, t_sales_downloadCreateArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many T_sales_downloads.
     * @param {t_sales_downloadCreateManyArgs} args - Arguments to create many T_sales_downloads.
     * @example
     * // Create many T_sales_downloads
     * const t_sales_download = await prisma.t_sales_download.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends t_sales_downloadCreateManyArgs>(args?: SelectSubset<T, t_sales_downloadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many T_sales_downloads and returns the data saved in the database.
     * @param {t_sales_downloadCreateManyAndReturnArgs} args - Arguments to create many T_sales_downloads.
     * @example
     * // Create many T_sales_downloads
     * const t_sales_download = await prisma.t_sales_download.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many T_sales_downloads and only return the `id`
     * const t_sales_downloadWithIdOnly = await prisma.t_sales_download.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends t_sales_downloadCreateManyAndReturnArgs>(args?: SelectSubset<T, t_sales_downloadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a T_sales_download.
     * @param {t_sales_downloadDeleteArgs} args - Arguments to delete one T_sales_download.
     * @example
     * // Delete one T_sales_download
     * const T_sales_download = await prisma.t_sales_download.delete({
     *   where: {
     *     // ... filter to delete one T_sales_download
     *   }
     * })
     * 
     */
    delete<T extends t_sales_downloadDeleteArgs>(args: SelectSubset<T, t_sales_downloadDeleteArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one T_sales_download.
     * @param {t_sales_downloadUpdateArgs} args - Arguments to update one T_sales_download.
     * @example
     * // Update one T_sales_download
     * const t_sales_download = await prisma.t_sales_download.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends t_sales_downloadUpdateArgs>(args: SelectSubset<T, t_sales_downloadUpdateArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more T_sales_downloads.
     * @param {t_sales_downloadDeleteManyArgs} args - Arguments to filter T_sales_downloads to delete.
     * @example
     * // Delete a few T_sales_downloads
     * const { count } = await prisma.t_sales_download.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends t_sales_downloadDeleteManyArgs>(args?: SelectSubset<T, t_sales_downloadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more T_sales_downloads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many T_sales_downloads
     * const t_sales_download = await prisma.t_sales_download.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends t_sales_downloadUpdateManyArgs>(args: SelectSubset<T, t_sales_downloadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one T_sales_download.
     * @param {t_sales_downloadUpsertArgs} args - Arguments to update or create a T_sales_download.
     * @example
     * // Update or create a T_sales_download
     * const t_sales_download = await prisma.t_sales_download.upsert({
     *   create: {
     *     // ... data to create a T_sales_download
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the T_sales_download we want to update
     *   }
     * })
     */
    upsert<T extends t_sales_downloadUpsertArgs>(args: SelectSubset<T, t_sales_downloadUpsertArgs<ExtArgs>>): Prisma__t_sales_downloadClient<$Result.GetResult<Prisma.$t_sales_downloadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of T_sales_downloads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadCountArgs} args - Arguments to filter T_sales_downloads to count.
     * @example
     * // Count the number of T_sales_downloads
     * const count = await prisma.t_sales_download.count({
     *   where: {
     *     // ... the filter for the T_sales_downloads we want to count
     *   }
     * })
    **/
    count<T extends t_sales_downloadCountArgs>(
      args?: Subset<T, t_sales_downloadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], T_sales_downloadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a T_sales_download.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {T_sales_downloadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends T_sales_downloadAggregateArgs>(args: Subset<T, T_sales_downloadAggregateArgs>): Prisma.PrismaPromise<GetT_sales_downloadAggregateType<T>>

    /**
     * Group by T_sales_download.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_downloadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends t_sales_downloadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: t_sales_downloadGroupByArgs['orderBy'] }
        : { orderBy?: t_sales_downloadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, t_sales_downloadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetT_sales_downloadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the t_sales_download model
   */
  readonly fields: t_sales_downloadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for t_sales_download.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__t_sales_downloadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the t_sales_download model
   */ 
  interface t_sales_downloadFieldRefs {
    readonly id: FieldRef<"t_sales_download", 'String'>
    readonly id_product: FieldRef<"t_sales_download", 'String'>
    readonly id_customer: FieldRef<"t_sales_download", 'String'>
    readonly downloaded_at: FieldRef<"t_sales_download", 'DateTime'>
    readonly ip_address: FieldRef<"t_sales_download", 'String'>
    readonly download_key: FieldRef<"t_sales_download", 'String'>
  }
    

  // Custom InputTypes
  /**
   * t_sales_download findUnique
   */
  export type t_sales_downloadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_download to fetch.
     */
    where: t_sales_downloadWhereUniqueInput
  }

  /**
   * t_sales_download findUniqueOrThrow
   */
  export type t_sales_downloadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_download to fetch.
     */
    where: t_sales_downloadWhereUniqueInput
  }

  /**
   * t_sales_download findFirst
   */
  export type t_sales_downloadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_download to fetch.
     */
    where?: t_sales_downloadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_downloads to fetch.
     */
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales_downloads.
     */
    cursor?: t_sales_downloadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_downloads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_downloads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales_downloads.
     */
    distinct?: T_sales_downloadScalarFieldEnum | T_sales_downloadScalarFieldEnum[]
  }

  /**
   * t_sales_download findFirstOrThrow
   */
  export type t_sales_downloadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_download to fetch.
     */
    where?: t_sales_downloadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_downloads to fetch.
     */
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales_downloads.
     */
    cursor?: t_sales_downloadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_downloads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_downloads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales_downloads.
     */
    distinct?: T_sales_downloadScalarFieldEnum | T_sales_downloadScalarFieldEnum[]
  }

  /**
   * t_sales_download findMany
   */
  export type t_sales_downloadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_downloads to fetch.
     */
    where?: t_sales_downloadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_downloads to fetch.
     */
    orderBy?: t_sales_downloadOrderByWithRelationInput | t_sales_downloadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing t_sales_downloads.
     */
    cursor?: t_sales_downloadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_downloads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_downloads.
     */
    skip?: number
    distinct?: T_sales_downloadScalarFieldEnum | T_sales_downloadScalarFieldEnum[]
  }

  /**
   * t_sales_download create
   */
  export type t_sales_downloadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * The data needed to create a t_sales_download.
     */
    data: XOR<t_sales_downloadCreateInput, t_sales_downloadUncheckedCreateInput>
  }

  /**
   * t_sales_download createMany
   */
  export type t_sales_downloadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many t_sales_downloads.
     */
    data: t_sales_downloadCreateManyInput | t_sales_downloadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * t_sales_download createManyAndReturn
   */
  export type t_sales_downloadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many t_sales_downloads.
     */
    data: t_sales_downloadCreateManyInput | t_sales_downloadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * t_sales_download update
   */
  export type t_sales_downloadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * The data needed to update a t_sales_download.
     */
    data: XOR<t_sales_downloadUpdateInput, t_sales_downloadUncheckedUpdateInput>
    /**
     * Choose, which t_sales_download to update.
     */
    where: t_sales_downloadWhereUniqueInput
  }

  /**
   * t_sales_download updateMany
   */
  export type t_sales_downloadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update t_sales_downloads.
     */
    data: XOR<t_sales_downloadUpdateManyMutationInput, t_sales_downloadUncheckedUpdateManyInput>
    /**
     * Filter which t_sales_downloads to update
     */
    where?: t_sales_downloadWhereInput
  }

  /**
   * t_sales_download upsert
   */
  export type t_sales_downloadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * The filter to search for the t_sales_download to update in case it exists.
     */
    where: t_sales_downloadWhereUniqueInput
    /**
     * In case the t_sales_download found by the `where` argument doesn't exist, create a new t_sales_download with this data.
     */
    create: XOR<t_sales_downloadCreateInput, t_sales_downloadUncheckedCreateInput>
    /**
     * In case the t_sales_download was found with the provided `where` argument, update it with this data.
     */
    update: XOR<t_sales_downloadUpdateInput, t_sales_downloadUncheckedUpdateInput>
  }

  /**
   * t_sales_download delete
   */
  export type t_sales_downloadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
    /**
     * Filter which t_sales_download to delete.
     */
    where: t_sales_downloadWhereUniqueInput
  }

  /**
   * t_sales_download deleteMany
   */
  export type t_sales_downloadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales_downloads to delete
     */
    where?: t_sales_downloadWhereInput
  }

  /**
   * t_sales_download without action
   */
  export type t_sales_downloadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_download
     */
    select?: t_sales_downloadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_downloadInclude<ExtArgs> | null
  }


  /**
   * Model t_sales_line
   */

  export type AggregateT_sales_line = {
    _count: T_sales_lineCountAggregateOutputType | null
    _avg: T_sales_lineAvgAggregateOutputType | null
    _sum: T_sales_lineSumAggregateOutputType | null
    _min: T_sales_lineMinAggregateOutputType | null
    _max: T_sales_lineMaxAggregateOutputType | null
  }

  export type T_sales_lineAvgAggregateOutputType = {
    unit_price: Decimal | null
    qty: number | null
    total_price: Decimal | null
  }

  export type T_sales_lineSumAggregateOutputType = {
    unit_price: Decimal | null
    qty: number | null
    total_price: Decimal | null
  }

  export type T_sales_lineMinAggregateOutputType = {
    id: string | null
    id_sales: string | null
    unit_price: Decimal | null
    qty: number | null
    total_price: Decimal | null
    id_product: string | null
    id_bundle: string | null
  }

  export type T_sales_lineMaxAggregateOutputType = {
    id: string | null
    id_sales: string | null
    unit_price: Decimal | null
    qty: number | null
    total_price: Decimal | null
    id_product: string | null
    id_bundle: string | null
  }

  export type T_sales_lineCountAggregateOutputType = {
    id: number
    id_sales: number
    unit_price: number
    qty: number
    total_price: number
    id_product: number
    id_bundle: number
    _all: number
  }


  export type T_sales_lineAvgAggregateInputType = {
    unit_price?: true
    qty?: true
    total_price?: true
  }

  export type T_sales_lineSumAggregateInputType = {
    unit_price?: true
    qty?: true
    total_price?: true
  }

  export type T_sales_lineMinAggregateInputType = {
    id?: true
    id_sales?: true
    unit_price?: true
    qty?: true
    total_price?: true
    id_product?: true
    id_bundle?: true
  }

  export type T_sales_lineMaxAggregateInputType = {
    id?: true
    id_sales?: true
    unit_price?: true
    qty?: true
    total_price?: true
    id_product?: true
    id_bundle?: true
  }

  export type T_sales_lineCountAggregateInputType = {
    id?: true
    id_sales?: true
    unit_price?: true
    qty?: true
    total_price?: true
    id_product?: true
    id_bundle?: true
    _all?: true
  }

  export type T_sales_lineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales_line to aggregate.
     */
    where?: t_sales_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_lines to fetch.
     */
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: t_sales_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned t_sales_lines
    **/
    _count?: true | T_sales_lineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: T_sales_lineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: T_sales_lineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: T_sales_lineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: T_sales_lineMaxAggregateInputType
  }

  export type GetT_sales_lineAggregateType<T extends T_sales_lineAggregateArgs> = {
        [P in keyof T & keyof AggregateT_sales_line]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateT_sales_line[P]>
      : GetScalarType<T[P], AggregateT_sales_line[P]>
  }




  export type t_sales_lineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: t_sales_lineWhereInput
    orderBy?: t_sales_lineOrderByWithAggregationInput | t_sales_lineOrderByWithAggregationInput[]
    by: T_sales_lineScalarFieldEnum[] | T_sales_lineScalarFieldEnum
    having?: t_sales_lineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: T_sales_lineCountAggregateInputType | true
    _avg?: T_sales_lineAvgAggregateInputType
    _sum?: T_sales_lineSumAggregateInputType
    _min?: T_sales_lineMinAggregateInputType
    _max?: T_sales_lineMaxAggregateInputType
  }

  export type T_sales_lineGroupByOutputType = {
    id: string
    id_sales: string
    unit_price: Decimal
    qty: number
    total_price: Decimal
    id_product: string | null
    id_bundle: string | null
    _count: T_sales_lineCountAggregateOutputType | null
    _avg: T_sales_lineAvgAggregateOutputType | null
    _sum: T_sales_lineSumAggregateOutputType | null
    _min: T_sales_lineMinAggregateOutputType | null
    _max: T_sales_lineMaxAggregateOutputType | null
  }

  type GetT_sales_lineGroupByPayload<T extends t_sales_lineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<T_sales_lineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof T_sales_lineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], T_sales_lineGroupByOutputType[P]>
            : GetScalarType<T[P], T_sales_lineGroupByOutputType[P]>
        }
      >
    >


  export type t_sales_lineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_sales?: boolean
    unit_price?: boolean
    qty?: boolean
    total_price?: boolean
    id_product?: boolean
    id_bundle?: boolean
    bundle?: boolean | t_sales_line$bundleArgs<ExtArgs>
    product?: boolean | t_sales_line$productArgs<ExtArgs>
    t_sales?: boolean | t_salesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales_line"]>

  export type t_sales_lineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_sales?: boolean
    unit_price?: boolean
    qty?: boolean
    total_price?: boolean
    id_product?: boolean
    id_bundle?: boolean
    bundle?: boolean | t_sales_line$bundleArgs<ExtArgs>
    product?: boolean | t_sales_line$productArgs<ExtArgs>
    t_sales?: boolean | t_salesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["t_sales_line"]>

  export type t_sales_lineSelectScalar = {
    id?: boolean
    id_sales?: boolean
    unit_price?: boolean
    qty?: boolean
    total_price?: boolean
    id_product?: boolean
    id_bundle?: boolean
  }

  export type t_sales_lineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | t_sales_line$bundleArgs<ExtArgs>
    product?: boolean | t_sales_line$productArgs<ExtArgs>
    t_sales?: boolean | t_salesDefaultArgs<ExtArgs>
  }
  export type t_sales_lineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bundle?: boolean | t_sales_line$bundleArgs<ExtArgs>
    product?: boolean | t_sales_line$productArgs<ExtArgs>
    t_sales?: boolean | t_salesDefaultArgs<ExtArgs>
  }

  export type $t_sales_linePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "t_sales_line"
    objects: {
      bundle: Prisma.$bundlePayload<ExtArgs> | null
      product: Prisma.$productPayload<ExtArgs> | null
      t_sales: Prisma.$t_salesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_sales: string
      unit_price: Prisma.Decimal
      qty: number
      total_price: Prisma.Decimal
      id_product: string | null
      id_bundle: string | null
    }, ExtArgs["result"]["t_sales_line"]>
    composites: {}
  }

  type t_sales_lineGetPayload<S extends boolean | null | undefined | t_sales_lineDefaultArgs> = $Result.GetResult<Prisma.$t_sales_linePayload, S>

  type t_sales_lineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<t_sales_lineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: T_sales_lineCountAggregateInputType | true
    }

  export interface t_sales_lineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['t_sales_line'], meta: { name: 't_sales_line' } }
    /**
     * Find zero or one T_sales_line that matches the filter.
     * @param {t_sales_lineFindUniqueArgs} args - Arguments to find a T_sales_line
     * @example
     * // Get one T_sales_line
     * const t_sales_line = await prisma.t_sales_line.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends t_sales_lineFindUniqueArgs>(args: SelectSubset<T, t_sales_lineFindUniqueArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one T_sales_line that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {t_sales_lineFindUniqueOrThrowArgs} args - Arguments to find a T_sales_line
     * @example
     * // Get one T_sales_line
     * const t_sales_line = await prisma.t_sales_line.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends t_sales_lineFindUniqueOrThrowArgs>(args: SelectSubset<T, t_sales_lineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first T_sales_line that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineFindFirstArgs} args - Arguments to find a T_sales_line
     * @example
     * // Get one T_sales_line
     * const t_sales_line = await prisma.t_sales_line.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends t_sales_lineFindFirstArgs>(args?: SelectSubset<T, t_sales_lineFindFirstArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first T_sales_line that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineFindFirstOrThrowArgs} args - Arguments to find a T_sales_line
     * @example
     * // Get one T_sales_line
     * const t_sales_line = await prisma.t_sales_line.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends t_sales_lineFindFirstOrThrowArgs>(args?: SelectSubset<T, t_sales_lineFindFirstOrThrowArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more T_sales_lines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all T_sales_lines
     * const t_sales_lines = await prisma.t_sales_line.findMany()
     * 
     * // Get first 10 T_sales_lines
     * const t_sales_lines = await prisma.t_sales_line.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const t_sales_lineWithIdOnly = await prisma.t_sales_line.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends t_sales_lineFindManyArgs>(args?: SelectSubset<T, t_sales_lineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a T_sales_line.
     * @param {t_sales_lineCreateArgs} args - Arguments to create a T_sales_line.
     * @example
     * // Create one T_sales_line
     * const T_sales_line = await prisma.t_sales_line.create({
     *   data: {
     *     // ... data to create a T_sales_line
     *   }
     * })
     * 
     */
    create<T extends t_sales_lineCreateArgs>(args: SelectSubset<T, t_sales_lineCreateArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many T_sales_lines.
     * @param {t_sales_lineCreateManyArgs} args - Arguments to create many T_sales_lines.
     * @example
     * // Create many T_sales_lines
     * const t_sales_line = await prisma.t_sales_line.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends t_sales_lineCreateManyArgs>(args?: SelectSubset<T, t_sales_lineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many T_sales_lines and returns the data saved in the database.
     * @param {t_sales_lineCreateManyAndReturnArgs} args - Arguments to create many T_sales_lines.
     * @example
     * // Create many T_sales_lines
     * const t_sales_line = await prisma.t_sales_line.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many T_sales_lines and only return the `id`
     * const t_sales_lineWithIdOnly = await prisma.t_sales_line.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends t_sales_lineCreateManyAndReturnArgs>(args?: SelectSubset<T, t_sales_lineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a T_sales_line.
     * @param {t_sales_lineDeleteArgs} args - Arguments to delete one T_sales_line.
     * @example
     * // Delete one T_sales_line
     * const T_sales_line = await prisma.t_sales_line.delete({
     *   where: {
     *     // ... filter to delete one T_sales_line
     *   }
     * })
     * 
     */
    delete<T extends t_sales_lineDeleteArgs>(args: SelectSubset<T, t_sales_lineDeleteArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one T_sales_line.
     * @param {t_sales_lineUpdateArgs} args - Arguments to update one T_sales_line.
     * @example
     * // Update one T_sales_line
     * const t_sales_line = await prisma.t_sales_line.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends t_sales_lineUpdateArgs>(args: SelectSubset<T, t_sales_lineUpdateArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more T_sales_lines.
     * @param {t_sales_lineDeleteManyArgs} args - Arguments to filter T_sales_lines to delete.
     * @example
     * // Delete a few T_sales_lines
     * const { count } = await prisma.t_sales_line.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends t_sales_lineDeleteManyArgs>(args?: SelectSubset<T, t_sales_lineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more T_sales_lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many T_sales_lines
     * const t_sales_line = await prisma.t_sales_line.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends t_sales_lineUpdateManyArgs>(args: SelectSubset<T, t_sales_lineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one T_sales_line.
     * @param {t_sales_lineUpsertArgs} args - Arguments to update or create a T_sales_line.
     * @example
     * // Update or create a T_sales_line
     * const t_sales_line = await prisma.t_sales_line.upsert({
     *   create: {
     *     // ... data to create a T_sales_line
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the T_sales_line we want to update
     *   }
     * })
     */
    upsert<T extends t_sales_lineUpsertArgs>(args: SelectSubset<T, t_sales_lineUpsertArgs<ExtArgs>>): Prisma__t_sales_lineClient<$Result.GetResult<Prisma.$t_sales_linePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of T_sales_lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineCountArgs} args - Arguments to filter T_sales_lines to count.
     * @example
     * // Count the number of T_sales_lines
     * const count = await prisma.t_sales_line.count({
     *   where: {
     *     // ... the filter for the T_sales_lines we want to count
     *   }
     * })
    **/
    count<T extends t_sales_lineCountArgs>(
      args?: Subset<T, t_sales_lineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], T_sales_lineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a T_sales_line.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {T_sales_lineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends T_sales_lineAggregateArgs>(args: Subset<T, T_sales_lineAggregateArgs>): Prisma.PrismaPromise<GetT_sales_lineAggregateType<T>>

    /**
     * Group by T_sales_line.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {t_sales_lineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends t_sales_lineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: t_sales_lineGroupByArgs['orderBy'] }
        : { orderBy?: t_sales_lineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, t_sales_lineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetT_sales_lineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the t_sales_line model
   */
  readonly fields: t_sales_lineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for t_sales_line.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__t_sales_lineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bundle<T extends t_sales_line$bundleArgs<ExtArgs> = {}>(args?: Subset<T, t_sales_line$bundleArgs<ExtArgs>>): Prisma__bundleClient<$Result.GetResult<Prisma.$bundlePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    product<T extends t_sales_line$productArgs<ExtArgs> = {}>(args?: Subset<T, t_sales_line$productArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    t_sales<T extends t_salesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, t_salesDefaultArgs<ExtArgs>>): Prisma__t_salesClient<$Result.GetResult<Prisma.$t_salesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the t_sales_line model
   */ 
  interface t_sales_lineFieldRefs {
    readonly id: FieldRef<"t_sales_line", 'String'>
    readonly id_sales: FieldRef<"t_sales_line", 'String'>
    readonly unit_price: FieldRef<"t_sales_line", 'Decimal'>
    readonly qty: FieldRef<"t_sales_line", 'Int'>
    readonly total_price: FieldRef<"t_sales_line", 'Decimal'>
    readonly id_product: FieldRef<"t_sales_line", 'String'>
    readonly id_bundle: FieldRef<"t_sales_line", 'String'>
  }
    

  // Custom InputTypes
  /**
   * t_sales_line findUnique
   */
  export type t_sales_lineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_line to fetch.
     */
    where: t_sales_lineWhereUniqueInput
  }

  /**
   * t_sales_line findUniqueOrThrow
   */
  export type t_sales_lineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_line to fetch.
     */
    where: t_sales_lineWhereUniqueInput
  }

  /**
   * t_sales_line findFirst
   */
  export type t_sales_lineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_line to fetch.
     */
    where?: t_sales_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_lines to fetch.
     */
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales_lines.
     */
    cursor?: t_sales_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales_lines.
     */
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * t_sales_line findFirstOrThrow
   */
  export type t_sales_lineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_line to fetch.
     */
    where?: t_sales_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_lines to fetch.
     */
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for t_sales_lines.
     */
    cursor?: t_sales_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of t_sales_lines.
     */
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * t_sales_line findMany
   */
  export type t_sales_lineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter, which t_sales_lines to fetch.
     */
    where?: t_sales_lineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of t_sales_lines to fetch.
     */
    orderBy?: t_sales_lineOrderByWithRelationInput | t_sales_lineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing t_sales_lines.
     */
    cursor?: t_sales_lineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` t_sales_lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` t_sales_lines.
     */
    skip?: number
    distinct?: T_sales_lineScalarFieldEnum | T_sales_lineScalarFieldEnum[]
  }

  /**
   * t_sales_line create
   */
  export type t_sales_lineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * The data needed to create a t_sales_line.
     */
    data: XOR<t_sales_lineCreateInput, t_sales_lineUncheckedCreateInput>
  }

  /**
   * t_sales_line createMany
   */
  export type t_sales_lineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many t_sales_lines.
     */
    data: t_sales_lineCreateManyInput | t_sales_lineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * t_sales_line createManyAndReturn
   */
  export type t_sales_lineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many t_sales_lines.
     */
    data: t_sales_lineCreateManyInput | t_sales_lineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * t_sales_line update
   */
  export type t_sales_lineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * The data needed to update a t_sales_line.
     */
    data: XOR<t_sales_lineUpdateInput, t_sales_lineUncheckedUpdateInput>
    /**
     * Choose, which t_sales_line to update.
     */
    where: t_sales_lineWhereUniqueInput
  }

  /**
   * t_sales_line updateMany
   */
  export type t_sales_lineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update t_sales_lines.
     */
    data: XOR<t_sales_lineUpdateManyMutationInput, t_sales_lineUncheckedUpdateManyInput>
    /**
     * Filter which t_sales_lines to update
     */
    where?: t_sales_lineWhereInput
  }

  /**
   * t_sales_line upsert
   */
  export type t_sales_lineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * The filter to search for the t_sales_line to update in case it exists.
     */
    where: t_sales_lineWhereUniqueInput
    /**
     * In case the t_sales_line found by the `where` argument doesn't exist, create a new t_sales_line with this data.
     */
    create: XOR<t_sales_lineCreateInput, t_sales_lineUncheckedCreateInput>
    /**
     * In case the t_sales_line was found with the provided `where` argument, update it with this data.
     */
    update: XOR<t_sales_lineUpdateInput, t_sales_lineUncheckedUpdateInput>
  }

  /**
   * t_sales_line delete
   */
  export type t_sales_lineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
    /**
     * Filter which t_sales_line to delete.
     */
    where: t_sales_lineWhereUniqueInput
  }

  /**
   * t_sales_line deleteMany
   */
  export type t_sales_lineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which t_sales_lines to delete
     */
    where?: t_sales_lineWhereInput
  }

  /**
   * t_sales_line.bundle
   */
  export type t_sales_line$bundleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bundle
     */
    select?: bundleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bundleInclude<ExtArgs> | null
    where?: bundleWhereInput
  }

  /**
   * t_sales_line.product
   */
  export type t_sales_line$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
  }

  /**
   * t_sales_line without action
   */
  export type t_sales_lineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the t_sales_line
     */
    select?: t_sales_lineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: t_sales_lineInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    role: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    author?: boolean | user$authorArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | user$authorArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      author: Prisma.$authorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends user$authorArgs<ExtArgs> = {}>(args?: Subset<T, user$authorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.author
   */
  export type user$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the author
     */
    select?: authorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: authorInclude<ExtArgs> | null
    where?: authorWhereInput
    orderBy?: authorOrderByWithRelationInput | authorOrderByWithRelationInput[]
    cursor?: authorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuthorScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    name: 'name'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const BannerScalarFieldEnum: {
    id: 'id',
    title: 'title',
    banner_file: 'banner_file',
    status: 'status',
    deleted_at: 'deleted_at',
    link: 'link'
  };

  export type BannerScalarFieldEnum = (typeof BannerScalarFieldEnum)[keyof typeof BannerScalarFieldEnum]


  export const BundleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    strike_price: 'strike_price',
    real_price: 'real_price',
    currency: 'currency',
    desc: 'desc',
    info: 'info',
    deleted_at: 'deleted_at',
    status: 'status',
    img_file: 'img_file',
    cover: 'cover',
    sku: 'sku'
  };

  export type BundleScalarFieldEnum = (typeof BundleScalarFieldEnum)[keyof typeof BundleScalarFieldEnum]


  export const Bundle_categoryScalarFieldEnum: {
    id: 'id',
    id_category: 'id_category',
    id_bundle: 'id_bundle'
  };

  export type Bundle_categoryScalarFieldEnum = (typeof Bundle_categoryScalarFieldEnum)[keyof typeof Bundle_categoryScalarFieldEnum]


  export const Bundle_productScalarFieldEnum: {
    id_bundle: 'id_bundle',
    id_product: 'id_product',
    id: 'id',
    qty: 'qty'
  };

  export type Bundle_productScalarFieldEnum = (typeof Bundle_productScalarFieldEnum)[keyof typeof Bundle_productScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    id_parent: 'id_parent',
    deleted_at: 'deleted_at',
    slug: 'slug',
    img: 'img'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    whatsapp: 'whatsapp',
    deleted_at: 'deleted_at',
    otp: 'otp'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const Customer_readerScalarFieldEnum: {
    id: 'id',
    id_customer: 'id_customer',
    id_product: 'id_product',
    last_page: 'last_page',
    percent: 'percent'
  };

  export type Customer_readerScalarFieldEnum = (typeof Customer_readerScalarFieldEnum)[keyof typeof Customer_readerScalarFieldEnum]


  export const Customer_trackScalarFieldEnum: {
    id: 'id',
    ts: 'ts',
    id_customer: 'id_customer',
    path: 'path',
    referrer: 'referrer',
    info: 'info',
    ip: 'ip'
  };

  export type Customer_trackScalarFieldEnum = (typeof Customer_trackScalarFieldEnum)[keyof typeof Customer_trackScalarFieldEnum]


  export const LandingScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    views: 'views',
    deleted_at: 'deleted_at',
    status: 'status',
    title: 'title'
  };

  export type LandingScalarFieldEnum = (typeof LandingScalarFieldEnum)[keyof typeof LandingScalarFieldEnum]


  export const Landing_itemsScalarFieldEnum: {
    id: 'id',
    desc: 'desc',
    img_file: 'img_file',
    tag: 'tag',
    link_to: 'link_to',
    landing_id: 'landing_id',
    idx: 'idx',
    color: 'color'
  };

  export type Landing_itemsScalarFieldEnum = (typeof Landing_itemsScalarFieldEnum)[keyof typeof Landing_itemsScalarFieldEnum]


  export const MidtrxScalarFieldEnum: {
    id: 'id',
    tz: 'tz',
    type: 'type',
    payload: 'payload'
  };

  export type MidtrxScalarFieldEnum = (typeof MidtrxScalarFieldEnum)[keyof typeof MidtrxScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    strike_price: 'strike_price',
    real_price: 'real_price',
    desc: 'desc',
    info: 'info',
    status: 'status',
    currency: 'currency',
    deleted_at: 'deleted_at',
    img_file: 'img_file',
    cover: 'cover',
    product_file: 'product_file',
    sku: 'sku',
    id_author: 'id_author',
    published_date: 'published_date'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Product_categoryScalarFieldEnum: {
    id_product: 'id_product',
    id_category: 'id_category',
    id: 'id'
  };

  export type Product_categoryScalarFieldEnum = (typeof Product_categoryScalarFieldEnum)[keyof typeof Product_categoryScalarFieldEnum]


  export const T_salesScalarFieldEnum: {
    id: 'id',
    id_customer: 'id_customer',
    status: 'status',
    total: 'total',
    currency: 'currency',
    info: 'info',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    midtrans_order_id: 'midtrans_order_id',
    midtrans_success: 'midtrans_success',
    midtrans_pending: 'midtrans_pending',
    midtrans_error: 'midtrans_error'
  };

  export type T_salesScalarFieldEnum = (typeof T_salesScalarFieldEnum)[keyof typeof T_salesScalarFieldEnum]


  export const T_sales_downloadScalarFieldEnum: {
    id: 'id',
    id_product: 'id_product',
    id_customer: 'id_customer',
    downloaded_at: 'downloaded_at',
    ip_address: 'ip_address',
    download_key: 'download_key'
  };

  export type T_sales_downloadScalarFieldEnum = (typeof T_sales_downloadScalarFieldEnum)[keyof typeof T_sales_downloadScalarFieldEnum]


  export const T_sales_lineScalarFieldEnum: {
    id: 'id',
    id_sales: 'id_sales',
    unit_price: 'unit_price',
    qty: 'qty',
    total_price: 'total_price',
    id_product: 'id_product',
    id_bundle: 'id_bundle'
  };

  export type T_sales_lineScalarFieldEnum = (typeof T_sales_lineScalarFieldEnum)[keyof typeof T_sales_lineScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type authorWhereInput = {
    AND?: authorWhereInput | authorWhereInput[]
    OR?: authorWhereInput[]
    NOT?: authorWhereInput | authorWhereInput[]
    id?: UuidFilter<"author"> | string
    id_user?: UuidFilter<"author"> | string
    name?: StringFilter<"author"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: ProductListRelationFilter
  }

  export type authorOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name?: SortOrder
    user?: userOrderByWithRelationInput
    product?: productOrderByRelationAggregateInput
  }

  export type authorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: authorWhereInput | authorWhereInput[]
    OR?: authorWhereInput[]
    NOT?: authorWhereInput | authorWhereInput[]
    id_user?: UuidFilter<"author"> | string
    name?: StringFilter<"author"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    product?: ProductListRelationFilter
  }, "id">

  export type authorOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name?: SortOrder
    _count?: authorCountOrderByAggregateInput
    _max?: authorMaxOrderByAggregateInput
    _min?: authorMinOrderByAggregateInput
  }

  export type authorScalarWhereWithAggregatesInput = {
    AND?: authorScalarWhereWithAggregatesInput | authorScalarWhereWithAggregatesInput[]
    OR?: authorScalarWhereWithAggregatesInput[]
    NOT?: authorScalarWhereWithAggregatesInput | authorScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"author"> | string
    id_user?: UuidWithAggregatesFilter<"author"> | string
    name?: StringWithAggregatesFilter<"author"> | string
  }

  export type bannerWhereInput = {
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    id?: UuidFilter<"banner"> | string
    title?: StringFilter<"banner"> | string
    banner_file?: StringFilter<"banner"> | string
    status?: StringNullableFilter<"banner"> | string | null
    deleted_at?: DateTimeNullableFilter<"banner"> | Date | string | null
    link?: StringNullableFilter<"banner"> | string | null
  }

  export type bannerOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    banner_file?: SortOrder
    status?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
  }

  export type bannerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    title?: StringFilter<"banner"> | string
    banner_file?: StringFilter<"banner"> | string
    status?: StringNullableFilter<"banner"> | string | null
    deleted_at?: DateTimeNullableFilter<"banner"> | Date | string | null
    link?: StringNullableFilter<"banner"> | string | null
  }, "id">

  export type bannerOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    banner_file?: SortOrder
    status?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    _count?: bannerCountOrderByAggregateInput
    _max?: bannerMaxOrderByAggregateInput
    _min?: bannerMinOrderByAggregateInput
  }

  export type bannerScalarWhereWithAggregatesInput = {
    AND?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    OR?: bannerScalarWhereWithAggregatesInput[]
    NOT?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"banner"> | string
    title?: StringWithAggregatesFilter<"banner"> | string
    banner_file?: StringWithAggregatesFilter<"banner"> | string
    status?: StringNullableWithAggregatesFilter<"banner"> | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"banner"> | Date | string | null
    link?: StringNullableWithAggregatesFilter<"banner"> | string | null
  }

  export type bundleWhereInput = {
    AND?: bundleWhereInput | bundleWhereInput[]
    OR?: bundleWhereInput[]
    NOT?: bundleWhereInput | bundleWhereInput[]
    id?: UuidFilter<"bundle"> | string
    name?: StringFilter<"bundle"> | string
    slug?: StringFilter<"bundle"> | string
    strike_price?: DecimalNullableFilter<"bundle"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFilter<"bundle"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"bundle"> | string
    desc?: StringFilter<"bundle"> | string
    info?: JsonFilter<"bundle">
    deleted_at?: DateTimeNullableFilter<"bundle"> | Date | string | null
    status?: StringFilter<"bundle"> | string
    img_file?: StringFilter<"bundle"> | string
    cover?: StringFilter<"bundle"> | string
    sku?: StringFilter<"bundle"> | string
    bundle_category?: Bundle_categoryListRelationFilter
    bundle_product?: Bundle_productListRelationFilter
    t_sales_line?: T_sales_lineListRelationFilter
  }

  export type bundleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrderInput | SortOrder
    real_price?: SortOrder
    currency?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    status?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    sku?: SortOrder
    bundle_category?: bundle_categoryOrderByRelationAggregateInput
    bundle_product?: bundle_productOrderByRelationAggregateInput
    t_sales_line?: t_sales_lineOrderByRelationAggregateInput
  }

  export type bundleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: bundleWhereInput | bundleWhereInput[]
    OR?: bundleWhereInput[]
    NOT?: bundleWhereInput | bundleWhereInput[]
    name?: StringFilter<"bundle"> | string
    slug?: StringFilter<"bundle"> | string
    strike_price?: DecimalNullableFilter<"bundle"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFilter<"bundle"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"bundle"> | string
    desc?: StringFilter<"bundle"> | string
    info?: JsonFilter<"bundle">
    deleted_at?: DateTimeNullableFilter<"bundle"> | Date | string | null
    status?: StringFilter<"bundle"> | string
    img_file?: StringFilter<"bundle"> | string
    cover?: StringFilter<"bundle"> | string
    sku?: StringFilter<"bundle"> | string
    bundle_category?: Bundle_categoryListRelationFilter
    bundle_product?: Bundle_productListRelationFilter
    t_sales_line?: T_sales_lineListRelationFilter
  }, "id">

  export type bundleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrderInput | SortOrder
    real_price?: SortOrder
    currency?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    status?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    sku?: SortOrder
    _count?: bundleCountOrderByAggregateInput
    _avg?: bundleAvgOrderByAggregateInput
    _max?: bundleMaxOrderByAggregateInput
    _min?: bundleMinOrderByAggregateInput
    _sum?: bundleSumOrderByAggregateInput
  }

  export type bundleScalarWhereWithAggregatesInput = {
    AND?: bundleScalarWhereWithAggregatesInput | bundleScalarWhereWithAggregatesInput[]
    OR?: bundleScalarWhereWithAggregatesInput[]
    NOT?: bundleScalarWhereWithAggregatesInput | bundleScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"bundle"> | string
    name?: StringWithAggregatesFilter<"bundle"> | string
    slug?: StringWithAggregatesFilter<"bundle"> | string
    strike_price?: DecimalNullableWithAggregatesFilter<"bundle"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalWithAggregatesFilter<"bundle"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"bundle"> | string
    desc?: StringWithAggregatesFilter<"bundle"> | string
    info?: JsonWithAggregatesFilter<"bundle">
    deleted_at?: DateTimeNullableWithAggregatesFilter<"bundle"> | Date | string | null
    status?: StringWithAggregatesFilter<"bundle"> | string
    img_file?: StringWithAggregatesFilter<"bundle"> | string
    cover?: StringWithAggregatesFilter<"bundle"> | string
    sku?: StringWithAggregatesFilter<"bundle"> | string
  }

  export type bundle_categoryWhereInput = {
    AND?: bundle_categoryWhereInput | bundle_categoryWhereInput[]
    OR?: bundle_categoryWhereInput[]
    NOT?: bundle_categoryWhereInput | bundle_categoryWhereInput[]
    id?: UuidFilter<"bundle_category"> | string
    id_category?: UuidFilter<"bundle_category"> | string
    id_bundle?: UuidFilter<"bundle_category"> | string
    bundle?: XOR<BundleRelationFilter, bundleWhereInput>
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
  }

  export type bundle_categoryOrderByWithRelationInput = {
    id?: SortOrder
    id_category?: SortOrder
    id_bundle?: SortOrder
    bundle?: bundleOrderByWithRelationInput
    category?: categoryOrderByWithRelationInput
  }

  export type bundle_categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: bundle_categoryWhereInput | bundle_categoryWhereInput[]
    OR?: bundle_categoryWhereInput[]
    NOT?: bundle_categoryWhereInput | bundle_categoryWhereInput[]
    id_category?: UuidFilter<"bundle_category"> | string
    id_bundle?: UuidFilter<"bundle_category"> | string
    bundle?: XOR<BundleRelationFilter, bundleWhereInput>
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
  }, "id">

  export type bundle_categoryOrderByWithAggregationInput = {
    id?: SortOrder
    id_category?: SortOrder
    id_bundle?: SortOrder
    _count?: bundle_categoryCountOrderByAggregateInput
    _max?: bundle_categoryMaxOrderByAggregateInput
    _min?: bundle_categoryMinOrderByAggregateInput
  }

  export type bundle_categoryScalarWhereWithAggregatesInput = {
    AND?: bundle_categoryScalarWhereWithAggregatesInput | bundle_categoryScalarWhereWithAggregatesInput[]
    OR?: bundle_categoryScalarWhereWithAggregatesInput[]
    NOT?: bundle_categoryScalarWhereWithAggregatesInput | bundle_categoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"bundle_category"> | string
    id_category?: UuidWithAggregatesFilter<"bundle_category"> | string
    id_bundle?: UuidWithAggregatesFilter<"bundle_category"> | string
  }

  export type bundle_productWhereInput = {
    AND?: bundle_productWhereInput | bundle_productWhereInput[]
    OR?: bundle_productWhereInput[]
    NOT?: bundle_productWhereInput | bundle_productWhereInput[]
    id_bundle?: UuidFilter<"bundle_product"> | string
    id_product?: UuidFilter<"bundle_product"> | string
    id?: UuidFilter<"bundle_product"> | string
    qty?: IntNullableFilter<"bundle_product"> | number | null
    bundle?: XOR<BundleRelationFilter, bundleWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type bundle_productOrderByWithRelationInput = {
    id_bundle?: SortOrder
    id_product?: SortOrder
    id?: SortOrder
    qty?: SortOrderInput | SortOrder
    bundle?: bundleOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type bundle_productWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: bundle_productWhereInput | bundle_productWhereInput[]
    OR?: bundle_productWhereInput[]
    NOT?: bundle_productWhereInput | bundle_productWhereInput[]
    id_bundle?: UuidFilter<"bundle_product"> | string
    id_product?: UuidFilter<"bundle_product"> | string
    qty?: IntNullableFilter<"bundle_product"> | number | null
    bundle?: XOR<BundleRelationFilter, bundleWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type bundle_productOrderByWithAggregationInput = {
    id_bundle?: SortOrder
    id_product?: SortOrder
    id?: SortOrder
    qty?: SortOrderInput | SortOrder
    _count?: bundle_productCountOrderByAggregateInput
    _avg?: bundle_productAvgOrderByAggregateInput
    _max?: bundle_productMaxOrderByAggregateInput
    _min?: bundle_productMinOrderByAggregateInput
    _sum?: bundle_productSumOrderByAggregateInput
  }

  export type bundle_productScalarWhereWithAggregatesInput = {
    AND?: bundle_productScalarWhereWithAggregatesInput | bundle_productScalarWhereWithAggregatesInput[]
    OR?: bundle_productScalarWhereWithAggregatesInput[]
    NOT?: bundle_productScalarWhereWithAggregatesInput | bundle_productScalarWhereWithAggregatesInput[]
    id_bundle?: UuidWithAggregatesFilter<"bundle_product"> | string
    id_product?: UuidWithAggregatesFilter<"bundle_product"> | string
    id?: UuidWithAggregatesFilter<"bundle_product"> | string
    qty?: IntNullableWithAggregatesFilter<"bundle_product"> | number | null
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: UuidFilter<"category"> | string
    name?: StringFilter<"category"> | string
    id_parent?: UuidNullableFilter<"category"> | string | null
    deleted_at?: DateTimeNullableFilter<"category"> | Date | string | null
    slug?: StringNullableFilter<"category"> | string | null
    img?: StringNullableFilter<"category"> | string | null
    bundle_category?: Bundle_categoryListRelationFilter
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    other_category?: CategoryListRelationFilter
    product_category?: Product_categoryListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    id_parent?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    bundle_category?: bundle_categoryOrderByRelationAggregateInput
    category?: categoryOrderByWithRelationInput
    other_category?: categoryOrderByRelationAggregateInput
    product_category?: product_categoryOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    name?: StringFilter<"category"> | string
    id_parent?: UuidNullableFilter<"category"> | string | null
    deleted_at?: DateTimeNullableFilter<"category"> | Date | string | null
    slug?: StringNullableFilter<"category"> | string | null
    img?: StringNullableFilter<"category"> | string | null
    bundle_category?: Bundle_categoryListRelationFilter
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    other_category?: CategoryListRelationFilter
    product_category?: Product_categoryListRelationFilter
  }, "id">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    id_parent?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    _count?: categoryCountOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"category"> | string
    name?: StringWithAggregatesFilter<"category"> | string
    id_parent?: UuidNullableWithAggregatesFilter<"category"> | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"category"> | Date | string | null
    slug?: StringNullableWithAggregatesFilter<"category"> | string | null
    img?: StringNullableWithAggregatesFilter<"category"> | string | null
  }

  export type customerWhereInput = {
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    id?: UuidFilter<"customer"> | string
    name?: StringFilter<"customer"> | string
    email?: StringFilter<"customer"> | string
    whatsapp?: StringFilter<"customer"> | string
    deleted_at?: DateTimeNullableFilter<"customer"> | Date | string | null
    otp?: IntNullableFilter<"customer"> | number | null
    customer_reader?: Customer_readerListRelationFilter
    t_sales?: T_salesListRelationFilter
    t_sales_download?: T_sales_downloadListRelationFilter
  }

  export type customerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    otp?: SortOrderInput | SortOrder
    customer_reader?: customer_readerOrderByRelationAggregateInput
    t_sales?: t_salesOrderByRelationAggregateInput
    t_sales_download?: t_sales_downloadOrderByRelationAggregateInput
  }

  export type customerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    name?: StringFilter<"customer"> | string
    email?: StringFilter<"customer"> | string
    whatsapp?: StringFilter<"customer"> | string
    deleted_at?: DateTimeNullableFilter<"customer"> | Date | string | null
    otp?: IntNullableFilter<"customer"> | number | null
    customer_reader?: Customer_readerListRelationFilter
    t_sales?: T_salesListRelationFilter
    t_sales_download?: T_sales_downloadListRelationFilter
  }, "id">

  export type customerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    otp?: SortOrderInput | SortOrder
    _count?: customerCountOrderByAggregateInput
    _avg?: customerAvgOrderByAggregateInput
    _max?: customerMaxOrderByAggregateInput
    _min?: customerMinOrderByAggregateInput
    _sum?: customerSumOrderByAggregateInput
  }

  export type customerScalarWhereWithAggregatesInput = {
    AND?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    OR?: customerScalarWhereWithAggregatesInput[]
    NOT?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"customer"> | string
    name?: StringWithAggregatesFilter<"customer"> | string
    email?: StringWithAggregatesFilter<"customer"> | string
    whatsapp?: StringWithAggregatesFilter<"customer"> | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"customer"> | Date | string | null
    otp?: IntNullableWithAggregatesFilter<"customer"> | number | null
  }

  export type customer_readerWhereInput = {
    AND?: customer_readerWhereInput | customer_readerWhereInput[]
    OR?: customer_readerWhereInput[]
    NOT?: customer_readerWhereInput | customer_readerWhereInput[]
    id?: UuidFilter<"customer_reader"> | string
    id_customer?: UuidFilter<"customer_reader"> | string
    id_product?: UuidFilter<"customer_reader"> | string
    last_page?: IntFilter<"customer_reader"> | number
    percent?: IntFilter<"customer_reader"> | number
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type customer_readerOrderByWithRelationInput = {
    id?: SortOrder
    id_customer?: SortOrder
    id_product?: SortOrder
    last_page?: SortOrder
    percent?: SortOrder
    customer?: customerOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type customer_readerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: customer_readerWhereInput | customer_readerWhereInput[]
    OR?: customer_readerWhereInput[]
    NOT?: customer_readerWhereInput | customer_readerWhereInput[]
    id_customer?: UuidFilter<"customer_reader"> | string
    id_product?: UuidFilter<"customer_reader"> | string
    last_page?: IntFilter<"customer_reader"> | number
    percent?: IntFilter<"customer_reader"> | number
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type customer_readerOrderByWithAggregationInput = {
    id?: SortOrder
    id_customer?: SortOrder
    id_product?: SortOrder
    last_page?: SortOrder
    percent?: SortOrder
    _count?: customer_readerCountOrderByAggregateInput
    _avg?: customer_readerAvgOrderByAggregateInput
    _max?: customer_readerMaxOrderByAggregateInput
    _min?: customer_readerMinOrderByAggregateInput
    _sum?: customer_readerSumOrderByAggregateInput
  }

  export type customer_readerScalarWhereWithAggregatesInput = {
    AND?: customer_readerScalarWhereWithAggregatesInput | customer_readerScalarWhereWithAggregatesInput[]
    OR?: customer_readerScalarWhereWithAggregatesInput[]
    NOT?: customer_readerScalarWhereWithAggregatesInput | customer_readerScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"customer_reader"> | string
    id_customer?: UuidWithAggregatesFilter<"customer_reader"> | string
    id_product?: UuidWithAggregatesFilter<"customer_reader"> | string
    last_page?: IntWithAggregatesFilter<"customer_reader"> | number
    percent?: IntWithAggregatesFilter<"customer_reader"> | number
  }

  export type customer_trackWhereInput = {
    AND?: customer_trackWhereInput | customer_trackWhereInput[]
    OR?: customer_trackWhereInput[]
    NOT?: customer_trackWhereInput | customer_trackWhereInput[]
    id?: UuidFilter<"customer_track"> | string
    ts?: DateTimeFilter<"customer_track"> | Date | string
    id_customer?: UuidFilter<"customer_track"> | string
    path?: StringFilter<"customer_track"> | string
    referrer?: StringFilter<"customer_track"> | string
    info?: JsonFilter<"customer_track">
    ip?: StringFilter<"customer_track"> | string
    customer_track?: XOR<Customer_trackRelationFilter, customer_trackWhereInput>
    other_customer_track?: Customer_trackListRelationFilter
  }

  export type customer_trackOrderByWithRelationInput = {
    id?: SortOrder
    ts?: SortOrder
    id_customer?: SortOrder
    path?: SortOrder
    referrer?: SortOrder
    info?: SortOrder
    ip?: SortOrder
    customer_track?: customer_trackOrderByWithRelationInput
    other_customer_track?: customer_trackOrderByRelationAggregateInput
  }

  export type customer_trackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: customer_trackWhereInput | customer_trackWhereInput[]
    OR?: customer_trackWhereInput[]
    NOT?: customer_trackWhereInput | customer_trackWhereInput[]
    ts?: DateTimeFilter<"customer_track"> | Date | string
    id_customer?: UuidFilter<"customer_track"> | string
    path?: StringFilter<"customer_track"> | string
    referrer?: StringFilter<"customer_track"> | string
    info?: JsonFilter<"customer_track">
    ip?: StringFilter<"customer_track"> | string
    customer_track?: XOR<Customer_trackRelationFilter, customer_trackWhereInput>
    other_customer_track?: Customer_trackListRelationFilter
  }, "id">

  export type customer_trackOrderByWithAggregationInput = {
    id?: SortOrder
    ts?: SortOrder
    id_customer?: SortOrder
    path?: SortOrder
    referrer?: SortOrder
    info?: SortOrder
    ip?: SortOrder
    _count?: customer_trackCountOrderByAggregateInput
    _max?: customer_trackMaxOrderByAggregateInput
    _min?: customer_trackMinOrderByAggregateInput
  }

  export type customer_trackScalarWhereWithAggregatesInput = {
    AND?: customer_trackScalarWhereWithAggregatesInput | customer_trackScalarWhereWithAggregatesInput[]
    OR?: customer_trackScalarWhereWithAggregatesInput[]
    NOT?: customer_trackScalarWhereWithAggregatesInput | customer_trackScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"customer_track"> | string
    ts?: DateTimeWithAggregatesFilter<"customer_track"> | Date | string
    id_customer?: UuidWithAggregatesFilter<"customer_track"> | string
    path?: StringWithAggregatesFilter<"customer_track"> | string
    referrer?: StringWithAggregatesFilter<"customer_track"> | string
    info?: JsonWithAggregatesFilter<"customer_track">
    ip?: StringWithAggregatesFilter<"customer_track"> | string
  }

  export type landingWhereInput = {
    AND?: landingWhereInput | landingWhereInput[]
    OR?: landingWhereInput[]
    NOT?: landingWhereInput | landingWhereInput[]
    id?: UuidFilter<"landing"> | string
    slug?: StringFilter<"landing"> | string
    views?: IntFilter<"landing"> | number
    deleted_at?: DateTimeNullableFilter<"landing"> | Date | string | null
    status?: StringFilter<"landing"> | string
    title?: StringFilter<"landing"> | string
    landing_items?: Landing_itemsListRelationFilter
  }

  export type landingOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    status?: SortOrder
    title?: SortOrder
    landing_items?: landing_itemsOrderByRelationAggregateInput
  }

  export type landingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: landingWhereInput | landingWhereInput[]
    OR?: landingWhereInput[]
    NOT?: landingWhereInput | landingWhereInput[]
    slug?: StringFilter<"landing"> | string
    views?: IntFilter<"landing"> | number
    deleted_at?: DateTimeNullableFilter<"landing"> | Date | string | null
    status?: StringFilter<"landing"> | string
    title?: StringFilter<"landing"> | string
    landing_items?: Landing_itemsListRelationFilter
  }, "id">

  export type landingOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    status?: SortOrder
    title?: SortOrder
    _count?: landingCountOrderByAggregateInput
    _avg?: landingAvgOrderByAggregateInput
    _max?: landingMaxOrderByAggregateInput
    _min?: landingMinOrderByAggregateInput
    _sum?: landingSumOrderByAggregateInput
  }

  export type landingScalarWhereWithAggregatesInput = {
    AND?: landingScalarWhereWithAggregatesInput | landingScalarWhereWithAggregatesInput[]
    OR?: landingScalarWhereWithAggregatesInput[]
    NOT?: landingScalarWhereWithAggregatesInput | landingScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"landing"> | string
    slug?: StringWithAggregatesFilter<"landing"> | string
    views?: IntWithAggregatesFilter<"landing"> | number
    deleted_at?: DateTimeNullableWithAggregatesFilter<"landing"> | Date | string | null
    status?: StringWithAggregatesFilter<"landing"> | string
    title?: StringWithAggregatesFilter<"landing"> | string
  }

  export type landing_itemsWhereInput = {
    AND?: landing_itemsWhereInput | landing_itemsWhereInput[]
    OR?: landing_itemsWhereInput[]
    NOT?: landing_itemsWhereInput | landing_itemsWhereInput[]
    id?: UuidFilter<"landing_items"> | string
    desc?: StringFilter<"landing_items"> | string
    img_file?: StringFilter<"landing_items"> | string
    tag?: StringFilter<"landing_items"> | string
    link_to?: StringFilter<"landing_items"> | string
    landing_id?: UuidFilter<"landing_items"> | string
    idx?: IntFilter<"landing_items"> | number
    color?: StringFilter<"landing_items"> | string
    landing?: XOR<LandingRelationFilter, landingWhereInput>
  }

  export type landing_itemsOrderByWithRelationInput = {
    id?: SortOrder
    desc?: SortOrder
    img_file?: SortOrder
    tag?: SortOrder
    link_to?: SortOrder
    landing_id?: SortOrder
    idx?: SortOrder
    color?: SortOrder
    landing?: landingOrderByWithRelationInput
  }

  export type landing_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: landing_itemsWhereInput | landing_itemsWhereInput[]
    OR?: landing_itemsWhereInput[]
    NOT?: landing_itemsWhereInput | landing_itemsWhereInput[]
    desc?: StringFilter<"landing_items"> | string
    img_file?: StringFilter<"landing_items"> | string
    tag?: StringFilter<"landing_items"> | string
    link_to?: StringFilter<"landing_items"> | string
    landing_id?: UuidFilter<"landing_items"> | string
    idx?: IntFilter<"landing_items"> | number
    color?: StringFilter<"landing_items"> | string
    landing?: XOR<LandingRelationFilter, landingWhereInput>
  }, "id">

  export type landing_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    desc?: SortOrder
    img_file?: SortOrder
    tag?: SortOrder
    link_to?: SortOrder
    landing_id?: SortOrder
    idx?: SortOrder
    color?: SortOrder
    _count?: landing_itemsCountOrderByAggregateInput
    _avg?: landing_itemsAvgOrderByAggregateInput
    _max?: landing_itemsMaxOrderByAggregateInput
    _min?: landing_itemsMinOrderByAggregateInput
    _sum?: landing_itemsSumOrderByAggregateInput
  }

  export type landing_itemsScalarWhereWithAggregatesInput = {
    AND?: landing_itemsScalarWhereWithAggregatesInput | landing_itemsScalarWhereWithAggregatesInput[]
    OR?: landing_itemsScalarWhereWithAggregatesInput[]
    NOT?: landing_itemsScalarWhereWithAggregatesInput | landing_itemsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"landing_items"> | string
    desc?: StringWithAggregatesFilter<"landing_items"> | string
    img_file?: StringWithAggregatesFilter<"landing_items"> | string
    tag?: StringWithAggregatesFilter<"landing_items"> | string
    link_to?: StringWithAggregatesFilter<"landing_items"> | string
    landing_id?: UuidWithAggregatesFilter<"landing_items"> | string
    idx?: IntWithAggregatesFilter<"landing_items"> | number
    color?: StringWithAggregatesFilter<"landing_items"> | string
  }

  export type midtrxWhereInput = {
    AND?: midtrxWhereInput | midtrxWhereInput[]
    OR?: midtrxWhereInput[]
    NOT?: midtrxWhereInput | midtrxWhereInput[]
    id?: UuidFilter<"midtrx"> | string
    tz?: DateTimeFilter<"midtrx"> | Date | string
    type?: StringFilter<"midtrx"> | string
    payload?: JsonFilter<"midtrx">
  }

  export type midtrxOrderByWithRelationInput = {
    id?: SortOrder
    tz?: SortOrder
    type?: SortOrder
    payload?: SortOrder
  }

  export type midtrxWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: midtrxWhereInput | midtrxWhereInput[]
    OR?: midtrxWhereInput[]
    NOT?: midtrxWhereInput | midtrxWhereInput[]
    tz?: DateTimeFilter<"midtrx"> | Date | string
    type?: StringFilter<"midtrx"> | string
    payload?: JsonFilter<"midtrx">
  }, "id">

  export type midtrxOrderByWithAggregationInput = {
    id?: SortOrder
    tz?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    _count?: midtrxCountOrderByAggregateInput
    _max?: midtrxMaxOrderByAggregateInput
    _min?: midtrxMinOrderByAggregateInput
  }

  export type midtrxScalarWhereWithAggregatesInput = {
    AND?: midtrxScalarWhereWithAggregatesInput | midtrxScalarWhereWithAggregatesInput[]
    OR?: midtrxScalarWhereWithAggregatesInput[]
    NOT?: midtrxScalarWhereWithAggregatesInput | midtrxScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"midtrx"> | string
    tz?: DateTimeWithAggregatesFilter<"midtrx"> | Date | string
    type?: StringWithAggregatesFilter<"midtrx"> | string
    payload?: JsonWithAggregatesFilter<"midtrx">
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: UuidFilter<"product"> | string
    name?: StringFilter<"product"> | string
    slug?: StringFilter<"product"> | string
    strike_price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFilter<"product"> | Decimal | DecimalJsLike | number | string
    desc?: StringFilter<"product"> | string
    info?: JsonFilter<"product">
    status?: StringFilter<"product"> | string
    currency?: StringFilter<"product"> | string
    deleted_at?: DateTimeNullableFilter<"product"> | Date | string | null
    img_file?: StringFilter<"product"> | string
    cover?: StringFilter<"product"> | string
    product_file?: StringFilter<"product"> | string
    sku?: StringFilter<"product"> | string
    id_author?: UuidNullableFilter<"product"> | string | null
    published_date?: DateTimeFilter<"product"> | Date | string
    bundle_product?: Bundle_productListRelationFilter
    customer_reader?: Customer_readerListRelationFilter
    author?: XOR<AuthorNullableRelationFilter, authorWhereInput> | null
    product_category?: Product_categoryListRelationFilter
    t_sales_download?: T_sales_downloadListRelationFilter
    t_sales_line?: T_sales_lineListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrderInput | SortOrder
    real_price?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    status?: SortOrder
    currency?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    product_file?: SortOrder
    sku?: SortOrder
    id_author?: SortOrderInput | SortOrder
    published_date?: SortOrder
    bundle_product?: bundle_productOrderByRelationAggregateInput
    customer_reader?: customer_readerOrderByRelationAggregateInput
    author?: authorOrderByWithRelationInput
    product_category?: product_categoryOrderByRelationAggregateInput
    t_sales_download?: t_sales_downloadOrderByRelationAggregateInput
    t_sales_line?: t_sales_lineOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    name?: StringFilter<"product"> | string
    slug?: StringFilter<"product"> | string
    strike_price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFilter<"product"> | Decimal | DecimalJsLike | number | string
    desc?: StringFilter<"product"> | string
    info?: JsonFilter<"product">
    status?: StringFilter<"product"> | string
    currency?: StringFilter<"product"> | string
    deleted_at?: DateTimeNullableFilter<"product"> | Date | string | null
    img_file?: StringFilter<"product"> | string
    cover?: StringFilter<"product"> | string
    product_file?: StringFilter<"product"> | string
    sku?: StringFilter<"product"> | string
    id_author?: UuidNullableFilter<"product"> | string | null
    published_date?: DateTimeFilter<"product"> | Date | string
    bundle_product?: Bundle_productListRelationFilter
    customer_reader?: Customer_readerListRelationFilter
    author?: XOR<AuthorNullableRelationFilter, authorWhereInput> | null
    product_category?: Product_categoryListRelationFilter
    t_sales_download?: T_sales_downloadListRelationFilter
    t_sales_line?: T_sales_lineListRelationFilter
  }, "id">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrderInput | SortOrder
    real_price?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    status?: SortOrder
    currency?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    product_file?: SortOrder
    sku?: SortOrder
    id_author?: SortOrderInput | SortOrder
    published_date?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"product"> | string
    name?: StringWithAggregatesFilter<"product"> | string
    slug?: StringWithAggregatesFilter<"product"> | string
    strike_price?: DecimalNullableWithAggregatesFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalWithAggregatesFilter<"product"> | Decimal | DecimalJsLike | number | string
    desc?: StringWithAggregatesFilter<"product"> | string
    info?: JsonWithAggregatesFilter<"product">
    status?: StringWithAggregatesFilter<"product"> | string
    currency?: StringWithAggregatesFilter<"product"> | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"product"> | Date | string | null
    img_file?: StringWithAggregatesFilter<"product"> | string
    cover?: StringWithAggregatesFilter<"product"> | string
    product_file?: StringWithAggregatesFilter<"product"> | string
    sku?: StringWithAggregatesFilter<"product"> | string
    id_author?: UuidNullableWithAggregatesFilter<"product"> | string | null
    published_date?: DateTimeWithAggregatesFilter<"product"> | Date | string
  }

  export type product_categoryWhereInput = {
    AND?: product_categoryWhereInput | product_categoryWhereInput[]
    OR?: product_categoryWhereInput[]
    NOT?: product_categoryWhereInput | product_categoryWhereInput[]
    id_product?: UuidFilter<"product_category"> | string
    id_category?: UuidFilter<"product_category"> | string
    id?: UuidFilter<"product_category"> | string
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type product_categoryOrderByWithRelationInput = {
    id_product?: SortOrder
    id_category?: SortOrder
    id?: SortOrder
    category?: categoryOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type product_categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: product_categoryWhereInput | product_categoryWhereInput[]
    OR?: product_categoryWhereInput[]
    NOT?: product_categoryWhereInput | product_categoryWhereInput[]
    id_product?: UuidFilter<"product_category"> | string
    id_category?: UuidFilter<"product_category"> | string
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type product_categoryOrderByWithAggregationInput = {
    id_product?: SortOrder
    id_category?: SortOrder
    id?: SortOrder
    _count?: product_categoryCountOrderByAggregateInput
    _max?: product_categoryMaxOrderByAggregateInput
    _min?: product_categoryMinOrderByAggregateInput
  }

  export type product_categoryScalarWhereWithAggregatesInput = {
    AND?: product_categoryScalarWhereWithAggregatesInput | product_categoryScalarWhereWithAggregatesInput[]
    OR?: product_categoryScalarWhereWithAggregatesInput[]
    NOT?: product_categoryScalarWhereWithAggregatesInput | product_categoryScalarWhereWithAggregatesInput[]
    id_product?: UuidWithAggregatesFilter<"product_category"> | string
    id_category?: UuidWithAggregatesFilter<"product_category"> | string
    id?: UuidWithAggregatesFilter<"product_category"> | string
  }

  export type t_salesWhereInput = {
    AND?: t_salesWhereInput | t_salesWhereInput[]
    OR?: t_salesWhereInput[]
    NOT?: t_salesWhereInput | t_salesWhereInput[]
    id?: UuidFilter<"t_sales"> | string
    id_customer?: UuidFilter<"t_sales"> | string
    status?: StringFilter<"t_sales"> | string
    total?: DecimalFilter<"t_sales"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"t_sales"> | string
    info?: JsonFilter<"t_sales">
    created_at?: DateTimeFilter<"t_sales"> | Date | string
    updated_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    midtrans_order_id?: StringFilter<"t_sales"> | string
    midtrans_success?: JsonNullableFilter<"t_sales">
    midtrans_pending?: JsonNullableFilter<"t_sales">
    midtrans_error?: JsonNullableFilter<"t_sales">
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    t_sales_line?: T_sales_lineListRelationFilter
  }

  export type t_salesOrderByWithRelationInput = {
    id?: SortOrder
    id_customer?: SortOrder
    status?: SortOrder
    total?: SortOrder
    currency?: SortOrder
    info?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    midtrans_order_id?: SortOrder
    midtrans_success?: SortOrderInput | SortOrder
    midtrans_pending?: SortOrderInput | SortOrder
    midtrans_error?: SortOrderInput | SortOrder
    customer?: customerOrderByWithRelationInput
    t_sales_line?: t_sales_lineOrderByRelationAggregateInput
  }

  export type t_salesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: t_salesWhereInput | t_salesWhereInput[]
    OR?: t_salesWhereInput[]
    NOT?: t_salesWhereInput | t_salesWhereInput[]
    id_customer?: UuidFilter<"t_sales"> | string
    status?: StringFilter<"t_sales"> | string
    total?: DecimalFilter<"t_sales"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"t_sales"> | string
    info?: JsonFilter<"t_sales">
    created_at?: DateTimeFilter<"t_sales"> | Date | string
    updated_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    midtrans_order_id?: StringFilter<"t_sales"> | string
    midtrans_success?: JsonNullableFilter<"t_sales">
    midtrans_pending?: JsonNullableFilter<"t_sales">
    midtrans_error?: JsonNullableFilter<"t_sales">
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    t_sales_line?: T_sales_lineListRelationFilter
  }, "id">

  export type t_salesOrderByWithAggregationInput = {
    id?: SortOrder
    id_customer?: SortOrder
    status?: SortOrder
    total?: SortOrder
    currency?: SortOrder
    info?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    midtrans_order_id?: SortOrder
    midtrans_success?: SortOrderInput | SortOrder
    midtrans_pending?: SortOrderInput | SortOrder
    midtrans_error?: SortOrderInput | SortOrder
    _count?: t_salesCountOrderByAggregateInput
    _avg?: t_salesAvgOrderByAggregateInput
    _max?: t_salesMaxOrderByAggregateInput
    _min?: t_salesMinOrderByAggregateInput
    _sum?: t_salesSumOrderByAggregateInput
  }

  export type t_salesScalarWhereWithAggregatesInput = {
    AND?: t_salesScalarWhereWithAggregatesInput | t_salesScalarWhereWithAggregatesInput[]
    OR?: t_salesScalarWhereWithAggregatesInput[]
    NOT?: t_salesScalarWhereWithAggregatesInput | t_salesScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"t_sales"> | string
    id_customer?: UuidWithAggregatesFilter<"t_sales"> | string
    status?: StringWithAggregatesFilter<"t_sales"> | string
    total?: DecimalWithAggregatesFilter<"t_sales"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"t_sales"> | string
    info?: JsonWithAggregatesFilter<"t_sales">
    created_at?: DateTimeWithAggregatesFilter<"t_sales"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"t_sales"> | Date | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"t_sales"> | Date | string | null
    midtrans_order_id?: StringWithAggregatesFilter<"t_sales"> | string
    midtrans_success?: JsonNullableWithAggregatesFilter<"t_sales">
    midtrans_pending?: JsonNullableWithAggregatesFilter<"t_sales">
    midtrans_error?: JsonNullableWithAggregatesFilter<"t_sales">
  }

  export type t_sales_downloadWhereInput = {
    AND?: t_sales_downloadWhereInput | t_sales_downloadWhereInput[]
    OR?: t_sales_downloadWhereInput[]
    NOT?: t_sales_downloadWhereInput | t_sales_downloadWhereInput[]
    id?: UuidFilter<"t_sales_download"> | string
    id_product?: UuidFilter<"t_sales_download"> | string
    id_customer?: UuidFilter<"t_sales_download"> | string
    downloaded_at?: DateTimeNullableFilter<"t_sales_download"> | Date | string | null
    ip_address?: StringNullableFilter<"t_sales_download"> | string | null
    download_key?: StringFilter<"t_sales_download"> | string
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type t_sales_downloadOrderByWithRelationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_customer?: SortOrder
    downloaded_at?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    download_key?: SortOrder
    customer?: customerOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type t_sales_downloadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: t_sales_downloadWhereInput | t_sales_downloadWhereInput[]
    OR?: t_sales_downloadWhereInput[]
    NOT?: t_sales_downloadWhereInput | t_sales_downloadWhereInput[]
    id_product?: UuidFilter<"t_sales_download"> | string
    id_customer?: UuidFilter<"t_sales_download"> | string
    downloaded_at?: DateTimeNullableFilter<"t_sales_download"> | Date | string | null
    ip_address?: StringNullableFilter<"t_sales_download"> | string | null
    download_key?: StringFilter<"t_sales_download"> | string
    customer?: XOR<CustomerRelationFilter, customerWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type t_sales_downloadOrderByWithAggregationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_customer?: SortOrder
    downloaded_at?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    download_key?: SortOrder
    _count?: t_sales_downloadCountOrderByAggregateInput
    _max?: t_sales_downloadMaxOrderByAggregateInput
    _min?: t_sales_downloadMinOrderByAggregateInput
  }

  export type t_sales_downloadScalarWhereWithAggregatesInput = {
    AND?: t_sales_downloadScalarWhereWithAggregatesInput | t_sales_downloadScalarWhereWithAggregatesInput[]
    OR?: t_sales_downloadScalarWhereWithAggregatesInput[]
    NOT?: t_sales_downloadScalarWhereWithAggregatesInput | t_sales_downloadScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"t_sales_download"> | string
    id_product?: UuidWithAggregatesFilter<"t_sales_download"> | string
    id_customer?: UuidWithAggregatesFilter<"t_sales_download"> | string
    downloaded_at?: DateTimeNullableWithAggregatesFilter<"t_sales_download"> | Date | string | null
    ip_address?: StringNullableWithAggregatesFilter<"t_sales_download"> | string | null
    download_key?: StringWithAggregatesFilter<"t_sales_download"> | string
  }

  export type t_sales_lineWhereInput = {
    AND?: t_sales_lineWhereInput | t_sales_lineWhereInput[]
    OR?: t_sales_lineWhereInput[]
    NOT?: t_sales_lineWhereInput | t_sales_lineWhereInput[]
    id?: UuidFilter<"t_sales_line"> | string
    id_sales?: UuidFilter<"t_sales_line"> | string
    unit_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"t_sales_line"> | number
    total_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    id_product?: UuidNullableFilter<"t_sales_line"> | string | null
    id_bundle?: UuidNullableFilter<"t_sales_line"> | string | null
    bundle?: XOR<BundleNullableRelationFilter, bundleWhereInput> | null
    product?: XOR<ProductNullableRelationFilter, productWhereInput> | null
    t_sales?: XOR<T_salesRelationFilter, t_salesWhereInput>
  }

  export type t_sales_lineOrderByWithRelationInput = {
    id?: SortOrder
    id_sales?: SortOrder
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
    id_product?: SortOrderInput | SortOrder
    id_bundle?: SortOrderInput | SortOrder
    bundle?: bundleOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    t_sales?: t_salesOrderByWithRelationInput
  }

  export type t_sales_lineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: t_sales_lineWhereInput | t_sales_lineWhereInput[]
    OR?: t_sales_lineWhereInput[]
    NOT?: t_sales_lineWhereInput | t_sales_lineWhereInput[]
    id_sales?: UuidFilter<"t_sales_line"> | string
    unit_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"t_sales_line"> | number
    total_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    id_product?: UuidNullableFilter<"t_sales_line"> | string | null
    id_bundle?: UuidNullableFilter<"t_sales_line"> | string | null
    bundle?: XOR<BundleNullableRelationFilter, bundleWhereInput> | null
    product?: XOR<ProductNullableRelationFilter, productWhereInput> | null
    t_sales?: XOR<T_salesRelationFilter, t_salesWhereInput>
  }, "id">

  export type t_sales_lineOrderByWithAggregationInput = {
    id?: SortOrder
    id_sales?: SortOrder
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
    id_product?: SortOrderInput | SortOrder
    id_bundle?: SortOrderInput | SortOrder
    _count?: t_sales_lineCountOrderByAggregateInput
    _avg?: t_sales_lineAvgOrderByAggregateInput
    _max?: t_sales_lineMaxOrderByAggregateInput
    _min?: t_sales_lineMinOrderByAggregateInput
    _sum?: t_sales_lineSumOrderByAggregateInput
  }

  export type t_sales_lineScalarWhereWithAggregatesInput = {
    AND?: t_sales_lineScalarWhereWithAggregatesInput | t_sales_lineScalarWhereWithAggregatesInput[]
    OR?: t_sales_lineScalarWhereWithAggregatesInput[]
    NOT?: t_sales_lineScalarWhereWithAggregatesInput | t_sales_lineScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"t_sales_line"> | string
    id_sales?: UuidWithAggregatesFilter<"t_sales_line"> | string
    unit_price?: DecimalWithAggregatesFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    qty?: IntWithAggregatesFilter<"t_sales_line"> | number
    total_price?: DecimalWithAggregatesFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    id_product?: UuidNullableWithAggregatesFilter<"t_sales_line"> | string | null
    id_bundle?: UuidNullableWithAggregatesFilter<"t_sales_line"> | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: UuidFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: StringFilter<"user"> | string
    author?: AuthorListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    author?: authorOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: StringFilter<"user"> | string
    author?: AuthorListRelationFilter
  }, "id">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    role?: StringWithAggregatesFilter<"user"> | string
  }

  export type authorCreateInput = {
    id?: string
    name: string
    user: userCreateNestedOneWithoutAuthorInput
    product?: productCreateNestedManyWithoutAuthorInput
  }

  export type authorUncheckedCreateInput = {
    id?: string
    id_user: string
    name: string
    product?: productUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type authorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutAuthorNestedInput
    product?: productUpdateManyWithoutAuthorNestedInput
  }

  export type authorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    product?: productUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type authorCreateManyInput = {
    id?: string
    id_user: string
    name: string
  }

  export type authorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type authorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type bannerCreateInput = {
    id?: string
    title: string
    banner_file?: string
    status?: string | null
    deleted_at?: Date | string | null
    link?: string | null
  }

  export type bannerUncheckedCreateInput = {
    id?: string
    title: string
    banner_file?: string
    status?: string | null
    deleted_at?: Date | string | null
    link?: string | null
  }

  export type bannerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    banner_file?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    banner_file?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerCreateManyInput = {
    id?: string
    title: string
    banner_file?: string
    status?: string | null
    deleted_at?: Date | string | null
    link?: string | null
  }

  export type bannerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    banner_file?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bannerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    banner_file?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bundleCreateInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryCreateNestedManyWithoutBundleInput
    bundle_product?: bundle_productCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutBundleInput
  }

  export type bundleUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutBundleInput
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutBundleInput
  }

  export type bundleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUpdateManyWithoutBundleNestedInput
    bundle_product?: bundle_productUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutBundleNestedInput
  }

  export type bundleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutBundleNestedInput
    bundle_product?: bundle_productUncheckedUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutBundleNestedInput
  }

  export type bundleCreateManyInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
  }

  export type bundleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
  }

  export type bundleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_categoryCreateInput = {
    id?: string
    bundle: bundleCreateNestedOneWithoutBundle_categoryInput
    category: categoryCreateNestedOneWithoutBundle_categoryInput
  }

  export type bundle_categoryUncheckedCreateInput = {
    id?: string
    id_category: string
    id_bundle: string
  }

  export type bundle_categoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundle?: bundleUpdateOneRequiredWithoutBundle_categoryNestedInput
    category?: categoryUpdateOneRequiredWithoutBundle_categoryNestedInput
  }

  export type bundle_categoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
    id_bundle?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_categoryCreateManyInput = {
    id?: string
    id_category: string
    id_bundle: string
  }

  export type bundle_categoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_categoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
    id_bundle?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_productCreateInput = {
    id?: string
    qty?: number | null
    bundle: bundleCreateNestedOneWithoutBundle_productInput
    product: productCreateNestedOneWithoutBundle_productInput
  }

  export type bundle_productUncheckedCreateInput = {
    id_bundle: string
    id_product: string
    id?: string
    qty?: number | null
  }

  export type bundle_productUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
    bundle?: bundleUpdateOneRequiredWithoutBundle_productNestedInput
    product?: productUpdateOneRequiredWithoutBundle_productNestedInput
  }

  export type bundle_productUncheckedUpdateInput = {
    id_bundle?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bundle_productCreateManyInput = {
    id_bundle: string
    id_product: string
    id?: string
    qty?: number | null
  }

  export type bundle_productUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bundle_productUncheckedUpdateManyInput = {
    id_bundle?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoryCreateInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryCreateNestedManyWithoutCategoryInput
    category?: categoryCreateNestedOneWithoutOther_categoryInput
    other_category?: categoryCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: string
    name: string
    id_parent?: string | null
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutCategoryInput
    other_category?: categoryUncheckedCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUpdateManyWithoutCategoryNestedInput
    category?: categoryUpdateOneWithoutOther_categoryNestedInput
    other_category?: categoryUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_parent?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutCategoryNestedInput
    other_category?: categoryUncheckedUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: string
    name: string
    id_parent?: string | null
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
  }

  export type categoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_parent?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type customerCreateInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerCreateNestedManyWithoutCustomerInput
    t_sales?: t_salesCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutCustomerInput
    t_sales?: t_salesUncheckedCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUpdateManyWithoutCustomerNestedInput
    t_sales?: t_salesUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUncheckedUpdateManyWithoutCustomerNestedInput
    t_sales?: t_salesUncheckedUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type customerCreateManyInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
  }

  export type customerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customer_readerCreateInput = {
    id?: string
    last_page?: number
    percent?: number
    customer: customerCreateNestedOneWithoutCustomer_readerInput
    product: productCreateNestedOneWithoutCustomer_readerInput
  }

  export type customer_readerUncheckedCreateInput = {
    id?: string
    id_customer: string
    id_product: string
    last_page?: number
    percent?: number
  }

  export type customer_readerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
    customer?: customerUpdateOneRequiredWithoutCustomer_readerNestedInput
    product?: productUpdateOneRequiredWithoutCustomer_readerNestedInput
  }

  export type customer_readerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type customer_readerCreateManyInput = {
    id?: string
    id_customer: string
    id_product: string
    last_page?: number
    percent?: number
  }

  export type customer_readerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type customer_readerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type customer_trackCreateInput = {
    id?: string
    ts?: Date | string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
    customer_track: customer_trackCreateNestedOneWithoutOther_customer_trackInput
    other_customer_track?: customer_trackCreateNestedManyWithoutCustomer_trackInput
  }

  export type customer_trackUncheckedCreateInput = {
    id?: string
    ts?: Date | string
    id_customer: string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
    other_customer_track?: customer_trackUncheckedCreateNestedManyWithoutCustomer_trackInput
  }

  export type customer_trackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
    customer_track?: customer_trackUpdateOneRequiredWithoutOther_customer_trackNestedInput
    other_customer_track?: customer_trackUpdateManyWithoutCustomer_trackNestedInput
  }

  export type customer_trackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    id_customer?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
    other_customer_track?: customer_trackUncheckedUpdateManyWithoutCustomer_trackNestedInput
  }

  export type customer_trackCreateManyInput = {
    id?: string
    ts?: Date | string
    id_customer: string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
  }

  export type customer_trackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
  }

  export type customer_trackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    id_customer?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
  }

  export type landingCreateInput = {
    id?: string
    slug: string
    views: number
    deleted_at?: Date | string | null
    status?: string
    title?: string
    landing_items?: landing_itemsCreateNestedManyWithoutLandingInput
  }

  export type landingUncheckedCreateInput = {
    id?: string
    slug: string
    views: number
    deleted_at?: Date | string | null
    status?: string
    title?: string
    landing_items?: landing_itemsUncheckedCreateNestedManyWithoutLandingInput
  }

  export type landingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    landing_items?: landing_itemsUpdateManyWithoutLandingNestedInput
  }

  export type landingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    landing_items?: landing_itemsUncheckedUpdateManyWithoutLandingNestedInput
  }

  export type landingCreateManyInput = {
    id?: string
    slug: string
    views: number
    deleted_at?: Date | string | null
    status?: string
    title?: string
  }

  export type landingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type landingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsCreateInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    idx?: number
    color?: string
    landing: landingCreateNestedOneWithoutLanding_itemsInput
  }

  export type landing_itemsUncheckedCreateInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    landing_id: string
    idx?: number
    color?: string
  }

  export type landing_itemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    landing?: landingUpdateOneRequiredWithoutLanding_itemsNestedInput
  }

  export type landing_itemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    landing_id?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsCreateManyInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    landing_id: string
    idx?: number
    color?: string
  }

  export type landing_itemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    landing_id?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type midtrxCreateInput = {
    id?: string
    tz?: Date | string
    type: string
    payload: JsonNullValueInput | InputJsonValue
  }

  export type midtrxUncheckedCreateInput = {
    id?: string
    tz?: Date | string
    type: string
    payload: JsonNullValueInput | InputJsonValue
  }

  export type midtrxUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
  }

  export type midtrxUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
  }

  export type midtrxCreateManyInput = {
    id?: string
    tz?: Date | string
    type: string
    payload: JsonNullValueInput | InputJsonValue
  }

  export type midtrxUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
  }

  export type midtrxUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
  }

  export type productCreateInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
  }

  export type productUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_categoryCreateInput = {
    id?: string
    category: categoryCreateNestedOneWithoutProduct_categoryInput
    product: productCreateNestedOneWithoutProduct_categoryInput
  }

  export type product_categoryUncheckedCreateInput = {
    id_product: string
    id_category: string
    id?: string
  }

  export type product_categoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneRequiredWithoutProduct_categoryNestedInput
    product?: productUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type product_categoryUncheckedUpdateInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type product_categoryCreateManyInput = {
    id_product: string
    id_category: string
    id?: string
  }

  export type product_categoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type product_categoryUncheckedUpdateManyInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type t_salesCreateInput = {
    id?: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    customer: customerCreateNestedOneWithoutT_salesInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutT_salesInput
  }

  export type t_salesUncheckedCreateInput = {
    id?: string
    id_customer: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutT_salesInput
  }

  export type t_salesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    customer?: customerUpdateOneRequiredWithoutT_salesNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutT_salesNestedInput
  }

  export type t_salesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutT_salesNestedInput
  }

  export type t_salesCreateManyInput = {
    id?: string
    id_customer: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_salesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_salesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_sales_downloadCreateInput = {
    id?: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
    customer: customerCreateNestedOneWithoutT_sales_downloadInput
    product: productCreateNestedOneWithoutT_sales_downloadInput
  }

  export type t_sales_downloadUncheckedCreateInput = {
    id?: string
    id_product: string
    id_customer: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type t_sales_downloadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
    customer?: customerUpdateOneRequiredWithoutT_sales_downloadNestedInput
    product?: productUpdateOneRequiredWithoutT_sales_downloadNestedInput
  }

  export type t_sales_downloadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_downloadCreateManyInput = {
    id?: string
    id_product: string
    id_customer: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type t_sales_downloadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_downloadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_lineCreateInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    bundle?: bundleCreateNestedOneWithoutT_sales_lineInput
    product?: productCreateNestedOneWithoutT_sales_lineInput
    t_sales: t_salesCreateNestedOneWithoutT_sales_lineInput
  }

  export type t_sales_lineUncheckedCreateInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
    id_bundle?: string | null
  }

  export type t_sales_lineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bundle?: bundleUpdateOneWithoutT_sales_lineNestedInput
    product?: productUpdateOneWithoutT_sales_lineNestedInput
    t_sales?: t_salesUpdateOneRequiredWithoutT_sales_lineNestedInput
  }

  export type t_sales_lineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type t_sales_lineCreateManyInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
    id_bundle?: string | null
  }

  export type t_sales_lineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type t_sales_lineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    id?: string
    username: string
    password: string
    role?: string
    author?: authorCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    role?: string
    author?: authorUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    author?: authorUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    author?: authorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    username: string
    password: string
    role?: string
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type authorCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name?: SortOrder
  }

  export type authorMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name?: SortOrder
  }

  export type authorMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type bannerCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    banner_file?: SortOrder
    status?: SortOrder
    deleted_at?: SortOrder
    link?: SortOrder
  }

  export type bannerMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    banner_file?: SortOrder
    status?: SortOrder
    deleted_at?: SortOrder
    link?: SortOrder
  }

  export type bannerMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    banner_file?: SortOrder
    status?: SortOrder
    deleted_at?: SortOrder
    link?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type Bundle_categoryListRelationFilter = {
    every?: bundle_categoryWhereInput
    some?: bundle_categoryWhereInput
    none?: bundle_categoryWhereInput
  }

  export type Bundle_productListRelationFilter = {
    every?: bundle_productWhereInput
    some?: bundle_productWhereInput
    none?: bundle_productWhereInput
  }

  export type T_sales_lineListRelationFilter = {
    every?: t_sales_lineWhereInput
    some?: t_sales_lineWhereInput
    none?: t_sales_lineWhereInput
  }

  export type bundle_categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bundle_productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type t_sales_lineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bundleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    currency?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    sku?: SortOrder
  }

  export type bundleAvgOrderByAggregateInput = {
    strike_price?: SortOrder
    real_price?: SortOrder
  }

  export type bundleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    currency?: SortOrder
    desc?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    sku?: SortOrder
  }

  export type bundleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    currency?: SortOrder
    desc?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    sku?: SortOrder
  }

  export type bundleSumOrderByAggregateInput = {
    strike_price?: SortOrder
    real_price?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BundleRelationFilter = {
    is?: bundleWhereInput
    isNot?: bundleWhereInput
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type bundle_categoryCountOrderByAggregateInput = {
    id?: SortOrder
    id_category?: SortOrder
    id_bundle?: SortOrder
  }

  export type bundle_categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    id_category?: SortOrder
    id_bundle?: SortOrder
  }

  export type bundle_categoryMinOrderByAggregateInput = {
    id?: SortOrder
    id_category?: SortOrder
    id_bundle?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type bundle_productCountOrderByAggregateInput = {
    id_bundle?: SortOrder
    id_product?: SortOrder
    id?: SortOrder
    qty?: SortOrder
  }

  export type bundle_productAvgOrderByAggregateInput = {
    qty?: SortOrder
  }

  export type bundle_productMaxOrderByAggregateInput = {
    id_bundle?: SortOrder
    id_product?: SortOrder
    id?: SortOrder
    qty?: SortOrder
  }

  export type bundle_productMinOrderByAggregateInput = {
    id_bundle?: SortOrder
    id_product?: SortOrder
    id?: SortOrder
    qty?: SortOrder
  }

  export type bundle_productSumOrderByAggregateInput = {
    qty?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type CategoryNullableRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: categoryWhereInput
    some?: categoryWhereInput
    none?: categoryWhereInput
  }

  export type Product_categoryListRelationFilter = {
    every?: product_categoryWhereInput
    some?: product_categoryWhereInput
    none?: product_categoryWhereInput
  }

  export type categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_parent?: SortOrder
    deleted_at?: SortOrder
    slug?: SortOrder
    img?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_parent?: SortOrder
    deleted_at?: SortOrder
    slug?: SortOrder
    img?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_parent?: SortOrder
    deleted_at?: SortOrder
    slug?: SortOrder
    img?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Customer_readerListRelationFilter = {
    every?: customer_readerWhereInput
    some?: customer_readerWhereInput
    none?: customer_readerWhereInput
  }

  export type T_salesListRelationFilter = {
    every?: t_salesWhereInput
    some?: t_salesWhereInput
    none?: t_salesWhereInput
  }

  export type T_sales_downloadListRelationFilter = {
    every?: t_sales_downloadWhereInput
    some?: t_sales_downloadWhereInput
    none?: t_sales_downloadWhereInput
  }

  export type customer_readerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type t_salesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type t_sales_downloadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    deleted_at?: SortOrder
    otp?: SortOrder
  }

  export type customerAvgOrderByAggregateInput = {
    otp?: SortOrder
  }

  export type customerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    deleted_at?: SortOrder
    otp?: SortOrder
  }

  export type customerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    deleted_at?: SortOrder
    otp?: SortOrder
  }

  export type customerSumOrderByAggregateInput = {
    otp?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CustomerRelationFilter = {
    is?: customerWhereInput
    isNot?: customerWhereInput
  }

  export type customer_readerCountOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    id_product?: SortOrder
    last_page?: SortOrder
    percent?: SortOrder
  }

  export type customer_readerAvgOrderByAggregateInput = {
    last_page?: SortOrder
    percent?: SortOrder
  }

  export type customer_readerMaxOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    id_product?: SortOrder
    last_page?: SortOrder
    percent?: SortOrder
  }

  export type customer_readerMinOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    id_product?: SortOrder
    last_page?: SortOrder
    percent?: SortOrder
  }

  export type customer_readerSumOrderByAggregateInput = {
    last_page?: SortOrder
    percent?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Customer_trackRelationFilter = {
    is?: customer_trackWhereInput
    isNot?: customer_trackWhereInput
  }

  export type Customer_trackListRelationFilter = {
    every?: customer_trackWhereInput
    some?: customer_trackWhereInput
    none?: customer_trackWhereInput
  }

  export type customer_trackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customer_trackCountOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    id_customer?: SortOrder
    path?: SortOrder
    referrer?: SortOrder
    info?: SortOrder
    ip?: SortOrder
  }

  export type customer_trackMaxOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    id_customer?: SortOrder
    path?: SortOrder
    referrer?: SortOrder
    ip?: SortOrder
  }

  export type customer_trackMinOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    id_customer?: SortOrder
    path?: SortOrder
    referrer?: SortOrder
    ip?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Landing_itemsListRelationFilter = {
    every?: landing_itemsWhereInput
    some?: landing_itemsWhereInput
    none?: landing_itemsWhereInput
  }

  export type landing_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type landingCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    title?: SortOrder
  }

  export type landingAvgOrderByAggregateInput = {
    views?: SortOrder
  }

  export type landingMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    title?: SortOrder
  }

  export type landingMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    deleted_at?: SortOrder
    status?: SortOrder
    title?: SortOrder
  }

  export type landingSumOrderByAggregateInput = {
    views?: SortOrder
  }

  export type LandingRelationFilter = {
    is?: landingWhereInput
    isNot?: landingWhereInput
  }

  export type landing_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    img_file?: SortOrder
    tag?: SortOrder
    link_to?: SortOrder
    landing_id?: SortOrder
    idx?: SortOrder
    color?: SortOrder
  }

  export type landing_itemsAvgOrderByAggregateInput = {
    idx?: SortOrder
  }

  export type landing_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    img_file?: SortOrder
    tag?: SortOrder
    link_to?: SortOrder
    landing_id?: SortOrder
    idx?: SortOrder
    color?: SortOrder
  }

  export type landing_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    img_file?: SortOrder
    tag?: SortOrder
    link_to?: SortOrder
    landing_id?: SortOrder
    idx?: SortOrder
    color?: SortOrder
  }

  export type landing_itemsSumOrderByAggregateInput = {
    idx?: SortOrder
  }

  export type midtrxCountOrderByAggregateInput = {
    id?: SortOrder
    tz?: SortOrder
    type?: SortOrder
    payload?: SortOrder
  }

  export type midtrxMaxOrderByAggregateInput = {
    id?: SortOrder
    tz?: SortOrder
    type?: SortOrder
  }

  export type midtrxMinOrderByAggregateInput = {
    id?: SortOrder
    tz?: SortOrder
    type?: SortOrder
  }

  export type AuthorNullableRelationFilter = {
    is?: authorWhereInput | null
    isNot?: authorWhereInput | null
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    desc?: SortOrder
    info?: SortOrder
    status?: SortOrder
    currency?: SortOrder
    deleted_at?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    product_file?: SortOrder
    sku?: SortOrder
    id_author?: SortOrder
    published_date?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    strike_price?: SortOrder
    real_price?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    desc?: SortOrder
    status?: SortOrder
    currency?: SortOrder
    deleted_at?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    product_file?: SortOrder
    sku?: SortOrder
    id_author?: SortOrder
    published_date?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    strike_price?: SortOrder
    real_price?: SortOrder
    desc?: SortOrder
    status?: SortOrder
    currency?: SortOrder
    deleted_at?: SortOrder
    img_file?: SortOrder
    cover?: SortOrder
    product_file?: SortOrder
    sku?: SortOrder
    id_author?: SortOrder
    published_date?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    strike_price?: SortOrder
    real_price?: SortOrder
  }

  export type product_categoryCountOrderByAggregateInput = {
    id_product?: SortOrder
    id_category?: SortOrder
    id?: SortOrder
  }

  export type product_categoryMaxOrderByAggregateInput = {
    id_product?: SortOrder
    id_category?: SortOrder
    id?: SortOrder
  }

  export type product_categoryMinOrderByAggregateInput = {
    id_product?: SortOrder
    id_category?: SortOrder
    id?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type t_salesCountOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    status?: SortOrder
    total?: SortOrder
    currency?: SortOrder
    info?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    midtrans_order_id?: SortOrder
    midtrans_success?: SortOrder
    midtrans_pending?: SortOrder
    midtrans_error?: SortOrder
  }

  export type t_salesAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type t_salesMaxOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    status?: SortOrder
    total?: SortOrder
    currency?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    midtrans_order_id?: SortOrder
  }

  export type t_salesMinOrderByAggregateInput = {
    id?: SortOrder
    id_customer?: SortOrder
    status?: SortOrder
    total?: SortOrder
    currency?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    midtrans_order_id?: SortOrder
  }

  export type t_salesSumOrderByAggregateInput = {
    total?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type t_sales_downloadCountOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_customer?: SortOrder
    downloaded_at?: SortOrder
    ip_address?: SortOrder
    download_key?: SortOrder
  }

  export type t_sales_downloadMaxOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_customer?: SortOrder
    downloaded_at?: SortOrder
    ip_address?: SortOrder
    download_key?: SortOrder
  }

  export type t_sales_downloadMinOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_customer?: SortOrder
    downloaded_at?: SortOrder
    ip_address?: SortOrder
    download_key?: SortOrder
  }

  export type BundleNullableRelationFilter = {
    is?: bundleWhereInput | null
    isNot?: bundleWhereInput | null
  }

  export type ProductNullableRelationFilter = {
    is?: productWhereInput | null
    isNot?: productWhereInput | null
  }

  export type T_salesRelationFilter = {
    is?: t_salesWhereInput
    isNot?: t_salesWhereInput
  }

  export type t_sales_lineCountOrderByAggregateInput = {
    id?: SortOrder
    id_sales?: SortOrder
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
    id_product?: SortOrder
    id_bundle?: SortOrder
  }

  export type t_sales_lineAvgOrderByAggregateInput = {
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
  }

  export type t_sales_lineMaxOrderByAggregateInput = {
    id?: SortOrder
    id_sales?: SortOrder
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
    id_product?: SortOrder
    id_bundle?: SortOrder
  }

  export type t_sales_lineMinOrderByAggregateInput = {
    id?: SortOrder
    id_sales?: SortOrder
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
    id_product?: SortOrder
    id_bundle?: SortOrder
  }

  export type t_sales_lineSumOrderByAggregateInput = {
    unit_price?: SortOrder
    qty?: SortOrder
    total_price?: SortOrder
  }

  export type AuthorListRelationFilter = {
    every?: authorWhereInput
    some?: authorWhereInput
    none?: authorWhereInput
  }

  export type authorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userCreateNestedOneWithoutAuthorInput = {
    create?: XOR<userCreateWithoutAuthorInput, userUncheckedCreateWithoutAuthorInput>
    connectOrCreate?: userCreateOrConnectWithoutAuthorInput
    connect?: userWhereUniqueInput
  }

  export type productCreateNestedManyWithoutAuthorInput = {
    create?: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput> | productCreateWithoutAuthorInput[] | productUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productCreateOrConnectWithoutAuthorInput | productCreateOrConnectWithoutAuthorInput[]
    createMany?: productCreateManyAuthorInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput> | productCreateWithoutAuthorInput[] | productUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productCreateOrConnectWithoutAuthorInput | productCreateOrConnectWithoutAuthorInput[]
    createMany?: productCreateManyAuthorInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userUpdateOneRequiredWithoutAuthorNestedInput = {
    create?: XOR<userCreateWithoutAuthorInput, userUncheckedCreateWithoutAuthorInput>
    connectOrCreate?: userCreateOrConnectWithoutAuthorInput
    upsert?: userUpsertWithoutAuthorInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAuthorInput, userUpdateWithoutAuthorInput>, userUncheckedUpdateWithoutAuthorInput>
  }

  export type productUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput> | productCreateWithoutAuthorInput[] | productUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productCreateOrConnectWithoutAuthorInput | productCreateOrConnectWithoutAuthorInput[]
    upsert?: productUpsertWithWhereUniqueWithoutAuthorInput | productUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: productCreateManyAuthorInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutAuthorInput | productUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: productUpdateManyWithWhereWithoutAuthorInput | productUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput> | productCreateWithoutAuthorInput[] | productUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: productCreateOrConnectWithoutAuthorInput | productCreateOrConnectWithoutAuthorInput[]
    upsert?: productUpsertWithWhereUniqueWithoutAuthorInput | productUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: productCreateManyAuthorInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutAuthorInput | productUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: productUpdateManyWithWhereWithoutAuthorInput | productUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type bundle_categoryCreateNestedManyWithoutBundleInput = {
    create?: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput> | bundle_categoryCreateWithoutBundleInput[] | bundle_categoryUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutBundleInput | bundle_categoryCreateOrConnectWithoutBundleInput[]
    createMany?: bundle_categoryCreateManyBundleInputEnvelope
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
  }

  export type bundle_productCreateNestedManyWithoutBundleInput = {
    create?: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput> | bundle_productCreateWithoutBundleInput[] | bundle_productUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutBundleInput | bundle_productCreateOrConnectWithoutBundleInput[]
    createMany?: bundle_productCreateManyBundleInputEnvelope
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
  }

  export type t_sales_lineCreateNestedManyWithoutBundleInput = {
    create?: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput> | t_sales_lineCreateWithoutBundleInput[] | t_sales_lineUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutBundleInput | t_sales_lineCreateOrConnectWithoutBundleInput[]
    createMany?: t_sales_lineCreateManyBundleInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type bundle_categoryUncheckedCreateNestedManyWithoutBundleInput = {
    create?: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput> | bundle_categoryCreateWithoutBundleInput[] | bundle_categoryUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutBundleInput | bundle_categoryCreateOrConnectWithoutBundleInput[]
    createMany?: bundle_categoryCreateManyBundleInputEnvelope
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
  }

  export type bundle_productUncheckedCreateNestedManyWithoutBundleInput = {
    create?: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput> | bundle_productCreateWithoutBundleInput[] | bundle_productUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutBundleInput | bundle_productCreateOrConnectWithoutBundleInput[]
    createMany?: bundle_productCreateManyBundleInputEnvelope
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
  }

  export type t_sales_lineUncheckedCreateNestedManyWithoutBundleInput = {
    create?: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput> | t_sales_lineCreateWithoutBundleInput[] | t_sales_lineUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutBundleInput | t_sales_lineCreateOrConnectWithoutBundleInput[]
    createMany?: t_sales_lineCreateManyBundleInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type bundle_categoryUpdateManyWithoutBundleNestedInput = {
    create?: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput> | bundle_categoryCreateWithoutBundleInput[] | bundle_categoryUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutBundleInput | bundle_categoryCreateOrConnectWithoutBundleInput[]
    upsert?: bundle_categoryUpsertWithWhereUniqueWithoutBundleInput | bundle_categoryUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: bundle_categoryCreateManyBundleInputEnvelope
    set?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    disconnect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    delete?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    update?: bundle_categoryUpdateWithWhereUniqueWithoutBundleInput | bundle_categoryUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: bundle_categoryUpdateManyWithWhereWithoutBundleInput | bundle_categoryUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
  }

  export type bundle_productUpdateManyWithoutBundleNestedInput = {
    create?: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput> | bundle_productCreateWithoutBundleInput[] | bundle_productUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutBundleInput | bundle_productCreateOrConnectWithoutBundleInput[]
    upsert?: bundle_productUpsertWithWhereUniqueWithoutBundleInput | bundle_productUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: bundle_productCreateManyBundleInputEnvelope
    set?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    disconnect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    delete?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    update?: bundle_productUpdateWithWhereUniqueWithoutBundleInput | bundle_productUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: bundle_productUpdateManyWithWhereWithoutBundleInput | bundle_productUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
  }

  export type t_sales_lineUpdateManyWithoutBundleNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput> | t_sales_lineCreateWithoutBundleInput[] | t_sales_lineUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutBundleInput | t_sales_lineCreateOrConnectWithoutBundleInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutBundleInput | t_sales_lineUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: t_sales_lineCreateManyBundleInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutBundleInput | t_sales_lineUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutBundleInput | t_sales_lineUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type bundle_categoryUncheckedUpdateManyWithoutBundleNestedInput = {
    create?: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput> | bundle_categoryCreateWithoutBundleInput[] | bundle_categoryUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutBundleInput | bundle_categoryCreateOrConnectWithoutBundleInput[]
    upsert?: bundle_categoryUpsertWithWhereUniqueWithoutBundleInput | bundle_categoryUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: bundle_categoryCreateManyBundleInputEnvelope
    set?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    disconnect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    delete?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    update?: bundle_categoryUpdateWithWhereUniqueWithoutBundleInput | bundle_categoryUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: bundle_categoryUpdateManyWithWhereWithoutBundleInput | bundle_categoryUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
  }

  export type bundle_productUncheckedUpdateManyWithoutBundleNestedInput = {
    create?: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput> | bundle_productCreateWithoutBundleInput[] | bundle_productUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutBundleInput | bundle_productCreateOrConnectWithoutBundleInput[]
    upsert?: bundle_productUpsertWithWhereUniqueWithoutBundleInput | bundle_productUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: bundle_productCreateManyBundleInputEnvelope
    set?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    disconnect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    delete?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    update?: bundle_productUpdateWithWhereUniqueWithoutBundleInput | bundle_productUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: bundle_productUpdateManyWithWhereWithoutBundleInput | bundle_productUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
  }

  export type t_sales_lineUncheckedUpdateManyWithoutBundleNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput> | t_sales_lineCreateWithoutBundleInput[] | t_sales_lineUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutBundleInput | t_sales_lineCreateOrConnectWithoutBundleInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutBundleInput | t_sales_lineUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: t_sales_lineCreateManyBundleInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutBundleInput | t_sales_lineUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutBundleInput | t_sales_lineUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type bundleCreateNestedOneWithoutBundle_categoryInput = {
    create?: XOR<bundleCreateWithoutBundle_categoryInput, bundleUncheckedCreateWithoutBundle_categoryInput>
    connectOrCreate?: bundleCreateOrConnectWithoutBundle_categoryInput
    connect?: bundleWhereUniqueInput
  }

  export type categoryCreateNestedOneWithoutBundle_categoryInput = {
    create?: XOR<categoryCreateWithoutBundle_categoryInput, categoryUncheckedCreateWithoutBundle_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBundle_categoryInput
    connect?: categoryWhereUniqueInput
  }

  export type bundleUpdateOneRequiredWithoutBundle_categoryNestedInput = {
    create?: XOR<bundleCreateWithoutBundle_categoryInput, bundleUncheckedCreateWithoutBundle_categoryInput>
    connectOrCreate?: bundleCreateOrConnectWithoutBundle_categoryInput
    upsert?: bundleUpsertWithoutBundle_categoryInput
    connect?: bundleWhereUniqueInput
    update?: XOR<XOR<bundleUpdateToOneWithWhereWithoutBundle_categoryInput, bundleUpdateWithoutBundle_categoryInput>, bundleUncheckedUpdateWithoutBundle_categoryInput>
  }

  export type categoryUpdateOneRequiredWithoutBundle_categoryNestedInput = {
    create?: XOR<categoryCreateWithoutBundle_categoryInput, categoryUncheckedCreateWithoutBundle_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBundle_categoryInput
    upsert?: categoryUpsertWithoutBundle_categoryInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutBundle_categoryInput, categoryUpdateWithoutBundle_categoryInput>, categoryUncheckedUpdateWithoutBundle_categoryInput>
  }

  export type bundleCreateNestedOneWithoutBundle_productInput = {
    create?: XOR<bundleCreateWithoutBundle_productInput, bundleUncheckedCreateWithoutBundle_productInput>
    connectOrCreate?: bundleCreateOrConnectWithoutBundle_productInput
    connect?: bundleWhereUniqueInput
  }

  export type productCreateNestedOneWithoutBundle_productInput = {
    create?: XOR<productCreateWithoutBundle_productInput, productUncheckedCreateWithoutBundle_productInput>
    connectOrCreate?: productCreateOrConnectWithoutBundle_productInput
    connect?: productWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type bundleUpdateOneRequiredWithoutBundle_productNestedInput = {
    create?: XOR<bundleCreateWithoutBundle_productInput, bundleUncheckedCreateWithoutBundle_productInput>
    connectOrCreate?: bundleCreateOrConnectWithoutBundle_productInput
    upsert?: bundleUpsertWithoutBundle_productInput
    connect?: bundleWhereUniqueInput
    update?: XOR<XOR<bundleUpdateToOneWithWhereWithoutBundle_productInput, bundleUpdateWithoutBundle_productInput>, bundleUncheckedUpdateWithoutBundle_productInput>
  }

  export type productUpdateOneRequiredWithoutBundle_productNestedInput = {
    create?: XOR<productCreateWithoutBundle_productInput, productUncheckedCreateWithoutBundle_productInput>
    connectOrCreate?: productCreateOrConnectWithoutBundle_productInput
    upsert?: productUpsertWithoutBundle_productInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutBundle_productInput, productUpdateWithoutBundle_productInput>, productUncheckedUpdateWithoutBundle_productInput>
  }

  export type bundle_categoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput> | bundle_categoryCreateWithoutCategoryInput[] | bundle_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutCategoryInput | bundle_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: bundle_categoryCreateManyCategoryInputEnvelope
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
  }

  export type categoryCreateNestedOneWithoutOther_categoryInput = {
    create?: XOR<categoryCreateWithoutOther_categoryInput, categoryUncheckedCreateWithoutOther_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutOther_categoryInput
    connect?: categoryWhereUniqueInput
  }

  export type categoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput> | categoryCreateWithoutCategoryInput[] | categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryInput | categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: categoryCreateManyCategoryInputEnvelope
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
  }

  export type product_categoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput> | product_categoryCreateWithoutCategoryInput[] | product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutCategoryInput | product_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: product_categoryCreateManyCategoryInputEnvelope
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
  }

  export type bundle_categoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput> | bundle_categoryCreateWithoutCategoryInput[] | bundle_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutCategoryInput | bundle_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: bundle_categoryCreateManyCategoryInputEnvelope
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
  }

  export type categoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput> | categoryCreateWithoutCategoryInput[] | categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryInput | categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: categoryCreateManyCategoryInputEnvelope
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
  }

  export type product_categoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput> | product_categoryCreateWithoutCategoryInput[] | product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutCategoryInput | product_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: product_categoryCreateManyCategoryInputEnvelope
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
  }

  export type bundle_categoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput> | bundle_categoryCreateWithoutCategoryInput[] | bundle_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutCategoryInput | bundle_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: bundle_categoryUpsertWithWhereUniqueWithoutCategoryInput | bundle_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: bundle_categoryCreateManyCategoryInputEnvelope
    set?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    disconnect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    delete?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    update?: bundle_categoryUpdateWithWhereUniqueWithoutCategoryInput | bundle_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: bundle_categoryUpdateManyWithWhereWithoutCategoryInput | bundle_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
  }

  export type categoryUpdateOneWithoutOther_categoryNestedInput = {
    create?: XOR<categoryCreateWithoutOther_categoryInput, categoryUncheckedCreateWithoutOther_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutOther_categoryInput
    upsert?: categoryUpsertWithoutOther_categoryInput
    disconnect?: categoryWhereInput | boolean
    delete?: categoryWhereInput | boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutOther_categoryInput, categoryUpdateWithoutOther_categoryInput>, categoryUncheckedUpdateWithoutOther_categoryInput>
  }

  export type categoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput> | categoryCreateWithoutCategoryInput[] | categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryInput | categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: categoryUpsertWithWhereUniqueWithoutCategoryInput | categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: categoryCreateManyCategoryInputEnvelope
    set?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    disconnect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    delete?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    update?: categoryUpdateWithWhereUniqueWithoutCategoryInput | categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: categoryUpdateManyWithWhereWithoutCategoryInput | categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: categoryScalarWhereInput | categoryScalarWhereInput[]
  }

  export type product_categoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput> | product_categoryCreateWithoutCategoryInput[] | product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutCategoryInput | product_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: product_categoryUpsertWithWhereUniqueWithoutCategoryInput | product_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: product_categoryCreateManyCategoryInputEnvelope
    set?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    disconnect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    delete?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    update?: product_categoryUpdateWithWhereUniqueWithoutCategoryInput | product_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: product_categoryUpdateManyWithWhereWithoutCategoryInput | product_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
  }

  export type bundle_categoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput> | bundle_categoryCreateWithoutCategoryInput[] | bundle_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: bundle_categoryCreateOrConnectWithoutCategoryInput | bundle_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: bundle_categoryUpsertWithWhereUniqueWithoutCategoryInput | bundle_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: bundle_categoryCreateManyCategoryInputEnvelope
    set?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    disconnect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    delete?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    connect?: bundle_categoryWhereUniqueInput | bundle_categoryWhereUniqueInput[]
    update?: bundle_categoryUpdateWithWhereUniqueWithoutCategoryInput | bundle_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: bundle_categoryUpdateManyWithWhereWithoutCategoryInput | bundle_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
  }

  export type categoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput> | categoryCreateWithoutCategoryInput[] | categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryInput | categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: categoryUpsertWithWhereUniqueWithoutCategoryInput | categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: categoryCreateManyCategoryInputEnvelope
    set?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    disconnect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    delete?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    update?: categoryUpdateWithWhereUniqueWithoutCategoryInput | categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: categoryUpdateManyWithWhereWithoutCategoryInput | categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: categoryScalarWhereInput | categoryScalarWhereInput[]
  }

  export type product_categoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput> | product_categoryCreateWithoutCategoryInput[] | product_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutCategoryInput | product_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: product_categoryUpsertWithWhereUniqueWithoutCategoryInput | product_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: product_categoryCreateManyCategoryInputEnvelope
    set?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    disconnect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    delete?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    update?: product_categoryUpdateWithWhereUniqueWithoutCategoryInput | product_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: product_categoryUpdateManyWithWhereWithoutCategoryInput | product_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
  }

  export type customer_readerCreateNestedManyWithoutCustomerInput = {
    create?: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput> | customer_readerCreateWithoutCustomerInput[] | customer_readerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutCustomerInput | customer_readerCreateOrConnectWithoutCustomerInput[]
    createMany?: customer_readerCreateManyCustomerInputEnvelope
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
  }

  export type t_salesCreateNestedManyWithoutCustomerInput = {
    create?: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput> | t_salesCreateWithoutCustomerInput[] | t_salesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_salesCreateOrConnectWithoutCustomerInput | t_salesCreateOrConnectWithoutCustomerInput[]
    createMany?: t_salesCreateManyCustomerInputEnvelope
    connect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
  }

  export type t_sales_downloadCreateNestedManyWithoutCustomerInput = {
    create?: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput> | t_sales_downloadCreateWithoutCustomerInput[] | t_sales_downloadUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutCustomerInput | t_sales_downloadCreateOrConnectWithoutCustomerInput[]
    createMany?: t_sales_downloadCreateManyCustomerInputEnvelope
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
  }

  export type customer_readerUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput> | customer_readerCreateWithoutCustomerInput[] | customer_readerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutCustomerInput | customer_readerCreateOrConnectWithoutCustomerInput[]
    createMany?: customer_readerCreateManyCustomerInputEnvelope
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
  }

  export type t_salesUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput> | t_salesCreateWithoutCustomerInput[] | t_salesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_salesCreateOrConnectWithoutCustomerInput | t_salesCreateOrConnectWithoutCustomerInput[]
    createMany?: t_salesCreateManyCustomerInputEnvelope
    connect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
  }

  export type t_sales_downloadUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput> | t_sales_downloadCreateWithoutCustomerInput[] | t_sales_downloadUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutCustomerInput | t_sales_downloadCreateOrConnectWithoutCustomerInput[]
    createMany?: t_sales_downloadCreateManyCustomerInputEnvelope
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
  }

  export type customer_readerUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput> | customer_readerCreateWithoutCustomerInput[] | customer_readerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutCustomerInput | customer_readerCreateOrConnectWithoutCustomerInput[]
    upsert?: customer_readerUpsertWithWhereUniqueWithoutCustomerInput | customer_readerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: customer_readerCreateManyCustomerInputEnvelope
    set?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    disconnect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    delete?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    update?: customer_readerUpdateWithWhereUniqueWithoutCustomerInput | customer_readerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: customer_readerUpdateManyWithWhereWithoutCustomerInput | customer_readerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
  }

  export type t_salesUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput> | t_salesCreateWithoutCustomerInput[] | t_salesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_salesCreateOrConnectWithoutCustomerInput | t_salesCreateOrConnectWithoutCustomerInput[]
    upsert?: t_salesUpsertWithWhereUniqueWithoutCustomerInput | t_salesUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: t_salesCreateManyCustomerInputEnvelope
    set?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    disconnect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    delete?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    connect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    update?: t_salesUpdateWithWhereUniqueWithoutCustomerInput | t_salesUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: t_salesUpdateManyWithWhereWithoutCustomerInput | t_salesUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: t_salesScalarWhereInput | t_salesScalarWhereInput[]
  }

  export type t_sales_downloadUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput> | t_sales_downloadCreateWithoutCustomerInput[] | t_sales_downloadUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutCustomerInput | t_sales_downloadCreateOrConnectWithoutCustomerInput[]
    upsert?: t_sales_downloadUpsertWithWhereUniqueWithoutCustomerInput | t_sales_downloadUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: t_sales_downloadCreateManyCustomerInputEnvelope
    set?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    disconnect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    delete?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    update?: t_sales_downloadUpdateWithWhereUniqueWithoutCustomerInput | t_sales_downloadUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: t_sales_downloadUpdateManyWithWhereWithoutCustomerInput | t_sales_downloadUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
  }

  export type customer_readerUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput> | customer_readerCreateWithoutCustomerInput[] | customer_readerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutCustomerInput | customer_readerCreateOrConnectWithoutCustomerInput[]
    upsert?: customer_readerUpsertWithWhereUniqueWithoutCustomerInput | customer_readerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: customer_readerCreateManyCustomerInputEnvelope
    set?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    disconnect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    delete?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    update?: customer_readerUpdateWithWhereUniqueWithoutCustomerInput | customer_readerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: customer_readerUpdateManyWithWhereWithoutCustomerInput | customer_readerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
  }

  export type t_salesUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput> | t_salesCreateWithoutCustomerInput[] | t_salesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_salesCreateOrConnectWithoutCustomerInput | t_salesCreateOrConnectWithoutCustomerInput[]
    upsert?: t_salesUpsertWithWhereUniqueWithoutCustomerInput | t_salesUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: t_salesCreateManyCustomerInputEnvelope
    set?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    disconnect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    delete?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    connect?: t_salesWhereUniqueInput | t_salesWhereUniqueInput[]
    update?: t_salesUpdateWithWhereUniqueWithoutCustomerInput | t_salesUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: t_salesUpdateManyWithWhereWithoutCustomerInput | t_salesUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: t_salesScalarWhereInput | t_salesScalarWhereInput[]
  }

  export type t_sales_downloadUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput> | t_sales_downloadCreateWithoutCustomerInput[] | t_sales_downloadUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutCustomerInput | t_sales_downloadCreateOrConnectWithoutCustomerInput[]
    upsert?: t_sales_downloadUpsertWithWhereUniqueWithoutCustomerInput | t_sales_downloadUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: t_sales_downloadCreateManyCustomerInputEnvelope
    set?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    disconnect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    delete?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    update?: t_sales_downloadUpdateWithWhereUniqueWithoutCustomerInput | t_sales_downloadUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: t_sales_downloadUpdateManyWithWhereWithoutCustomerInput | t_sales_downloadUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
  }

  export type customerCreateNestedOneWithoutCustomer_readerInput = {
    create?: XOR<customerCreateWithoutCustomer_readerInput, customerUncheckedCreateWithoutCustomer_readerInput>
    connectOrCreate?: customerCreateOrConnectWithoutCustomer_readerInput
    connect?: customerWhereUniqueInput
  }

  export type productCreateNestedOneWithoutCustomer_readerInput = {
    create?: XOR<productCreateWithoutCustomer_readerInput, productUncheckedCreateWithoutCustomer_readerInput>
    connectOrCreate?: productCreateOrConnectWithoutCustomer_readerInput
    connect?: productWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type customerUpdateOneRequiredWithoutCustomer_readerNestedInput = {
    create?: XOR<customerCreateWithoutCustomer_readerInput, customerUncheckedCreateWithoutCustomer_readerInput>
    connectOrCreate?: customerCreateOrConnectWithoutCustomer_readerInput
    upsert?: customerUpsertWithoutCustomer_readerInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutCustomer_readerInput, customerUpdateWithoutCustomer_readerInput>, customerUncheckedUpdateWithoutCustomer_readerInput>
  }

  export type productUpdateOneRequiredWithoutCustomer_readerNestedInput = {
    create?: XOR<productCreateWithoutCustomer_readerInput, productUncheckedCreateWithoutCustomer_readerInput>
    connectOrCreate?: productCreateOrConnectWithoutCustomer_readerInput
    upsert?: productUpsertWithoutCustomer_readerInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutCustomer_readerInput, productUpdateWithoutCustomer_readerInput>, productUncheckedUpdateWithoutCustomer_readerInput>
  }

  export type customer_trackCreateNestedOneWithoutOther_customer_trackInput = {
    create?: XOR<customer_trackCreateWithoutOther_customer_trackInput, customer_trackUncheckedCreateWithoutOther_customer_trackInput>
    connectOrCreate?: customer_trackCreateOrConnectWithoutOther_customer_trackInput
    connect?: customer_trackWhereUniqueInput
  }

  export type customer_trackCreateNestedManyWithoutCustomer_trackInput = {
    create?: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput> | customer_trackCreateWithoutCustomer_trackInput[] | customer_trackUncheckedCreateWithoutCustomer_trackInput[]
    connectOrCreate?: customer_trackCreateOrConnectWithoutCustomer_trackInput | customer_trackCreateOrConnectWithoutCustomer_trackInput[]
    createMany?: customer_trackCreateManyCustomer_trackInputEnvelope
    connect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
  }

  export type customer_trackUncheckedCreateNestedManyWithoutCustomer_trackInput = {
    create?: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput> | customer_trackCreateWithoutCustomer_trackInput[] | customer_trackUncheckedCreateWithoutCustomer_trackInput[]
    connectOrCreate?: customer_trackCreateOrConnectWithoutCustomer_trackInput | customer_trackCreateOrConnectWithoutCustomer_trackInput[]
    createMany?: customer_trackCreateManyCustomer_trackInputEnvelope
    connect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type customer_trackUpdateOneRequiredWithoutOther_customer_trackNestedInput = {
    create?: XOR<customer_trackCreateWithoutOther_customer_trackInput, customer_trackUncheckedCreateWithoutOther_customer_trackInput>
    connectOrCreate?: customer_trackCreateOrConnectWithoutOther_customer_trackInput
    upsert?: customer_trackUpsertWithoutOther_customer_trackInput
    connect?: customer_trackWhereUniqueInput
    update?: XOR<XOR<customer_trackUpdateToOneWithWhereWithoutOther_customer_trackInput, customer_trackUpdateWithoutOther_customer_trackInput>, customer_trackUncheckedUpdateWithoutOther_customer_trackInput>
  }

  export type customer_trackUpdateManyWithoutCustomer_trackNestedInput = {
    create?: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput> | customer_trackCreateWithoutCustomer_trackInput[] | customer_trackUncheckedCreateWithoutCustomer_trackInput[]
    connectOrCreate?: customer_trackCreateOrConnectWithoutCustomer_trackInput | customer_trackCreateOrConnectWithoutCustomer_trackInput[]
    upsert?: customer_trackUpsertWithWhereUniqueWithoutCustomer_trackInput | customer_trackUpsertWithWhereUniqueWithoutCustomer_trackInput[]
    createMany?: customer_trackCreateManyCustomer_trackInputEnvelope
    set?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    disconnect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    delete?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    connect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    update?: customer_trackUpdateWithWhereUniqueWithoutCustomer_trackInput | customer_trackUpdateWithWhereUniqueWithoutCustomer_trackInput[]
    updateMany?: customer_trackUpdateManyWithWhereWithoutCustomer_trackInput | customer_trackUpdateManyWithWhereWithoutCustomer_trackInput[]
    deleteMany?: customer_trackScalarWhereInput | customer_trackScalarWhereInput[]
  }

  export type customer_trackUncheckedUpdateManyWithoutCustomer_trackNestedInput = {
    create?: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput> | customer_trackCreateWithoutCustomer_trackInput[] | customer_trackUncheckedCreateWithoutCustomer_trackInput[]
    connectOrCreate?: customer_trackCreateOrConnectWithoutCustomer_trackInput | customer_trackCreateOrConnectWithoutCustomer_trackInput[]
    upsert?: customer_trackUpsertWithWhereUniqueWithoutCustomer_trackInput | customer_trackUpsertWithWhereUniqueWithoutCustomer_trackInput[]
    createMany?: customer_trackCreateManyCustomer_trackInputEnvelope
    set?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    disconnect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    delete?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    connect?: customer_trackWhereUniqueInput | customer_trackWhereUniqueInput[]
    update?: customer_trackUpdateWithWhereUniqueWithoutCustomer_trackInput | customer_trackUpdateWithWhereUniqueWithoutCustomer_trackInput[]
    updateMany?: customer_trackUpdateManyWithWhereWithoutCustomer_trackInput | customer_trackUpdateManyWithWhereWithoutCustomer_trackInput[]
    deleteMany?: customer_trackScalarWhereInput | customer_trackScalarWhereInput[]
  }

  export type landing_itemsCreateNestedManyWithoutLandingInput = {
    create?: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput> | landing_itemsCreateWithoutLandingInput[] | landing_itemsUncheckedCreateWithoutLandingInput[]
    connectOrCreate?: landing_itemsCreateOrConnectWithoutLandingInput | landing_itemsCreateOrConnectWithoutLandingInput[]
    createMany?: landing_itemsCreateManyLandingInputEnvelope
    connect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
  }

  export type landing_itemsUncheckedCreateNestedManyWithoutLandingInput = {
    create?: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput> | landing_itemsCreateWithoutLandingInput[] | landing_itemsUncheckedCreateWithoutLandingInput[]
    connectOrCreate?: landing_itemsCreateOrConnectWithoutLandingInput | landing_itemsCreateOrConnectWithoutLandingInput[]
    createMany?: landing_itemsCreateManyLandingInputEnvelope
    connect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
  }

  export type landing_itemsUpdateManyWithoutLandingNestedInput = {
    create?: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput> | landing_itemsCreateWithoutLandingInput[] | landing_itemsUncheckedCreateWithoutLandingInput[]
    connectOrCreate?: landing_itemsCreateOrConnectWithoutLandingInput | landing_itemsCreateOrConnectWithoutLandingInput[]
    upsert?: landing_itemsUpsertWithWhereUniqueWithoutLandingInput | landing_itemsUpsertWithWhereUniqueWithoutLandingInput[]
    createMany?: landing_itemsCreateManyLandingInputEnvelope
    set?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    disconnect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    delete?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    connect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    update?: landing_itemsUpdateWithWhereUniqueWithoutLandingInput | landing_itemsUpdateWithWhereUniqueWithoutLandingInput[]
    updateMany?: landing_itemsUpdateManyWithWhereWithoutLandingInput | landing_itemsUpdateManyWithWhereWithoutLandingInput[]
    deleteMany?: landing_itemsScalarWhereInput | landing_itemsScalarWhereInput[]
  }

  export type landing_itemsUncheckedUpdateManyWithoutLandingNestedInput = {
    create?: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput> | landing_itemsCreateWithoutLandingInput[] | landing_itemsUncheckedCreateWithoutLandingInput[]
    connectOrCreate?: landing_itemsCreateOrConnectWithoutLandingInput | landing_itemsCreateOrConnectWithoutLandingInput[]
    upsert?: landing_itemsUpsertWithWhereUniqueWithoutLandingInput | landing_itemsUpsertWithWhereUniqueWithoutLandingInput[]
    createMany?: landing_itemsCreateManyLandingInputEnvelope
    set?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    disconnect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    delete?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    connect?: landing_itemsWhereUniqueInput | landing_itemsWhereUniqueInput[]
    update?: landing_itemsUpdateWithWhereUniqueWithoutLandingInput | landing_itemsUpdateWithWhereUniqueWithoutLandingInput[]
    updateMany?: landing_itemsUpdateManyWithWhereWithoutLandingInput | landing_itemsUpdateManyWithWhereWithoutLandingInput[]
    deleteMany?: landing_itemsScalarWhereInput | landing_itemsScalarWhereInput[]
  }

  export type landingCreateNestedOneWithoutLanding_itemsInput = {
    create?: XOR<landingCreateWithoutLanding_itemsInput, landingUncheckedCreateWithoutLanding_itemsInput>
    connectOrCreate?: landingCreateOrConnectWithoutLanding_itemsInput
    connect?: landingWhereUniqueInput
  }

  export type landingUpdateOneRequiredWithoutLanding_itemsNestedInput = {
    create?: XOR<landingCreateWithoutLanding_itemsInput, landingUncheckedCreateWithoutLanding_itemsInput>
    connectOrCreate?: landingCreateOrConnectWithoutLanding_itemsInput
    upsert?: landingUpsertWithoutLanding_itemsInput
    connect?: landingWhereUniqueInput
    update?: XOR<XOR<landingUpdateToOneWithWhereWithoutLanding_itemsInput, landingUpdateWithoutLanding_itemsInput>, landingUncheckedUpdateWithoutLanding_itemsInput>
  }

  export type bundle_productCreateNestedManyWithoutProductInput = {
    create?: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput> | bundle_productCreateWithoutProductInput[] | bundle_productUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutProductInput | bundle_productCreateOrConnectWithoutProductInput[]
    createMany?: bundle_productCreateManyProductInputEnvelope
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
  }

  export type customer_readerCreateNestedManyWithoutProductInput = {
    create?: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput> | customer_readerCreateWithoutProductInput[] | customer_readerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutProductInput | customer_readerCreateOrConnectWithoutProductInput[]
    createMany?: customer_readerCreateManyProductInputEnvelope
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
  }

  export type authorCreateNestedOneWithoutProductInput = {
    create?: XOR<authorCreateWithoutProductInput, authorUncheckedCreateWithoutProductInput>
    connectOrCreate?: authorCreateOrConnectWithoutProductInput
    connect?: authorWhereUniqueInput
  }

  export type product_categoryCreateNestedManyWithoutProductInput = {
    create?: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput> | product_categoryCreateWithoutProductInput[] | product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductInput | product_categoryCreateOrConnectWithoutProductInput[]
    createMany?: product_categoryCreateManyProductInputEnvelope
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
  }

  export type t_sales_downloadCreateNestedManyWithoutProductInput = {
    create?: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput> | t_sales_downloadCreateWithoutProductInput[] | t_sales_downloadUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutProductInput | t_sales_downloadCreateOrConnectWithoutProductInput[]
    createMany?: t_sales_downloadCreateManyProductInputEnvelope
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
  }

  export type t_sales_lineCreateNestedManyWithoutProductInput = {
    create?: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput> | t_sales_lineCreateWithoutProductInput[] | t_sales_lineUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutProductInput | t_sales_lineCreateOrConnectWithoutProductInput[]
    createMany?: t_sales_lineCreateManyProductInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type bundle_productUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput> | bundle_productCreateWithoutProductInput[] | bundle_productUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutProductInput | bundle_productCreateOrConnectWithoutProductInput[]
    createMany?: bundle_productCreateManyProductInputEnvelope
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
  }

  export type customer_readerUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput> | customer_readerCreateWithoutProductInput[] | customer_readerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutProductInput | customer_readerCreateOrConnectWithoutProductInput[]
    createMany?: customer_readerCreateManyProductInputEnvelope
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
  }

  export type product_categoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput> | product_categoryCreateWithoutProductInput[] | product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductInput | product_categoryCreateOrConnectWithoutProductInput[]
    createMany?: product_categoryCreateManyProductInputEnvelope
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
  }

  export type t_sales_downloadUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput> | t_sales_downloadCreateWithoutProductInput[] | t_sales_downloadUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutProductInput | t_sales_downloadCreateOrConnectWithoutProductInput[]
    createMany?: t_sales_downloadCreateManyProductInputEnvelope
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
  }

  export type t_sales_lineUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput> | t_sales_lineCreateWithoutProductInput[] | t_sales_lineUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutProductInput | t_sales_lineCreateOrConnectWithoutProductInput[]
    createMany?: t_sales_lineCreateManyProductInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type bundle_productUpdateManyWithoutProductNestedInput = {
    create?: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput> | bundle_productCreateWithoutProductInput[] | bundle_productUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutProductInput | bundle_productCreateOrConnectWithoutProductInput[]
    upsert?: bundle_productUpsertWithWhereUniqueWithoutProductInput | bundle_productUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: bundle_productCreateManyProductInputEnvelope
    set?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    disconnect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    delete?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    update?: bundle_productUpdateWithWhereUniqueWithoutProductInput | bundle_productUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: bundle_productUpdateManyWithWhereWithoutProductInput | bundle_productUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
  }

  export type customer_readerUpdateManyWithoutProductNestedInput = {
    create?: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput> | customer_readerCreateWithoutProductInput[] | customer_readerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutProductInput | customer_readerCreateOrConnectWithoutProductInput[]
    upsert?: customer_readerUpsertWithWhereUniqueWithoutProductInput | customer_readerUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: customer_readerCreateManyProductInputEnvelope
    set?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    disconnect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    delete?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    update?: customer_readerUpdateWithWhereUniqueWithoutProductInput | customer_readerUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: customer_readerUpdateManyWithWhereWithoutProductInput | customer_readerUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
  }

  export type authorUpdateOneWithoutProductNestedInput = {
    create?: XOR<authorCreateWithoutProductInput, authorUncheckedCreateWithoutProductInput>
    connectOrCreate?: authorCreateOrConnectWithoutProductInput
    upsert?: authorUpsertWithoutProductInput
    disconnect?: authorWhereInput | boolean
    delete?: authorWhereInput | boolean
    connect?: authorWhereUniqueInput
    update?: XOR<XOR<authorUpdateToOneWithWhereWithoutProductInput, authorUpdateWithoutProductInput>, authorUncheckedUpdateWithoutProductInput>
  }

  export type product_categoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput> | product_categoryCreateWithoutProductInput[] | product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductInput | product_categoryCreateOrConnectWithoutProductInput[]
    upsert?: product_categoryUpsertWithWhereUniqueWithoutProductInput | product_categoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: product_categoryCreateManyProductInputEnvelope
    set?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    disconnect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    delete?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    update?: product_categoryUpdateWithWhereUniqueWithoutProductInput | product_categoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: product_categoryUpdateManyWithWhereWithoutProductInput | product_categoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
  }

  export type t_sales_downloadUpdateManyWithoutProductNestedInput = {
    create?: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput> | t_sales_downloadCreateWithoutProductInput[] | t_sales_downloadUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutProductInput | t_sales_downloadCreateOrConnectWithoutProductInput[]
    upsert?: t_sales_downloadUpsertWithWhereUniqueWithoutProductInput | t_sales_downloadUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: t_sales_downloadCreateManyProductInputEnvelope
    set?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    disconnect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    delete?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    update?: t_sales_downloadUpdateWithWhereUniqueWithoutProductInput | t_sales_downloadUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: t_sales_downloadUpdateManyWithWhereWithoutProductInput | t_sales_downloadUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
  }

  export type t_sales_lineUpdateManyWithoutProductNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput> | t_sales_lineCreateWithoutProductInput[] | t_sales_lineUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutProductInput | t_sales_lineCreateOrConnectWithoutProductInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutProductInput | t_sales_lineUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: t_sales_lineCreateManyProductInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutProductInput | t_sales_lineUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutProductInput | t_sales_lineUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type bundle_productUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput> | bundle_productCreateWithoutProductInput[] | bundle_productUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bundle_productCreateOrConnectWithoutProductInput | bundle_productCreateOrConnectWithoutProductInput[]
    upsert?: bundle_productUpsertWithWhereUniqueWithoutProductInput | bundle_productUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: bundle_productCreateManyProductInputEnvelope
    set?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    disconnect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    delete?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    connect?: bundle_productWhereUniqueInput | bundle_productWhereUniqueInput[]
    update?: bundle_productUpdateWithWhereUniqueWithoutProductInput | bundle_productUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: bundle_productUpdateManyWithWhereWithoutProductInput | bundle_productUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
  }

  export type customer_readerUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput> | customer_readerCreateWithoutProductInput[] | customer_readerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: customer_readerCreateOrConnectWithoutProductInput | customer_readerCreateOrConnectWithoutProductInput[]
    upsert?: customer_readerUpsertWithWhereUniqueWithoutProductInput | customer_readerUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: customer_readerCreateManyProductInputEnvelope
    set?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    disconnect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    delete?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    connect?: customer_readerWhereUniqueInput | customer_readerWhereUniqueInput[]
    update?: customer_readerUpdateWithWhereUniqueWithoutProductInput | customer_readerUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: customer_readerUpdateManyWithWhereWithoutProductInput | customer_readerUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
  }

  export type product_categoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput> | product_categoryCreateWithoutProductInput[] | product_categoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: product_categoryCreateOrConnectWithoutProductInput | product_categoryCreateOrConnectWithoutProductInput[]
    upsert?: product_categoryUpsertWithWhereUniqueWithoutProductInput | product_categoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: product_categoryCreateManyProductInputEnvelope
    set?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    disconnect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    delete?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    connect?: product_categoryWhereUniqueInput | product_categoryWhereUniqueInput[]
    update?: product_categoryUpdateWithWhereUniqueWithoutProductInput | product_categoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: product_categoryUpdateManyWithWhereWithoutProductInput | product_categoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
  }

  export type t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput> | t_sales_downloadCreateWithoutProductInput[] | t_sales_downloadUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_downloadCreateOrConnectWithoutProductInput | t_sales_downloadCreateOrConnectWithoutProductInput[]
    upsert?: t_sales_downloadUpsertWithWhereUniqueWithoutProductInput | t_sales_downloadUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: t_sales_downloadCreateManyProductInputEnvelope
    set?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    disconnect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    delete?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    connect?: t_sales_downloadWhereUniqueInput | t_sales_downloadWhereUniqueInput[]
    update?: t_sales_downloadUpdateWithWhereUniqueWithoutProductInput | t_sales_downloadUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: t_sales_downloadUpdateManyWithWhereWithoutProductInput | t_sales_downloadUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
  }

  export type t_sales_lineUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput> | t_sales_lineCreateWithoutProductInput[] | t_sales_lineUncheckedCreateWithoutProductInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutProductInput | t_sales_lineCreateOrConnectWithoutProductInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutProductInput | t_sales_lineUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: t_sales_lineCreateManyProductInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutProductInput | t_sales_lineUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutProductInput | t_sales_lineUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type categoryCreateNestedOneWithoutProduct_categoryInput = {
    create?: XOR<categoryCreateWithoutProduct_categoryInput, categoryUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProduct_categoryInput
    connect?: categoryWhereUniqueInput
  }

  export type productCreateNestedOneWithoutProduct_categoryInput = {
    create?: XOR<productCreateWithoutProduct_categoryInput, productUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: productCreateOrConnectWithoutProduct_categoryInput
    connect?: productWhereUniqueInput
  }

  export type categoryUpdateOneRequiredWithoutProduct_categoryNestedInput = {
    create?: XOR<categoryCreateWithoutProduct_categoryInput, categoryUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProduct_categoryInput
    upsert?: categoryUpsertWithoutProduct_categoryInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutProduct_categoryInput, categoryUpdateWithoutProduct_categoryInput>, categoryUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type productUpdateOneRequiredWithoutProduct_categoryNestedInput = {
    create?: XOR<productCreateWithoutProduct_categoryInput, productUncheckedCreateWithoutProduct_categoryInput>
    connectOrCreate?: productCreateOrConnectWithoutProduct_categoryInput
    upsert?: productUpsertWithoutProduct_categoryInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutProduct_categoryInput, productUpdateWithoutProduct_categoryInput>, productUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type customerCreateNestedOneWithoutT_salesInput = {
    create?: XOR<customerCreateWithoutT_salesInput, customerUncheckedCreateWithoutT_salesInput>
    connectOrCreate?: customerCreateOrConnectWithoutT_salesInput
    connect?: customerWhereUniqueInput
  }

  export type t_sales_lineCreateNestedManyWithoutT_salesInput = {
    create?: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput> | t_sales_lineCreateWithoutT_salesInput[] | t_sales_lineUncheckedCreateWithoutT_salesInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutT_salesInput | t_sales_lineCreateOrConnectWithoutT_salesInput[]
    createMany?: t_sales_lineCreateManyT_salesInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type t_sales_lineUncheckedCreateNestedManyWithoutT_salesInput = {
    create?: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput> | t_sales_lineCreateWithoutT_salesInput[] | t_sales_lineUncheckedCreateWithoutT_salesInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutT_salesInput | t_sales_lineCreateOrConnectWithoutT_salesInput[]
    createMany?: t_sales_lineCreateManyT_salesInputEnvelope
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
  }

  export type customerUpdateOneRequiredWithoutT_salesNestedInput = {
    create?: XOR<customerCreateWithoutT_salesInput, customerUncheckedCreateWithoutT_salesInput>
    connectOrCreate?: customerCreateOrConnectWithoutT_salesInput
    upsert?: customerUpsertWithoutT_salesInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutT_salesInput, customerUpdateWithoutT_salesInput>, customerUncheckedUpdateWithoutT_salesInput>
  }

  export type t_sales_lineUpdateManyWithoutT_salesNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput> | t_sales_lineCreateWithoutT_salesInput[] | t_sales_lineUncheckedCreateWithoutT_salesInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutT_salesInput | t_sales_lineCreateOrConnectWithoutT_salesInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutT_salesInput | t_sales_lineUpsertWithWhereUniqueWithoutT_salesInput[]
    createMany?: t_sales_lineCreateManyT_salesInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutT_salesInput | t_sales_lineUpdateWithWhereUniqueWithoutT_salesInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutT_salesInput | t_sales_lineUpdateManyWithWhereWithoutT_salesInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type t_sales_lineUncheckedUpdateManyWithoutT_salesNestedInput = {
    create?: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput> | t_sales_lineCreateWithoutT_salesInput[] | t_sales_lineUncheckedCreateWithoutT_salesInput[]
    connectOrCreate?: t_sales_lineCreateOrConnectWithoutT_salesInput | t_sales_lineCreateOrConnectWithoutT_salesInput[]
    upsert?: t_sales_lineUpsertWithWhereUniqueWithoutT_salesInput | t_sales_lineUpsertWithWhereUniqueWithoutT_salesInput[]
    createMany?: t_sales_lineCreateManyT_salesInputEnvelope
    set?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    disconnect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    delete?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    connect?: t_sales_lineWhereUniqueInput | t_sales_lineWhereUniqueInput[]
    update?: t_sales_lineUpdateWithWhereUniqueWithoutT_salesInput | t_sales_lineUpdateWithWhereUniqueWithoutT_salesInput[]
    updateMany?: t_sales_lineUpdateManyWithWhereWithoutT_salesInput | t_sales_lineUpdateManyWithWhereWithoutT_salesInput[]
    deleteMany?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
  }

  export type customerCreateNestedOneWithoutT_sales_downloadInput = {
    create?: XOR<customerCreateWithoutT_sales_downloadInput, customerUncheckedCreateWithoutT_sales_downloadInput>
    connectOrCreate?: customerCreateOrConnectWithoutT_sales_downloadInput
    connect?: customerWhereUniqueInput
  }

  export type productCreateNestedOneWithoutT_sales_downloadInput = {
    create?: XOR<productCreateWithoutT_sales_downloadInput, productUncheckedCreateWithoutT_sales_downloadInput>
    connectOrCreate?: productCreateOrConnectWithoutT_sales_downloadInput
    connect?: productWhereUniqueInput
  }

  export type customerUpdateOneRequiredWithoutT_sales_downloadNestedInput = {
    create?: XOR<customerCreateWithoutT_sales_downloadInput, customerUncheckedCreateWithoutT_sales_downloadInput>
    connectOrCreate?: customerCreateOrConnectWithoutT_sales_downloadInput
    upsert?: customerUpsertWithoutT_sales_downloadInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutT_sales_downloadInput, customerUpdateWithoutT_sales_downloadInput>, customerUncheckedUpdateWithoutT_sales_downloadInput>
  }

  export type productUpdateOneRequiredWithoutT_sales_downloadNestedInput = {
    create?: XOR<productCreateWithoutT_sales_downloadInput, productUncheckedCreateWithoutT_sales_downloadInput>
    connectOrCreate?: productCreateOrConnectWithoutT_sales_downloadInput
    upsert?: productUpsertWithoutT_sales_downloadInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutT_sales_downloadInput, productUpdateWithoutT_sales_downloadInput>, productUncheckedUpdateWithoutT_sales_downloadInput>
  }

  export type bundleCreateNestedOneWithoutT_sales_lineInput = {
    create?: XOR<bundleCreateWithoutT_sales_lineInput, bundleUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: bundleCreateOrConnectWithoutT_sales_lineInput
    connect?: bundleWhereUniqueInput
  }

  export type productCreateNestedOneWithoutT_sales_lineInput = {
    create?: XOR<productCreateWithoutT_sales_lineInput, productUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: productCreateOrConnectWithoutT_sales_lineInput
    connect?: productWhereUniqueInput
  }

  export type t_salesCreateNestedOneWithoutT_sales_lineInput = {
    create?: XOR<t_salesCreateWithoutT_sales_lineInput, t_salesUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: t_salesCreateOrConnectWithoutT_sales_lineInput
    connect?: t_salesWhereUniqueInput
  }

  export type bundleUpdateOneWithoutT_sales_lineNestedInput = {
    create?: XOR<bundleCreateWithoutT_sales_lineInput, bundleUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: bundleCreateOrConnectWithoutT_sales_lineInput
    upsert?: bundleUpsertWithoutT_sales_lineInput
    disconnect?: bundleWhereInput | boolean
    delete?: bundleWhereInput | boolean
    connect?: bundleWhereUniqueInput
    update?: XOR<XOR<bundleUpdateToOneWithWhereWithoutT_sales_lineInput, bundleUpdateWithoutT_sales_lineInput>, bundleUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type productUpdateOneWithoutT_sales_lineNestedInput = {
    create?: XOR<productCreateWithoutT_sales_lineInput, productUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: productCreateOrConnectWithoutT_sales_lineInput
    upsert?: productUpsertWithoutT_sales_lineInput
    disconnect?: productWhereInput | boolean
    delete?: productWhereInput | boolean
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutT_sales_lineInput, productUpdateWithoutT_sales_lineInput>, productUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type t_salesUpdateOneRequiredWithoutT_sales_lineNestedInput = {
    create?: XOR<t_salesCreateWithoutT_sales_lineInput, t_salesUncheckedCreateWithoutT_sales_lineInput>
    connectOrCreate?: t_salesCreateOrConnectWithoutT_sales_lineInput
    upsert?: t_salesUpsertWithoutT_sales_lineInput
    connect?: t_salesWhereUniqueInput
    update?: XOR<XOR<t_salesUpdateToOneWithWhereWithoutT_sales_lineInput, t_salesUpdateWithoutT_sales_lineInput>, t_salesUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type authorCreateNestedManyWithoutUserInput = {
    create?: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput> | authorCreateWithoutUserInput[] | authorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: authorCreateOrConnectWithoutUserInput | authorCreateOrConnectWithoutUserInput[]
    createMany?: authorCreateManyUserInputEnvelope
    connect?: authorWhereUniqueInput | authorWhereUniqueInput[]
  }

  export type authorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput> | authorCreateWithoutUserInput[] | authorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: authorCreateOrConnectWithoutUserInput | authorCreateOrConnectWithoutUserInput[]
    createMany?: authorCreateManyUserInputEnvelope
    connect?: authorWhereUniqueInput | authorWhereUniqueInput[]
  }

  export type authorUpdateManyWithoutUserNestedInput = {
    create?: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput> | authorCreateWithoutUserInput[] | authorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: authorCreateOrConnectWithoutUserInput | authorCreateOrConnectWithoutUserInput[]
    upsert?: authorUpsertWithWhereUniqueWithoutUserInput | authorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: authorCreateManyUserInputEnvelope
    set?: authorWhereUniqueInput | authorWhereUniqueInput[]
    disconnect?: authorWhereUniqueInput | authorWhereUniqueInput[]
    delete?: authorWhereUniqueInput | authorWhereUniqueInput[]
    connect?: authorWhereUniqueInput | authorWhereUniqueInput[]
    update?: authorUpdateWithWhereUniqueWithoutUserInput | authorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: authorUpdateManyWithWhereWithoutUserInput | authorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: authorScalarWhereInput | authorScalarWhereInput[]
  }

  export type authorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput> | authorCreateWithoutUserInput[] | authorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: authorCreateOrConnectWithoutUserInput | authorCreateOrConnectWithoutUserInput[]
    upsert?: authorUpsertWithWhereUniqueWithoutUserInput | authorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: authorCreateManyUserInputEnvelope
    set?: authorWhereUniqueInput | authorWhereUniqueInput[]
    disconnect?: authorWhereUniqueInput | authorWhereUniqueInput[]
    delete?: authorWhereUniqueInput | authorWhereUniqueInput[]
    connect?: authorWhereUniqueInput | authorWhereUniqueInput[]
    update?: authorUpdateWithWhereUniqueWithoutUserInput | authorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: authorUpdateManyWithWhereWithoutUserInput | authorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: authorScalarWhereInput | authorScalarWhereInput[]
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type userCreateWithoutAuthorInput = {
    id?: string
    username: string
    password: string
    role?: string
  }

  export type userUncheckedCreateWithoutAuthorInput = {
    id?: string
    username: string
    password: string
    role?: string
  }

  export type userCreateOrConnectWithoutAuthorInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAuthorInput, userUncheckedCreateWithoutAuthorInput>
  }

  export type productCreateWithoutAuthorInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutAuthorInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutAuthorInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput>
  }

  export type productCreateManyAuthorInputEnvelope = {
    data: productCreateManyAuthorInput | productCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutAuthorInput = {
    update: XOR<userUpdateWithoutAuthorInput, userUncheckedUpdateWithoutAuthorInput>
    create: XOR<userCreateWithoutAuthorInput, userUncheckedCreateWithoutAuthorInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAuthorInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAuthorInput, userUncheckedUpdateWithoutAuthorInput>
  }

  export type userUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type productUpsertWithWhereUniqueWithoutAuthorInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutAuthorInput, productUncheckedUpdateWithoutAuthorInput>
    create: XOR<productCreateWithoutAuthorInput, productUncheckedCreateWithoutAuthorInput>
  }

  export type productUpdateWithWhereUniqueWithoutAuthorInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutAuthorInput, productUncheckedUpdateWithoutAuthorInput>
  }

  export type productUpdateManyWithWhereWithoutAuthorInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutAuthorInput>
  }

  export type productScalarWhereInput = {
    AND?: productScalarWhereInput | productScalarWhereInput[]
    OR?: productScalarWhereInput[]
    NOT?: productScalarWhereInput | productScalarWhereInput[]
    id?: UuidFilter<"product"> | string
    name?: StringFilter<"product"> | string
    slug?: StringFilter<"product"> | string
    strike_price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFilter<"product"> | Decimal | DecimalJsLike | number | string
    desc?: StringFilter<"product"> | string
    info?: JsonFilter<"product">
    status?: StringFilter<"product"> | string
    currency?: StringFilter<"product"> | string
    deleted_at?: DateTimeNullableFilter<"product"> | Date | string | null
    img_file?: StringFilter<"product"> | string
    cover?: StringFilter<"product"> | string
    product_file?: StringFilter<"product"> | string
    sku?: StringFilter<"product"> | string
    id_author?: UuidNullableFilter<"product"> | string | null
    published_date?: DateTimeFilter<"product"> | Date | string
  }

  export type bundle_categoryCreateWithoutBundleInput = {
    id?: string
    category: categoryCreateNestedOneWithoutBundle_categoryInput
  }

  export type bundle_categoryUncheckedCreateWithoutBundleInput = {
    id?: string
    id_category: string
  }

  export type bundle_categoryCreateOrConnectWithoutBundleInput = {
    where: bundle_categoryWhereUniqueInput
    create: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput>
  }

  export type bundle_categoryCreateManyBundleInputEnvelope = {
    data: bundle_categoryCreateManyBundleInput | bundle_categoryCreateManyBundleInput[]
    skipDuplicates?: boolean
  }

  export type bundle_productCreateWithoutBundleInput = {
    id?: string
    qty?: number | null
    product: productCreateNestedOneWithoutBundle_productInput
  }

  export type bundle_productUncheckedCreateWithoutBundleInput = {
    id_product: string
    id?: string
    qty?: number | null
  }

  export type bundle_productCreateOrConnectWithoutBundleInput = {
    where: bundle_productWhereUniqueInput
    create: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput>
  }

  export type bundle_productCreateManyBundleInputEnvelope = {
    data: bundle_productCreateManyBundleInput | bundle_productCreateManyBundleInput[]
    skipDuplicates?: boolean
  }

  export type t_sales_lineCreateWithoutBundleInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    product?: productCreateNestedOneWithoutT_sales_lineInput
    t_sales: t_salesCreateNestedOneWithoutT_sales_lineInput
  }

  export type t_sales_lineUncheckedCreateWithoutBundleInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
  }

  export type t_sales_lineCreateOrConnectWithoutBundleInput = {
    where: t_sales_lineWhereUniqueInput
    create: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput>
  }

  export type t_sales_lineCreateManyBundleInputEnvelope = {
    data: t_sales_lineCreateManyBundleInput | t_sales_lineCreateManyBundleInput[]
    skipDuplicates?: boolean
  }

  export type bundle_categoryUpsertWithWhereUniqueWithoutBundleInput = {
    where: bundle_categoryWhereUniqueInput
    update: XOR<bundle_categoryUpdateWithoutBundleInput, bundle_categoryUncheckedUpdateWithoutBundleInput>
    create: XOR<bundle_categoryCreateWithoutBundleInput, bundle_categoryUncheckedCreateWithoutBundleInput>
  }

  export type bundle_categoryUpdateWithWhereUniqueWithoutBundleInput = {
    where: bundle_categoryWhereUniqueInput
    data: XOR<bundle_categoryUpdateWithoutBundleInput, bundle_categoryUncheckedUpdateWithoutBundleInput>
  }

  export type bundle_categoryUpdateManyWithWhereWithoutBundleInput = {
    where: bundle_categoryScalarWhereInput
    data: XOR<bundle_categoryUpdateManyMutationInput, bundle_categoryUncheckedUpdateManyWithoutBundleInput>
  }

  export type bundle_categoryScalarWhereInput = {
    AND?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
    OR?: bundle_categoryScalarWhereInput[]
    NOT?: bundle_categoryScalarWhereInput | bundle_categoryScalarWhereInput[]
    id?: UuidFilter<"bundle_category"> | string
    id_category?: UuidFilter<"bundle_category"> | string
    id_bundle?: UuidFilter<"bundle_category"> | string
  }

  export type bundle_productUpsertWithWhereUniqueWithoutBundleInput = {
    where: bundle_productWhereUniqueInput
    update: XOR<bundle_productUpdateWithoutBundleInput, bundle_productUncheckedUpdateWithoutBundleInput>
    create: XOR<bundle_productCreateWithoutBundleInput, bundle_productUncheckedCreateWithoutBundleInput>
  }

  export type bundle_productUpdateWithWhereUniqueWithoutBundleInput = {
    where: bundle_productWhereUniqueInput
    data: XOR<bundle_productUpdateWithoutBundleInput, bundle_productUncheckedUpdateWithoutBundleInput>
  }

  export type bundle_productUpdateManyWithWhereWithoutBundleInput = {
    where: bundle_productScalarWhereInput
    data: XOR<bundle_productUpdateManyMutationInput, bundle_productUncheckedUpdateManyWithoutBundleInput>
  }

  export type bundle_productScalarWhereInput = {
    AND?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
    OR?: bundle_productScalarWhereInput[]
    NOT?: bundle_productScalarWhereInput | bundle_productScalarWhereInput[]
    id_bundle?: UuidFilter<"bundle_product"> | string
    id_product?: UuidFilter<"bundle_product"> | string
    id?: UuidFilter<"bundle_product"> | string
    qty?: IntNullableFilter<"bundle_product"> | number | null
  }

  export type t_sales_lineUpsertWithWhereUniqueWithoutBundleInput = {
    where: t_sales_lineWhereUniqueInput
    update: XOR<t_sales_lineUpdateWithoutBundleInput, t_sales_lineUncheckedUpdateWithoutBundleInput>
    create: XOR<t_sales_lineCreateWithoutBundleInput, t_sales_lineUncheckedCreateWithoutBundleInput>
  }

  export type t_sales_lineUpdateWithWhereUniqueWithoutBundleInput = {
    where: t_sales_lineWhereUniqueInput
    data: XOR<t_sales_lineUpdateWithoutBundleInput, t_sales_lineUncheckedUpdateWithoutBundleInput>
  }

  export type t_sales_lineUpdateManyWithWhereWithoutBundleInput = {
    where: t_sales_lineScalarWhereInput
    data: XOR<t_sales_lineUpdateManyMutationInput, t_sales_lineUncheckedUpdateManyWithoutBundleInput>
  }

  export type t_sales_lineScalarWhereInput = {
    AND?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
    OR?: t_sales_lineScalarWhereInput[]
    NOT?: t_sales_lineScalarWhereInput | t_sales_lineScalarWhereInput[]
    id?: UuidFilter<"t_sales_line"> | string
    id_sales?: UuidFilter<"t_sales_line"> | string
    unit_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    qty?: IntFilter<"t_sales_line"> | number
    total_price?: DecimalFilter<"t_sales_line"> | Decimal | DecimalJsLike | number | string
    id_product?: UuidNullableFilter<"t_sales_line"> | string | null
    id_bundle?: UuidNullableFilter<"t_sales_line"> | string | null
  }

  export type bundleCreateWithoutBundle_categoryInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_product?: bundle_productCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutBundleInput
  }

  export type bundleUncheckedCreateWithoutBundle_categoryInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutBundleInput
  }

  export type bundleCreateOrConnectWithoutBundle_categoryInput = {
    where: bundleWhereUniqueInput
    create: XOR<bundleCreateWithoutBundle_categoryInput, bundleUncheckedCreateWithoutBundle_categoryInput>
  }

  export type categoryCreateWithoutBundle_categoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    category?: categoryCreateNestedOneWithoutOther_categoryInput
    other_category?: categoryCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutBundle_categoryInput = {
    id?: string
    name: string
    id_parent?: string | null
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    other_category?: categoryUncheckedCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutBundle_categoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutBundle_categoryInput, categoryUncheckedCreateWithoutBundle_categoryInput>
  }

  export type bundleUpsertWithoutBundle_categoryInput = {
    update: XOR<bundleUpdateWithoutBundle_categoryInput, bundleUncheckedUpdateWithoutBundle_categoryInput>
    create: XOR<bundleCreateWithoutBundle_categoryInput, bundleUncheckedCreateWithoutBundle_categoryInput>
    where?: bundleWhereInput
  }

  export type bundleUpdateToOneWithWhereWithoutBundle_categoryInput = {
    where?: bundleWhereInput
    data: XOR<bundleUpdateWithoutBundle_categoryInput, bundleUncheckedUpdateWithoutBundle_categoryInput>
  }

  export type bundleUpdateWithoutBundle_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_product?: bundle_productUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutBundleNestedInput
  }

  export type bundleUncheckedUpdateWithoutBundle_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutBundleNestedInput
  }

  export type categoryUpsertWithoutBundle_categoryInput = {
    update: XOR<categoryUpdateWithoutBundle_categoryInput, categoryUncheckedUpdateWithoutBundle_categoryInput>
    create: XOR<categoryCreateWithoutBundle_categoryInput, categoryUncheckedCreateWithoutBundle_categoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutBundle_categoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutBundle_categoryInput, categoryUncheckedUpdateWithoutBundle_categoryInput>
  }

  export type categoryUpdateWithoutBundle_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutOther_categoryNestedInput
    other_category?: categoryUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutBundle_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_parent?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    other_category?: categoryUncheckedUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type bundleCreateWithoutBundle_productInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutBundleInput
  }

  export type bundleUncheckedCreateWithoutBundle_productInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutBundleInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutBundleInput
  }

  export type bundleCreateOrConnectWithoutBundle_productInput = {
    where: bundleWhereUniqueInput
    create: XOR<bundleCreateWithoutBundle_productInput, bundleUncheckedCreateWithoutBundle_productInput>
  }

  export type productCreateWithoutBundle_productInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutBundle_productInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutBundle_productInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutBundle_productInput, productUncheckedCreateWithoutBundle_productInput>
  }

  export type bundleUpsertWithoutBundle_productInput = {
    update: XOR<bundleUpdateWithoutBundle_productInput, bundleUncheckedUpdateWithoutBundle_productInput>
    create: XOR<bundleCreateWithoutBundle_productInput, bundleUncheckedCreateWithoutBundle_productInput>
    where?: bundleWhereInput
  }

  export type bundleUpdateToOneWithWhereWithoutBundle_productInput = {
    where?: bundleWhereInput
    data: XOR<bundleUpdateWithoutBundle_productInput, bundleUncheckedUpdateWithoutBundle_productInput>
  }

  export type bundleUpdateWithoutBundle_productInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutBundleNestedInput
  }

  export type bundleUncheckedUpdateWithoutBundle_productInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutBundleNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutBundleNestedInput
  }

  export type productUpsertWithoutBundle_productInput = {
    update: XOR<productUpdateWithoutBundle_productInput, productUncheckedUpdateWithoutBundle_productInput>
    create: XOR<productCreateWithoutBundle_productInput, productUncheckedCreateWithoutBundle_productInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutBundle_productInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutBundle_productInput, productUncheckedUpdateWithoutBundle_productInput>
  }

  export type productUpdateWithoutBundle_productInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutBundle_productInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type bundle_categoryCreateWithoutCategoryInput = {
    id?: string
    bundle: bundleCreateNestedOneWithoutBundle_categoryInput
  }

  export type bundle_categoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    id_bundle: string
  }

  export type bundle_categoryCreateOrConnectWithoutCategoryInput = {
    where: bundle_categoryWhereUniqueInput
    create: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type bundle_categoryCreateManyCategoryInputEnvelope = {
    data: bundle_categoryCreateManyCategoryInput | bundle_categoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type categoryCreateWithoutOther_categoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryCreateNestedManyWithoutCategoryInput
    category?: categoryCreateNestedOneWithoutOther_categoryInput
    product_category?: product_categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutOther_categoryInput = {
    id?: string
    name: string
    id_parent?: string | null
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutOther_categoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutOther_categoryInput, categoryUncheckedCreateWithoutOther_categoryInput>
  }

  export type categoryCreateWithoutCategoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryCreateNestedManyWithoutCategoryInput
    other_category?: categoryCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutCategoryInput
    other_category?: categoryUncheckedCreateNestedManyWithoutCategoryInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutCategoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput>
  }

  export type categoryCreateManyCategoryInputEnvelope = {
    data: categoryCreateManyCategoryInput | categoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type product_categoryCreateWithoutCategoryInput = {
    id?: string
    product: productCreateNestedOneWithoutProduct_categoryInput
  }

  export type product_categoryUncheckedCreateWithoutCategoryInput = {
    id_product: string
    id?: string
  }

  export type product_categoryCreateOrConnectWithoutCategoryInput = {
    where: product_categoryWhereUniqueInput
    create: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type product_categoryCreateManyCategoryInputEnvelope = {
    data: product_categoryCreateManyCategoryInput | product_categoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type bundle_categoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: bundle_categoryWhereUniqueInput
    update: XOR<bundle_categoryUpdateWithoutCategoryInput, bundle_categoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<bundle_categoryCreateWithoutCategoryInput, bundle_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type bundle_categoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: bundle_categoryWhereUniqueInput
    data: XOR<bundle_categoryUpdateWithoutCategoryInput, bundle_categoryUncheckedUpdateWithoutCategoryInput>
  }

  export type bundle_categoryUpdateManyWithWhereWithoutCategoryInput = {
    where: bundle_categoryScalarWhereInput
    data: XOR<bundle_categoryUpdateManyMutationInput, bundle_categoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type categoryUpsertWithoutOther_categoryInput = {
    update: XOR<categoryUpdateWithoutOther_categoryInput, categoryUncheckedUpdateWithoutOther_categoryInput>
    create: XOR<categoryCreateWithoutOther_categoryInput, categoryUncheckedCreateWithoutOther_categoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutOther_categoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutOther_categoryInput, categoryUncheckedUpdateWithoutOther_categoryInput>
  }

  export type categoryUpdateWithoutOther_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUpdateManyWithoutCategoryNestedInput
    category?: categoryUpdateOneWithoutOther_categoryNestedInput
    product_category?: product_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutOther_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_parent?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: categoryWhereUniqueInput
    update: XOR<categoryUpdateWithoutCategoryInput, categoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<categoryCreateWithoutCategoryInput, categoryUncheckedCreateWithoutCategoryInput>
  }

  export type categoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: categoryWhereUniqueInput
    data: XOR<categoryUpdateWithoutCategoryInput, categoryUncheckedUpdateWithoutCategoryInput>
  }

  export type categoryUpdateManyWithWhereWithoutCategoryInput = {
    where: categoryScalarWhereInput
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type categoryScalarWhereInput = {
    AND?: categoryScalarWhereInput | categoryScalarWhereInput[]
    OR?: categoryScalarWhereInput[]
    NOT?: categoryScalarWhereInput | categoryScalarWhereInput[]
    id?: UuidFilter<"category"> | string
    name?: StringFilter<"category"> | string
    id_parent?: UuidNullableFilter<"category"> | string | null
    deleted_at?: DateTimeNullableFilter<"category"> | Date | string | null
    slug?: StringNullableFilter<"category"> | string | null
    img?: StringNullableFilter<"category"> | string | null
  }

  export type product_categoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: product_categoryWhereUniqueInput
    update: XOR<product_categoryUpdateWithoutCategoryInput, product_categoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<product_categoryCreateWithoutCategoryInput, product_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type product_categoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: product_categoryWhereUniqueInput
    data: XOR<product_categoryUpdateWithoutCategoryInput, product_categoryUncheckedUpdateWithoutCategoryInput>
  }

  export type product_categoryUpdateManyWithWhereWithoutCategoryInput = {
    where: product_categoryScalarWhereInput
    data: XOR<product_categoryUpdateManyMutationInput, product_categoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type product_categoryScalarWhereInput = {
    AND?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
    OR?: product_categoryScalarWhereInput[]
    NOT?: product_categoryScalarWhereInput | product_categoryScalarWhereInput[]
    id_product?: UuidFilter<"product_category"> | string
    id_category?: UuidFilter<"product_category"> | string
    id?: UuidFilter<"product_category"> | string
  }

  export type customer_readerCreateWithoutCustomerInput = {
    id?: string
    last_page?: number
    percent?: number
    product: productCreateNestedOneWithoutCustomer_readerInput
  }

  export type customer_readerUncheckedCreateWithoutCustomerInput = {
    id?: string
    id_product: string
    last_page?: number
    percent?: number
  }

  export type customer_readerCreateOrConnectWithoutCustomerInput = {
    where: customer_readerWhereUniqueInput
    create: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput>
  }

  export type customer_readerCreateManyCustomerInputEnvelope = {
    data: customer_readerCreateManyCustomerInput | customer_readerCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type t_salesCreateWithoutCustomerInput = {
    id?: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineCreateNestedManyWithoutT_salesInput
  }

  export type t_salesUncheckedCreateWithoutCustomerInput = {
    id?: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutT_salesInput
  }

  export type t_salesCreateOrConnectWithoutCustomerInput = {
    where: t_salesWhereUniqueInput
    create: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput>
  }

  export type t_salesCreateManyCustomerInputEnvelope = {
    data: t_salesCreateManyCustomerInput | t_salesCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type t_sales_downloadCreateWithoutCustomerInput = {
    id?: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
    product: productCreateNestedOneWithoutT_sales_downloadInput
  }

  export type t_sales_downloadUncheckedCreateWithoutCustomerInput = {
    id?: string
    id_product: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type t_sales_downloadCreateOrConnectWithoutCustomerInput = {
    where: t_sales_downloadWhereUniqueInput
    create: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput>
  }

  export type t_sales_downloadCreateManyCustomerInputEnvelope = {
    data: t_sales_downloadCreateManyCustomerInput | t_sales_downloadCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type customer_readerUpsertWithWhereUniqueWithoutCustomerInput = {
    where: customer_readerWhereUniqueInput
    update: XOR<customer_readerUpdateWithoutCustomerInput, customer_readerUncheckedUpdateWithoutCustomerInput>
    create: XOR<customer_readerCreateWithoutCustomerInput, customer_readerUncheckedCreateWithoutCustomerInput>
  }

  export type customer_readerUpdateWithWhereUniqueWithoutCustomerInput = {
    where: customer_readerWhereUniqueInput
    data: XOR<customer_readerUpdateWithoutCustomerInput, customer_readerUncheckedUpdateWithoutCustomerInput>
  }

  export type customer_readerUpdateManyWithWhereWithoutCustomerInput = {
    where: customer_readerScalarWhereInput
    data: XOR<customer_readerUpdateManyMutationInput, customer_readerUncheckedUpdateManyWithoutCustomerInput>
  }

  export type customer_readerScalarWhereInput = {
    AND?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
    OR?: customer_readerScalarWhereInput[]
    NOT?: customer_readerScalarWhereInput | customer_readerScalarWhereInput[]
    id?: UuidFilter<"customer_reader"> | string
    id_customer?: UuidFilter<"customer_reader"> | string
    id_product?: UuidFilter<"customer_reader"> | string
    last_page?: IntFilter<"customer_reader"> | number
    percent?: IntFilter<"customer_reader"> | number
  }

  export type t_salesUpsertWithWhereUniqueWithoutCustomerInput = {
    where: t_salesWhereUniqueInput
    update: XOR<t_salesUpdateWithoutCustomerInput, t_salesUncheckedUpdateWithoutCustomerInput>
    create: XOR<t_salesCreateWithoutCustomerInput, t_salesUncheckedCreateWithoutCustomerInput>
  }

  export type t_salesUpdateWithWhereUniqueWithoutCustomerInput = {
    where: t_salesWhereUniqueInput
    data: XOR<t_salesUpdateWithoutCustomerInput, t_salesUncheckedUpdateWithoutCustomerInput>
  }

  export type t_salesUpdateManyWithWhereWithoutCustomerInput = {
    where: t_salesScalarWhereInput
    data: XOR<t_salesUpdateManyMutationInput, t_salesUncheckedUpdateManyWithoutCustomerInput>
  }

  export type t_salesScalarWhereInput = {
    AND?: t_salesScalarWhereInput | t_salesScalarWhereInput[]
    OR?: t_salesScalarWhereInput[]
    NOT?: t_salesScalarWhereInput | t_salesScalarWhereInput[]
    id?: UuidFilter<"t_sales"> | string
    id_customer?: UuidFilter<"t_sales"> | string
    status?: StringFilter<"t_sales"> | string
    total?: DecimalFilter<"t_sales"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"t_sales"> | string
    info?: JsonFilter<"t_sales">
    created_at?: DateTimeFilter<"t_sales"> | Date | string
    updated_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"t_sales"> | Date | string | null
    midtrans_order_id?: StringFilter<"t_sales"> | string
    midtrans_success?: JsonNullableFilter<"t_sales">
    midtrans_pending?: JsonNullableFilter<"t_sales">
    midtrans_error?: JsonNullableFilter<"t_sales">
  }

  export type t_sales_downloadUpsertWithWhereUniqueWithoutCustomerInput = {
    where: t_sales_downloadWhereUniqueInput
    update: XOR<t_sales_downloadUpdateWithoutCustomerInput, t_sales_downloadUncheckedUpdateWithoutCustomerInput>
    create: XOR<t_sales_downloadCreateWithoutCustomerInput, t_sales_downloadUncheckedCreateWithoutCustomerInput>
  }

  export type t_sales_downloadUpdateWithWhereUniqueWithoutCustomerInput = {
    where: t_sales_downloadWhereUniqueInput
    data: XOR<t_sales_downloadUpdateWithoutCustomerInput, t_sales_downloadUncheckedUpdateWithoutCustomerInput>
  }

  export type t_sales_downloadUpdateManyWithWhereWithoutCustomerInput = {
    where: t_sales_downloadScalarWhereInput
    data: XOR<t_sales_downloadUpdateManyMutationInput, t_sales_downloadUncheckedUpdateManyWithoutCustomerInput>
  }

  export type t_sales_downloadScalarWhereInput = {
    AND?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
    OR?: t_sales_downloadScalarWhereInput[]
    NOT?: t_sales_downloadScalarWhereInput | t_sales_downloadScalarWhereInput[]
    id?: UuidFilter<"t_sales_download"> | string
    id_product?: UuidFilter<"t_sales_download"> | string
    id_customer?: UuidFilter<"t_sales_download"> | string
    downloaded_at?: DateTimeNullableFilter<"t_sales_download"> | Date | string | null
    ip_address?: StringNullableFilter<"t_sales_download"> | string | null
    download_key?: StringFilter<"t_sales_download"> | string
  }

  export type customerCreateWithoutCustomer_readerInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    t_sales?: t_salesCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutCustomer_readerInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    t_sales?: t_salesUncheckedCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutCustomer_readerInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutCustomer_readerInput, customerUncheckedCreateWithoutCustomer_readerInput>
  }

  export type productCreateWithoutCustomer_readerInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCustomer_readerInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCustomer_readerInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCustomer_readerInput, productUncheckedCreateWithoutCustomer_readerInput>
  }

  export type customerUpsertWithoutCustomer_readerInput = {
    update: XOR<customerUpdateWithoutCustomer_readerInput, customerUncheckedUpdateWithoutCustomer_readerInput>
    create: XOR<customerCreateWithoutCustomer_readerInput, customerUncheckedCreateWithoutCustomer_readerInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutCustomer_readerInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutCustomer_readerInput, customerUncheckedUpdateWithoutCustomer_readerInput>
  }

  export type customerUpdateWithoutCustomer_readerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    t_sales?: t_salesUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutCustomer_readerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    t_sales?: t_salesUncheckedUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type productUpsertWithoutCustomer_readerInput = {
    update: XOR<productUpdateWithoutCustomer_readerInput, productUncheckedUpdateWithoutCustomer_readerInput>
    create: XOR<productCreateWithoutCustomer_readerInput, productUncheckedCreateWithoutCustomer_readerInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutCustomer_readerInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutCustomer_readerInput, productUncheckedUpdateWithoutCustomer_readerInput>
  }

  export type productUpdateWithoutCustomer_readerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCustomer_readerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type customer_trackCreateWithoutOther_customer_trackInput = {
    id?: string
    ts?: Date | string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
    customer_track: customer_trackCreateNestedOneWithoutOther_customer_trackInput
  }

  export type customer_trackUncheckedCreateWithoutOther_customer_trackInput = {
    id?: string
    ts?: Date | string
    id_customer: string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
  }

  export type customer_trackCreateOrConnectWithoutOther_customer_trackInput = {
    where: customer_trackWhereUniqueInput
    create: XOR<customer_trackCreateWithoutOther_customer_trackInput, customer_trackUncheckedCreateWithoutOther_customer_trackInput>
  }

  export type customer_trackCreateWithoutCustomer_trackInput = {
    id?: string
    ts?: Date | string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
    other_customer_track?: customer_trackCreateNestedManyWithoutCustomer_trackInput
  }

  export type customer_trackUncheckedCreateWithoutCustomer_trackInput = {
    id?: string
    ts?: Date | string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
    other_customer_track?: customer_trackUncheckedCreateNestedManyWithoutCustomer_trackInput
  }

  export type customer_trackCreateOrConnectWithoutCustomer_trackInput = {
    where: customer_trackWhereUniqueInput
    create: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput>
  }

  export type customer_trackCreateManyCustomer_trackInputEnvelope = {
    data: customer_trackCreateManyCustomer_trackInput | customer_trackCreateManyCustomer_trackInput[]
    skipDuplicates?: boolean
  }

  export type customer_trackUpsertWithoutOther_customer_trackInput = {
    update: XOR<customer_trackUpdateWithoutOther_customer_trackInput, customer_trackUncheckedUpdateWithoutOther_customer_trackInput>
    create: XOR<customer_trackCreateWithoutOther_customer_trackInput, customer_trackUncheckedCreateWithoutOther_customer_trackInput>
    where?: customer_trackWhereInput
  }

  export type customer_trackUpdateToOneWithWhereWithoutOther_customer_trackInput = {
    where?: customer_trackWhereInput
    data: XOR<customer_trackUpdateWithoutOther_customer_trackInput, customer_trackUncheckedUpdateWithoutOther_customer_trackInput>
  }

  export type customer_trackUpdateWithoutOther_customer_trackInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
    customer_track?: customer_trackUpdateOneRequiredWithoutOther_customer_trackNestedInput
  }

  export type customer_trackUncheckedUpdateWithoutOther_customer_trackInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    id_customer?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
  }

  export type customer_trackUpsertWithWhereUniqueWithoutCustomer_trackInput = {
    where: customer_trackWhereUniqueInput
    update: XOR<customer_trackUpdateWithoutCustomer_trackInput, customer_trackUncheckedUpdateWithoutCustomer_trackInput>
    create: XOR<customer_trackCreateWithoutCustomer_trackInput, customer_trackUncheckedCreateWithoutCustomer_trackInput>
  }

  export type customer_trackUpdateWithWhereUniqueWithoutCustomer_trackInput = {
    where: customer_trackWhereUniqueInput
    data: XOR<customer_trackUpdateWithoutCustomer_trackInput, customer_trackUncheckedUpdateWithoutCustomer_trackInput>
  }

  export type customer_trackUpdateManyWithWhereWithoutCustomer_trackInput = {
    where: customer_trackScalarWhereInput
    data: XOR<customer_trackUpdateManyMutationInput, customer_trackUncheckedUpdateManyWithoutCustomer_trackInput>
  }

  export type customer_trackScalarWhereInput = {
    AND?: customer_trackScalarWhereInput | customer_trackScalarWhereInput[]
    OR?: customer_trackScalarWhereInput[]
    NOT?: customer_trackScalarWhereInput | customer_trackScalarWhereInput[]
    id?: UuidFilter<"customer_track"> | string
    ts?: DateTimeFilter<"customer_track"> | Date | string
    id_customer?: UuidFilter<"customer_track"> | string
    path?: StringFilter<"customer_track"> | string
    referrer?: StringFilter<"customer_track"> | string
    info?: JsonFilter<"customer_track">
    ip?: StringFilter<"customer_track"> | string
  }

  export type landing_itemsCreateWithoutLandingInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    idx?: number
    color?: string
  }

  export type landing_itemsUncheckedCreateWithoutLandingInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    idx?: number
    color?: string
  }

  export type landing_itemsCreateOrConnectWithoutLandingInput = {
    where: landing_itemsWhereUniqueInput
    create: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput>
  }

  export type landing_itemsCreateManyLandingInputEnvelope = {
    data: landing_itemsCreateManyLandingInput | landing_itemsCreateManyLandingInput[]
    skipDuplicates?: boolean
  }

  export type landing_itemsUpsertWithWhereUniqueWithoutLandingInput = {
    where: landing_itemsWhereUniqueInput
    update: XOR<landing_itemsUpdateWithoutLandingInput, landing_itemsUncheckedUpdateWithoutLandingInput>
    create: XOR<landing_itemsCreateWithoutLandingInput, landing_itemsUncheckedCreateWithoutLandingInput>
  }

  export type landing_itemsUpdateWithWhereUniqueWithoutLandingInput = {
    where: landing_itemsWhereUniqueInput
    data: XOR<landing_itemsUpdateWithoutLandingInput, landing_itemsUncheckedUpdateWithoutLandingInput>
  }

  export type landing_itemsUpdateManyWithWhereWithoutLandingInput = {
    where: landing_itemsScalarWhereInput
    data: XOR<landing_itemsUpdateManyMutationInput, landing_itemsUncheckedUpdateManyWithoutLandingInput>
  }

  export type landing_itemsScalarWhereInput = {
    AND?: landing_itemsScalarWhereInput | landing_itemsScalarWhereInput[]
    OR?: landing_itemsScalarWhereInput[]
    NOT?: landing_itemsScalarWhereInput | landing_itemsScalarWhereInput[]
    id?: UuidFilter<"landing_items"> | string
    desc?: StringFilter<"landing_items"> | string
    img_file?: StringFilter<"landing_items"> | string
    tag?: StringFilter<"landing_items"> | string
    link_to?: StringFilter<"landing_items"> | string
    landing_id?: UuidFilter<"landing_items"> | string
    idx?: IntFilter<"landing_items"> | number
    color?: StringFilter<"landing_items"> | string
  }

  export type landingCreateWithoutLanding_itemsInput = {
    id?: string
    slug: string
    views: number
    deleted_at?: Date | string | null
    status?: string
    title?: string
  }

  export type landingUncheckedCreateWithoutLanding_itemsInput = {
    id?: string
    slug: string
    views: number
    deleted_at?: Date | string | null
    status?: string
    title?: string
  }

  export type landingCreateOrConnectWithoutLanding_itemsInput = {
    where: landingWhereUniqueInput
    create: XOR<landingCreateWithoutLanding_itemsInput, landingUncheckedCreateWithoutLanding_itemsInput>
  }

  export type landingUpsertWithoutLanding_itemsInput = {
    update: XOR<landingUpdateWithoutLanding_itemsInput, landingUncheckedUpdateWithoutLanding_itemsInput>
    create: XOR<landingCreateWithoutLanding_itemsInput, landingUncheckedCreateWithoutLanding_itemsInput>
    where?: landingWhereInput
  }

  export type landingUpdateToOneWithWhereWithoutLanding_itemsInput = {
    where?: landingWhereInput
    data: XOR<landingUpdateWithoutLanding_itemsInput, landingUncheckedUpdateWithoutLanding_itemsInput>
  }

  export type landingUpdateWithoutLanding_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type landingUncheckedUpdateWithoutLanding_itemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_productCreateWithoutProductInput = {
    id?: string
    qty?: number | null
    bundle: bundleCreateNestedOneWithoutBundle_productInput
  }

  export type bundle_productUncheckedCreateWithoutProductInput = {
    id_bundle: string
    id?: string
    qty?: number | null
  }

  export type bundle_productCreateOrConnectWithoutProductInput = {
    where: bundle_productWhereUniqueInput
    create: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput>
  }

  export type bundle_productCreateManyProductInputEnvelope = {
    data: bundle_productCreateManyProductInput | bundle_productCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type customer_readerCreateWithoutProductInput = {
    id?: string
    last_page?: number
    percent?: number
    customer: customerCreateNestedOneWithoutCustomer_readerInput
  }

  export type customer_readerUncheckedCreateWithoutProductInput = {
    id?: string
    id_customer: string
    last_page?: number
    percent?: number
  }

  export type customer_readerCreateOrConnectWithoutProductInput = {
    where: customer_readerWhereUniqueInput
    create: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput>
  }

  export type customer_readerCreateManyProductInputEnvelope = {
    data: customer_readerCreateManyProductInput | customer_readerCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type authorCreateWithoutProductInput = {
    id?: string
    name: string
    user: userCreateNestedOneWithoutAuthorInput
  }

  export type authorUncheckedCreateWithoutProductInput = {
    id?: string
    id_user: string
    name: string
  }

  export type authorCreateOrConnectWithoutProductInput = {
    where: authorWhereUniqueInput
    create: XOR<authorCreateWithoutProductInput, authorUncheckedCreateWithoutProductInput>
  }

  export type product_categoryCreateWithoutProductInput = {
    id?: string
    category: categoryCreateNestedOneWithoutProduct_categoryInput
  }

  export type product_categoryUncheckedCreateWithoutProductInput = {
    id_category: string
    id?: string
  }

  export type product_categoryCreateOrConnectWithoutProductInput = {
    where: product_categoryWhereUniqueInput
    create: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput>
  }

  export type product_categoryCreateManyProductInputEnvelope = {
    data: product_categoryCreateManyProductInput | product_categoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type t_sales_downloadCreateWithoutProductInput = {
    id?: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
    customer: customerCreateNestedOneWithoutT_sales_downloadInput
  }

  export type t_sales_downloadUncheckedCreateWithoutProductInput = {
    id?: string
    id_customer: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type t_sales_downloadCreateOrConnectWithoutProductInput = {
    where: t_sales_downloadWhereUniqueInput
    create: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput>
  }

  export type t_sales_downloadCreateManyProductInputEnvelope = {
    data: t_sales_downloadCreateManyProductInput | t_sales_downloadCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type t_sales_lineCreateWithoutProductInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    bundle?: bundleCreateNestedOneWithoutT_sales_lineInput
    t_sales: t_salesCreateNestedOneWithoutT_sales_lineInput
  }

  export type t_sales_lineUncheckedCreateWithoutProductInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_bundle?: string | null
  }

  export type t_sales_lineCreateOrConnectWithoutProductInput = {
    where: t_sales_lineWhereUniqueInput
    create: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput>
  }

  export type t_sales_lineCreateManyProductInputEnvelope = {
    data: t_sales_lineCreateManyProductInput | t_sales_lineCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type bundle_productUpsertWithWhereUniqueWithoutProductInput = {
    where: bundle_productWhereUniqueInput
    update: XOR<bundle_productUpdateWithoutProductInput, bundle_productUncheckedUpdateWithoutProductInput>
    create: XOR<bundle_productCreateWithoutProductInput, bundle_productUncheckedCreateWithoutProductInput>
  }

  export type bundle_productUpdateWithWhereUniqueWithoutProductInput = {
    where: bundle_productWhereUniqueInput
    data: XOR<bundle_productUpdateWithoutProductInput, bundle_productUncheckedUpdateWithoutProductInput>
  }

  export type bundle_productUpdateManyWithWhereWithoutProductInput = {
    where: bundle_productScalarWhereInput
    data: XOR<bundle_productUpdateManyMutationInput, bundle_productUncheckedUpdateManyWithoutProductInput>
  }

  export type customer_readerUpsertWithWhereUniqueWithoutProductInput = {
    where: customer_readerWhereUniqueInput
    update: XOR<customer_readerUpdateWithoutProductInput, customer_readerUncheckedUpdateWithoutProductInput>
    create: XOR<customer_readerCreateWithoutProductInput, customer_readerUncheckedCreateWithoutProductInput>
  }

  export type customer_readerUpdateWithWhereUniqueWithoutProductInput = {
    where: customer_readerWhereUniqueInput
    data: XOR<customer_readerUpdateWithoutProductInput, customer_readerUncheckedUpdateWithoutProductInput>
  }

  export type customer_readerUpdateManyWithWhereWithoutProductInput = {
    where: customer_readerScalarWhereInput
    data: XOR<customer_readerUpdateManyMutationInput, customer_readerUncheckedUpdateManyWithoutProductInput>
  }

  export type authorUpsertWithoutProductInput = {
    update: XOR<authorUpdateWithoutProductInput, authorUncheckedUpdateWithoutProductInput>
    create: XOR<authorCreateWithoutProductInput, authorUncheckedCreateWithoutProductInput>
    where?: authorWhereInput
  }

  export type authorUpdateToOneWithWhereWithoutProductInput = {
    where?: authorWhereInput
    data: XOR<authorUpdateWithoutProductInput, authorUncheckedUpdateWithoutProductInput>
  }

  export type authorUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutAuthorNestedInput
  }

  export type authorUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type product_categoryUpsertWithWhereUniqueWithoutProductInput = {
    where: product_categoryWhereUniqueInput
    update: XOR<product_categoryUpdateWithoutProductInput, product_categoryUncheckedUpdateWithoutProductInput>
    create: XOR<product_categoryCreateWithoutProductInput, product_categoryUncheckedCreateWithoutProductInput>
  }

  export type product_categoryUpdateWithWhereUniqueWithoutProductInput = {
    where: product_categoryWhereUniqueInput
    data: XOR<product_categoryUpdateWithoutProductInput, product_categoryUncheckedUpdateWithoutProductInput>
  }

  export type product_categoryUpdateManyWithWhereWithoutProductInput = {
    where: product_categoryScalarWhereInput
    data: XOR<product_categoryUpdateManyMutationInput, product_categoryUncheckedUpdateManyWithoutProductInput>
  }

  export type t_sales_downloadUpsertWithWhereUniqueWithoutProductInput = {
    where: t_sales_downloadWhereUniqueInput
    update: XOR<t_sales_downloadUpdateWithoutProductInput, t_sales_downloadUncheckedUpdateWithoutProductInput>
    create: XOR<t_sales_downloadCreateWithoutProductInput, t_sales_downloadUncheckedCreateWithoutProductInput>
  }

  export type t_sales_downloadUpdateWithWhereUniqueWithoutProductInput = {
    where: t_sales_downloadWhereUniqueInput
    data: XOR<t_sales_downloadUpdateWithoutProductInput, t_sales_downloadUncheckedUpdateWithoutProductInput>
  }

  export type t_sales_downloadUpdateManyWithWhereWithoutProductInput = {
    where: t_sales_downloadScalarWhereInput
    data: XOR<t_sales_downloadUpdateManyMutationInput, t_sales_downloadUncheckedUpdateManyWithoutProductInput>
  }

  export type t_sales_lineUpsertWithWhereUniqueWithoutProductInput = {
    where: t_sales_lineWhereUniqueInput
    update: XOR<t_sales_lineUpdateWithoutProductInput, t_sales_lineUncheckedUpdateWithoutProductInput>
    create: XOR<t_sales_lineCreateWithoutProductInput, t_sales_lineUncheckedCreateWithoutProductInput>
  }

  export type t_sales_lineUpdateWithWhereUniqueWithoutProductInput = {
    where: t_sales_lineWhereUniqueInput
    data: XOR<t_sales_lineUpdateWithoutProductInput, t_sales_lineUncheckedUpdateWithoutProductInput>
  }

  export type t_sales_lineUpdateManyWithWhereWithoutProductInput = {
    where: t_sales_lineScalarWhereInput
    data: XOR<t_sales_lineUpdateManyMutationInput, t_sales_lineUncheckedUpdateManyWithoutProductInput>
  }

  export type categoryCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryCreateNestedManyWithoutCategoryInput
    category?: categoryCreateNestedOneWithoutOther_categoryInput
    other_category?: categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    id_parent?: string | null
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutCategoryInput
    other_category?: categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutProduct_categoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutProduct_categoryInput, categoryUncheckedCreateWithoutProduct_categoryInput>
  }

  export type productCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutProduct_categoryInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutProduct_categoryInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutProduct_categoryInput, productUncheckedCreateWithoutProduct_categoryInput>
  }

  export type categoryUpsertWithoutProduct_categoryInput = {
    update: XOR<categoryUpdateWithoutProduct_categoryInput, categoryUncheckedUpdateWithoutProduct_categoryInput>
    create: XOR<categoryCreateWithoutProduct_categoryInput, categoryUncheckedCreateWithoutProduct_categoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutProduct_categoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutProduct_categoryInput, categoryUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type categoryUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUpdateManyWithoutCategoryNestedInput
    category?: categoryUpdateOneWithoutOther_categoryNestedInput
    other_category?: categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_parent?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutCategoryNestedInput
    other_category?: categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type productUpsertWithoutProduct_categoryInput = {
    update: XOR<productUpdateWithoutProduct_categoryInput, productUncheckedUpdateWithoutProduct_categoryInput>
    create: XOR<productCreateWithoutProduct_categoryInput, productUncheckedCreateWithoutProduct_categoryInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutProduct_categoryInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutProduct_categoryInput, productUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type productUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutProduct_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type customerCreateWithoutT_salesInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutT_salesInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutCustomerInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutT_salesInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutT_salesInput, customerUncheckedCreateWithoutT_salesInput>
  }

  export type t_sales_lineCreateWithoutT_salesInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    bundle?: bundleCreateNestedOneWithoutT_sales_lineInput
    product?: productCreateNestedOneWithoutT_sales_lineInput
  }

  export type t_sales_lineUncheckedCreateWithoutT_salesInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
    id_bundle?: string | null
  }

  export type t_sales_lineCreateOrConnectWithoutT_salesInput = {
    where: t_sales_lineWhereUniqueInput
    create: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput>
  }

  export type t_sales_lineCreateManyT_salesInputEnvelope = {
    data: t_sales_lineCreateManyT_salesInput | t_sales_lineCreateManyT_salesInput[]
    skipDuplicates?: boolean
  }

  export type customerUpsertWithoutT_salesInput = {
    update: XOR<customerUpdateWithoutT_salesInput, customerUncheckedUpdateWithoutT_salesInput>
    create: XOR<customerCreateWithoutT_salesInput, customerUncheckedCreateWithoutT_salesInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutT_salesInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutT_salesInput, customerUncheckedUpdateWithoutT_salesInput>
  }

  export type customerUpdateWithoutT_salesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutT_salesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUncheckedUpdateManyWithoutCustomerNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type t_sales_lineUpsertWithWhereUniqueWithoutT_salesInput = {
    where: t_sales_lineWhereUniqueInput
    update: XOR<t_sales_lineUpdateWithoutT_salesInput, t_sales_lineUncheckedUpdateWithoutT_salesInput>
    create: XOR<t_sales_lineCreateWithoutT_salesInput, t_sales_lineUncheckedCreateWithoutT_salesInput>
  }

  export type t_sales_lineUpdateWithWhereUniqueWithoutT_salesInput = {
    where: t_sales_lineWhereUniqueInput
    data: XOR<t_sales_lineUpdateWithoutT_salesInput, t_sales_lineUncheckedUpdateWithoutT_salesInput>
  }

  export type t_sales_lineUpdateManyWithWhereWithoutT_salesInput = {
    where: t_sales_lineScalarWhereInput
    data: XOR<t_sales_lineUpdateManyMutationInput, t_sales_lineUncheckedUpdateManyWithoutT_salesInput>
  }

  export type customerCreateWithoutT_sales_downloadInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerCreateNestedManyWithoutCustomerInput
    t_sales?: t_salesCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutT_sales_downloadInput = {
    id?: string
    name: string
    email: string
    whatsapp: string
    deleted_at?: Date | string | null
    otp?: number | null
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutCustomerInput
    t_sales?: t_salesUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutT_sales_downloadInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutT_sales_downloadInput, customerUncheckedCreateWithoutT_sales_downloadInput>
  }

  export type productCreateWithoutT_sales_downloadInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutT_sales_downloadInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_line?: t_sales_lineUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutT_sales_downloadInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutT_sales_downloadInput, productUncheckedCreateWithoutT_sales_downloadInput>
  }

  export type customerUpsertWithoutT_sales_downloadInput = {
    update: XOR<customerUpdateWithoutT_sales_downloadInput, customerUncheckedUpdateWithoutT_sales_downloadInput>
    create: XOR<customerCreateWithoutT_sales_downloadInput, customerUncheckedCreateWithoutT_sales_downloadInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutT_sales_downloadInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutT_sales_downloadInput, customerUncheckedUpdateWithoutT_sales_downloadInput>
  }

  export type customerUpdateWithoutT_sales_downloadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUpdateManyWithoutCustomerNestedInput
    t_sales?: t_salesUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutT_sales_downloadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    customer_reader?: customer_readerUncheckedUpdateManyWithoutCustomerNestedInput
    t_sales?: t_salesUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type productUpsertWithoutT_sales_downloadInput = {
    update: XOR<productUpdateWithoutT_sales_downloadInput, productUncheckedUpdateWithoutT_sales_downloadInput>
    create: XOR<productCreateWithoutT_sales_downloadInput, productUncheckedCreateWithoutT_sales_downloadInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutT_sales_downloadInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutT_sales_downloadInput, productUncheckedUpdateWithoutT_sales_downloadInput>
  }

  export type productUpdateWithoutT_sales_downloadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutT_sales_downloadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type bundleCreateWithoutT_sales_lineInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryCreateNestedManyWithoutBundleInput
    bundle_product?: bundle_productCreateNestedManyWithoutBundleInput
  }

  export type bundleUncheckedCreateWithoutT_sales_lineInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    currency?: string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: Date | string | null
    status?: string
    img_file?: string
    cover?: string
    sku?: string
    bundle_category?: bundle_categoryUncheckedCreateNestedManyWithoutBundleInput
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutBundleInput
  }

  export type bundleCreateOrConnectWithoutT_sales_lineInput = {
    where: bundleWhereUniqueInput
    create: XOR<bundleCreateWithoutT_sales_lineInput, bundleUncheckedCreateWithoutT_sales_lineInput>
  }

  export type productCreateWithoutT_sales_lineInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
    bundle_product?: bundle_productCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerCreateNestedManyWithoutProductInput
    author?: authorCreateNestedOneWithoutProductInput
    product_category?: product_categoryCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutT_sales_lineInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    id_author?: string | null
    published_date?: Date | string
    bundle_product?: bundle_productUncheckedCreateNestedManyWithoutProductInput
    customer_reader?: customer_readerUncheckedCreateNestedManyWithoutProductInput
    product_category?: product_categoryUncheckedCreateNestedManyWithoutProductInput
    t_sales_download?: t_sales_downloadUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutT_sales_lineInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutT_sales_lineInput, productUncheckedCreateWithoutT_sales_lineInput>
  }

  export type t_salesCreateWithoutT_sales_lineInput = {
    id?: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    customer: customerCreateNestedOneWithoutT_salesInput
  }

  export type t_salesUncheckedCreateWithoutT_sales_lineInput = {
    id?: string
    id_customer: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_salesCreateOrConnectWithoutT_sales_lineInput = {
    where: t_salesWhereUniqueInput
    create: XOR<t_salesCreateWithoutT_sales_lineInput, t_salesUncheckedCreateWithoutT_sales_lineInput>
  }

  export type bundleUpsertWithoutT_sales_lineInput = {
    update: XOR<bundleUpdateWithoutT_sales_lineInput, bundleUncheckedUpdateWithoutT_sales_lineInput>
    create: XOR<bundleCreateWithoutT_sales_lineInput, bundleUncheckedCreateWithoutT_sales_lineInput>
    where?: bundleWhereInput
  }

  export type bundleUpdateToOneWithWhereWithoutT_sales_lineInput = {
    where?: bundleWhereInput
    data: XOR<bundleUpdateWithoutT_sales_lineInput, bundleUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type bundleUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUpdateManyWithoutBundleNestedInput
    bundle_product?: bundle_productUpdateManyWithoutBundleNestedInput
  }

  export type bundleUncheckedUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutBundleNestedInput
    bundle_product?: bundle_productUncheckedUpdateManyWithoutBundleNestedInput
  }

  export type productUpsertWithoutT_sales_lineInput = {
    update: XOR<productUpdateWithoutT_sales_lineInput, productUncheckedUpdateWithoutT_sales_lineInput>
    create: XOR<productCreateWithoutT_sales_lineInput, productUncheckedCreateWithoutT_sales_lineInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutT_sales_lineInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutT_sales_lineInput, productUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type productUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    author?: authorUpdateOneWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    id_author?: NullableStringFieldUpdateOperationsInput | string | null
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
  }

  export type t_salesUpsertWithoutT_sales_lineInput = {
    update: XOR<t_salesUpdateWithoutT_sales_lineInput, t_salesUncheckedUpdateWithoutT_sales_lineInput>
    create: XOR<t_salesCreateWithoutT_sales_lineInput, t_salesUncheckedCreateWithoutT_sales_lineInput>
    where?: t_salesWhereInput
  }

  export type t_salesUpdateToOneWithWhereWithoutT_sales_lineInput = {
    where?: t_salesWhereInput
    data: XOR<t_salesUpdateWithoutT_sales_lineInput, t_salesUncheckedUpdateWithoutT_sales_lineInput>
  }

  export type t_salesUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    customer?: customerUpdateOneRequiredWithoutT_salesNestedInput
  }

  export type t_salesUncheckedUpdateWithoutT_sales_lineInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type authorCreateWithoutUserInput = {
    id?: string
    name: string
    product?: productCreateNestedManyWithoutAuthorInput
  }

  export type authorUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    product?: productUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type authorCreateOrConnectWithoutUserInput = {
    where: authorWhereUniqueInput
    create: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput>
  }

  export type authorCreateManyUserInputEnvelope = {
    data: authorCreateManyUserInput | authorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type authorUpsertWithWhereUniqueWithoutUserInput = {
    where: authorWhereUniqueInput
    update: XOR<authorUpdateWithoutUserInput, authorUncheckedUpdateWithoutUserInput>
    create: XOR<authorCreateWithoutUserInput, authorUncheckedCreateWithoutUserInput>
  }

  export type authorUpdateWithWhereUniqueWithoutUserInput = {
    where: authorWhereUniqueInput
    data: XOR<authorUpdateWithoutUserInput, authorUncheckedUpdateWithoutUserInput>
  }

  export type authorUpdateManyWithWhereWithoutUserInput = {
    where: authorScalarWhereInput
    data: XOR<authorUpdateManyMutationInput, authorUncheckedUpdateManyWithoutUserInput>
  }

  export type authorScalarWhereInput = {
    AND?: authorScalarWhereInput | authorScalarWhereInput[]
    OR?: authorScalarWhereInput[]
    NOT?: authorScalarWhereInput | authorScalarWhereInput[]
    id?: UuidFilter<"author"> | string
    id_user?: UuidFilter<"author"> | string
    name?: StringFilter<"author"> | string
  }

  export type productCreateManyAuthorInput = {
    id?: string
    name: string
    slug: string
    strike_price?: Decimal | DecimalJsLike | number | string | null
    real_price: Decimal | DecimalJsLike | number | string
    desc?: string
    info?: JsonNullValueInput | InputJsonValue
    status?: string
    currency?: string
    deleted_at?: Date | string | null
    img_file?: string
    cover?: string
    product_file?: string
    sku?: string
    published_date?: Date | string
  }

  export type productUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle_product?: bundle_productUncheckedUpdateManyWithoutProductNestedInput
    customer_reader?: customer_readerUncheckedUpdateManyWithoutProductNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutProductNestedInput
    t_sales_download?: t_sales_downloadUncheckedUpdateManyWithoutProductNestedInput
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    strike_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    real_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    desc?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    img_file?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    product_file?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    published_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bundle_categoryCreateManyBundleInput = {
    id?: string
    id_category: string
  }

  export type bundle_productCreateManyBundleInput = {
    id_product: string
    id?: string
    qty?: number | null
  }

  export type t_sales_lineCreateManyBundleInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
  }

  export type bundle_categoryUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneRequiredWithoutBundle_categoryNestedInput
  }

  export type bundle_categoryUncheckedUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_categoryUncheckedUpdateManyWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_productUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
    product?: productUpdateOneRequiredWithoutBundle_productNestedInput
  }

  export type bundle_productUncheckedUpdateWithoutBundleInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bundle_productUncheckedUpdateManyWithoutBundleInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type t_sales_lineUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: productUpdateOneWithoutT_sales_lineNestedInput
    t_sales?: t_salesUpdateOneRequiredWithoutT_sales_lineNestedInput
  }

  export type t_sales_lineUncheckedUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type t_sales_lineUncheckedUpdateManyWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bundle_categoryCreateManyCategoryInput = {
    id?: string
    id_bundle: string
  }

  export type categoryCreateManyCategoryInput = {
    id?: string
    name: string
    deleted_at?: Date | string | null
    slug?: string | null
    img?: string | null
  }

  export type product_categoryCreateManyCategoryInput = {
    id_product: string
    id?: string
  }

  export type bundle_categoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundle?: bundleUpdateOneRequiredWithoutBundle_categoryNestedInput
  }

  export type bundle_categoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_bundle?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_categoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_bundle?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUpdateManyWithoutCategoryNestedInput
    other_category?: categoryUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    bundle_category?: bundle_categoryUncheckedUpdateManyWithoutCategoryNestedInput
    other_category?: categoryUncheckedUpdateManyWithoutCategoryNestedInput
    product_category?: product_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_categoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: productUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type product_categoryUncheckedUpdateWithoutCategoryInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type product_categoryUncheckedUpdateManyWithoutCategoryInput = {
    id_product?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type customer_readerCreateManyCustomerInput = {
    id?: string
    id_product: string
    last_page?: number
    percent?: number
  }

  export type t_salesCreateManyCustomerInput = {
    id?: string
    status?: string
    total: Decimal | DecimalJsLike | number | string
    currency?: string
    info: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    midtrans_order_id?: string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_sales_downloadCreateManyCustomerInput = {
    id?: string
    id_product: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type customer_readerUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
    product?: productUpdateOneRequiredWithoutCustomer_readerNestedInput
  }

  export type customer_readerUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type customer_readerUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type t_salesUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineUpdateManyWithoutT_salesNestedInput
  }

  export type t_salesUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
    t_sales_line?: t_sales_lineUncheckedUpdateManyWithoutT_salesNestedInput
  }

  export type t_salesUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    midtrans_order_id?: StringFieldUpdateOperationsInput | string
    midtrans_success?: NullableJsonNullValueInput | InputJsonValue
    midtrans_pending?: NullableJsonNullValueInput | InputJsonValue
    midtrans_error?: NullableJsonNullValueInput | InputJsonValue
  }

  export type t_sales_downloadUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
    product?: productUpdateOneRequiredWithoutT_sales_downloadNestedInput
  }

  export type t_sales_downloadUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_downloadUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type customer_trackCreateManyCustomer_trackInput = {
    id?: string
    ts?: Date | string
    path: string
    referrer: string
    info: JsonNullValueInput | InputJsonValue
    ip: string
  }

  export type customer_trackUpdateWithoutCustomer_trackInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
    other_customer_track?: customer_trackUpdateManyWithoutCustomer_trackNestedInput
  }

  export type customer_trackUncheckedUpdateWithoutCustomer_trackInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
    other_customer_track?: customer_trackUncheckedUpdateManyWithoutCustomer_trackNestedInput
  }

  export type customer_trackUncheckedUpdateManyWithoutCustomer_trackInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    path?: StringFieldUpdateOperationsInput | string
    referrer?: StringFieldUpdateOperationsInput | string
    info?: JsonNullValueInput | InputJsonValue
    ip?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsCreateManyLandingInput = {
    id?: string
    desc?: string
    img_file: string
    tag?: string
    link_to: string
    idx?: number
    color?: string
  }

  export type landing_itemsUpdateWithoutLandingInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsUncheckedUpdateWithoutLandingInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type landing_itemsUncheckedUpdateManyWithoutLandingInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    img_file?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    link_to?: StringFieldUpdateOperationsInput | string
    idx?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type bundle_productCreateManyProductInput = {
    id_bundle: string
    id?: string
    qty?: number | null
  }

  export type customer_readerCreateManyProductInput = {
    id?: string
    id_customer: string
    last_page?: number
    percent?: number
  }

  export type product_categoryCreateManyProductInput = {
    id_category: string
    id?: string
  }

  export type t_sales_downloadCreateManyProductInput = {
    id?: string
    id_customer: string
    downloaded_at?: Date | string | null
    ip_address?: string | null
    download_key?: string
  }

  export type t_sales_lineCreateManyProductInput = {
    id?: string
    id_sales: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_bundle?: string | null
  }

  export type bundle_productUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
    bundle?: bundleUpdateOneRequiredWithoutBundle_productNestedInput
  }

  export type bundle_productUncheckedUpdateWithoutProductInput = {
    id_bundle?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bundle_productUncheckedUpdateManyWithoutProductInput = {
    id_bundle?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    qty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customer_readerUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
    customer?: customerUpdateOneRequiredWithoutCustomer_readerNestedInput
  }

  export type customer_readerUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type customer_readerUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    last_page?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
  }

  export type product_categoryUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneRequiredWithoutProduct_categoryNestedInput
  }

  export type product_categoryUncheckedUpdateWithoutProductInput = {
    id_category?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type product_categoryUncheckedUpdateManyWithoutProductInput = {
    id_category?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_downloadUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
    customer?: customerUpdateOneRequiredWithoutT_sales_downloadNestedInput
  }

  export type t_sales_downloadUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_downloadUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_customer?: StringFieldUpdateOperationsInput | string
    downloaded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    download_key?: StringFieldUpdateOperationsInput | string
  }

  export type t_sales_lineUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bundle?: bundleUpdateOneWithoutT_sales_lineNestedInput
    t_sales?: t_salesUpdateOneRequiredWithoutT_sales_lineNestedInput
  }

  export type t_sales_lineUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type t_sales_lineUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_sales?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type t_sales_lineCreateManyT_salesInput = {
    id?: string
    unit_price: Decimal | DecimalJsLike | number | string
    qty: number
    total_price: Decimal | DecimalJsLike | number | string
    id_product?: string | null
    id_bundle?: string | null
  }

  export type t_sales_lineUpdateWithoutT_salesInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bundle?: bundleUpdateOneWithoutT_sales_lineNestedInput
    product?: productUpdateOneWithoutT_sales_lineNestedInput
  }

  export type t_sales_lineUncheckedUpdateWithoutT_salesInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type t_sales_lineUncheckedUpdateManyWithoutT_salesInput = {
    id?: StringFieldUpdateOperationsInput | string
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    qty?: IntFieldUpdateOperationsInput | number
    total_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_product?: NullableStringFieldUpdateOperationsInput | string | null
    id_bundle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type authorCreateManyUserInput = {
    id?: string
    name: string
  }

  export type authorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    product?: productUpdateManyWithoutAuthorNestedInput
  }

  export type authorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    product?: productUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type authorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AuthorCountOutputTypeDefaultArgs instead
     */
    export type AuthorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuthorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BundleCountOutputTypeDefaultArgs instead
     */
    export type BundleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BundleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Customer_trackCountOutputTypeDefaultArgs instead
     */
    export type Customer_trackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Customer_trackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LandingCountOutputTypeDefaultArgs instead
     */
    export type LandingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LandingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use T_salesCountOutputTypeDefaultArgs instead
     */
    export type T_salesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = T_salesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use authorDefaultArgs instead
     */
    export type authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = authorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bannerDefaultArgs instead
     */
    export type bannerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bannerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bundleDefaultArgs instead
     */
    export type bundleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bundleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bundle_categoryDefaultArgs instead
     */
    export type bundle_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bundle_categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bundle_productDefaultArgs instead
     */
    export type bundle_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bundle_productDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoryDefaultArgs instead
     */
    export type categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use customerDefaultArgs instead
     */
    export type customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = customerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use customer_readerDefaultArgs instead
     */
    export type customer_readerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = customer_readerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use customer_trackDefaultArgs instead
     */
    export type customer_trackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = customer_trackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use landingDefaultArgs instead
     */
    export type landingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = landingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use landing_itemsDefaultArgs instead
     */
    export type landing_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = landing_itemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use midtrxDefaultArgs instead
     */
    export type midtrxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = midtrxDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productDefaultArgs instead
     */
    export type productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_categoryDefaultArgs instead
     */
    export type product_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use t_salesDefaultArgs instead
     */
    export type t_salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = t_salesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use t_sales_downloadDefaultArgs instead
     */
    export type t_sales_downloadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = t_sales_downloadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use t_sales_lineDefaultArgs instead
     */
    export type t_sales_lineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = t_sales_lineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}